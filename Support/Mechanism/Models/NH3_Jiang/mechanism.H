#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  H
1  O
2  N
3  Ar
4  He
*/

// Species
#define NO_ID 0
#define N2O_ID 1
#define O2_ID 2
#define H2_ID 3
#define AR_ID 4
#define H_ID 5
#define O_ID 6
#define OH_ID 7
#define HO2_ID 8
#define H2O_ID 9
#define H2O2_ID 10
#define NO2_ID 11
#define NH3_ID 12
#define HNO_ID 13
#define N_ID 14
#define NNH_ID 15
#define NH2_ID 16
#define NH_ID 17
#define HE_ID 18
#define N2_ID 19
#define H2NO_ID 20

#define NUM_ELEMENTS 5
#define NUM_SPECIES 21
#define NUM_IONS 0
#define NUM_REACTIONS 64

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or GPU based. Defined in mechanism.cpp 
void atomicWeight(amrex::Real *  awt);
//  MISC 
void CKAWT(amrex::Real *  awt);
void CKNCF(int * ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int * _rmap);
void CKINU(int * i, int * nspec, int * ki, int * nu);
void CKKFKR(amrex::Real *  P, amrex::Real *  T,amrex::Real *  x, amrex::Real *  q_f, amrex::Real *  q_r);
void progressRateFR(amrex::Real *  q_f, amrex::Real *  q_r,amrex::Real *  sc, amrex::Real T);
//  SPARSE INFORMATION 
void SPARSITY_INFO(int * nJdata, const int * consP, int NCELLS);
void SPARSITY_INFO_SYST(int * nJdata, const int * consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int * nJdata, const int * consP);
void SPARSITY_PREPROC_CSC(int * rowVals, int * colPtrs, const int * consP, int NCELLS);
void SPARSITY_PREPROC_CSR(int * colVals, int * rowPtrs, const int * consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(int * colVals, int * rowPtrs, const int * consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(int * rowVals, int * colPtrs, int * indx, const int * consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(int * colVals, int * rowPtr, const int * consP, int base);


// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKINDX(int * mm, int * kk, int * ii, int * nfit)
{
*mm = 5;
*kk = 21;
*ii = 64;
*nfit = -1; // Why do you need this anyway ? 
}

//  inverse molecular weights 
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void get_imw(amrex::Real *imw_new){
imw_new[0] = 1.0/30.006000;// NO
imw_new[1] = 1.0/44.013000;// N2O
imw_new[2] = 1.0/31.998000;// O2
imw_new[3] = 1.0/2.016000;// H2
imw_new[4] = 1.0/39.950000;// AR
imw_new[5] = 1.0/1.008000;// H
imw_new[6] = 1.0/15.999000;// O
imw_new[7] = 1.0/17.007000;// OH
imw_new[8] = 1.0/33.006000;// HO2
imw_new[9] = 1.0/18.015000;// H2O
imw_new[10] = 1.0/34.014000;// H2O2
imw_new[11] = 1.0/46.005000;// NO2
imw_new[12] = 1.0/17.031000;// NH3
imw_new[13] = 1.0/31.014000;// HNO
imw_new[14] = 1.0/14.007000;// N
imw_new[15] = 1.0/29.022000;// NNH
imw_new[16] = 1.0/16.023000;// NH2
imw_new[17] = 1.0/15.015000;// NH
imw_new[18] = 1.0/4.002602;// HE
imw_new[19] = 1.0/28.014000;// N2
imw_new[20] = 1.0/32.022000;// H2NO
}

//  molecular weights 
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void get_mw(amrex::Real *mw_new){
mw_new[0] = 30.006000;// NO
mw_new[1] = 44.013000;// N2O
mw_new[2] = 31.998000;// O2
mw_new[3] = 2.016000;// H2
mw_new[4] = 39.950000;// AR
mw_new[5] = 1.008000;// H
mw_new[6] = 15.999000;// O
mw_new[7] = 17.007000;// OH
mw_new[8] = 33.006000;// HO2
mw_new[9] = 18.015000;// H2O
mw_new[10] = 34.014000;// H2O2
mw_new[11] = 46.005000;// NO2
mw_new[12] = 17.031000;// NH3
mw_new[13] = 31.014000;// HNO
mw_new[14] = 14.007000;// N
mw_new[15] = 29.022000;// NNH
mw_new[16] = 16.023000;// NH2
mw_new[17] = 15.015000;// NH
mw_new[18] = 4.002602;// HE
mw_new[19] = 28.014000;// N2
mw_new[20] = 32.022000;// H2NO
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKRP(amrex::Real *  ru, amrex::Real *  ruc, amrex::Real *  pa)
{
 *ru  = 8.31446261815324e+07; 
 *ruc = 1.98721558317399615845; 
 *pa  = 1.01325e+06; 
}

// compute Cv/R at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void cv_R(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+2.37654200e+00
+1.25306300e-03 * tc[1]
-3.30275100e-06 * tc[2]
+5.21781000e-09 * tc[3]
-2.44626300e-12 * tc[4];
// species 1: N2O
species[1] =
+1.54305800e+00
+9.49219300e-03 * tc[1]
-9.79277500e-06 * tc[2]
+6.26384500e-09 * tc[3]
-1.90182600e-12 * tc[4];
// species 2: O2
species[2] =
+2.78245636e+00
-2.99673416e-03 * tc[1]
+9.84730201e-06 * tc[2]
-9.68129509e-09 * tc[3]
+3.24372837e-12 * tc[4];
// species 3: H2
species[3] =
+1.34433112e+00
+7.98052075e-03 * tc[1]
-1.94781510e-05 * tc[2]
+2.01572094e-08 * tc[3]
-7.37611761e-12 * tc[4];
// species 4: AR
species[4] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 5: H
species[5] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 6: O
species[6] =
+2.16826710e+00
-3.27931884e-03 * tc[1]
+6.64306396e-06 * tc[2]
-6.12806624e-09 * tc[3]
+2.11265971e-12 * tc[4];
// species 7: OH
species[7] =
+2.99198424e+00
-2.40106655e-03 * tc[1]
+4.61664033e-06 * tc[2]
-3.87916306e-09 * tc[3]
+1.36319502e-12 * tc[4];
// species 8: HO2
species[8] =
+3.30179807e+00
-4.74912097e-03 * tc[1]
+2.11582905e-05 * tc[2]
-2.42763914e-08 * tc[3]
+9.29225225e-12 * tc[4];
// species 9: H2O
species[9] =
+3.19863520e+00
-2.03640170e-03 * tc[1]
+6.52034160e-06 * tc[2]
-5.48792690e-09 * tc[3]
+1.77196800e-12 * tc[4];
// species 10: H2O2
species[10] =
+3.31515149e+00
-8.47390622e-04 * tc[1]
+1.76404323e-05 * tc[2]
-2.26762944e-08 * tc[3]
+9.08950158e-12 * tc[4];
// species 11: NO2
species[11] =
+1.67060000e+00
+7.83850100e-03 * tc[1]
-8.06386500e-06 * tc[2]
+6.16171500e-09 * tc[3]
-2.32015000e-12 * tc[4];
// species 12: NH3
species[12] =
+1.20435200e+00
+1.01147600e-02 * tc[1]
-1.46526500e-05 * tc[2]
+1.44723500e-08 * tc[3]
-5.32850900e-12 * tc[4];
// species 13: HNO
species[13] =
+1.78440300e+00
+6.60964600e-03 * tc[1]
-9.30022300e-06 * tc[2]
+9.43798000e-09 * tc[3]
-3.75314600e-12 * tc[4];
// species 14: N
species[14] =
+1.50307100e+00
-2.18001800e-05 * tc[1]
+5.42052900e-08 * tc[2]
-5.64756000e-11 * tc[3]
+2.09990400e-14 * tc[4];
// species 15: NNH
species[15] =
+2.50134400e+00
+2.05358700e-03 * tc[1]
+7.17041000e-07 * tc[2]
+4.92134800e-10 * tc[3]
-9.67117000e-13 * tc[4];
// species 16: NH2
species[16] =
+2.43249300e+00
+3.29954000e-03 * tc[1]
-6.61360000e-06 * tc[2]
+8.59094700e-09 * tc[3]
-3.57204700e-12 * tc[4];
// species 17: NH
species[17] =
+2.49290840e+00
+3.11791970e-04 * tc[1]
-1.48904840e-06 * tc[2]
+2.48164420e-09 * tc[3]
-1.03569670e-12 * tc[4];
// species 18: HE
species[18] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 19: N2
species[19] =
+2.53100528e+00
-1.23660988e-04 * tc[1]
-5.02999433e-07 * tc[2]
+2.43530612e-09 * tc[3]
-1.40881235e-12 * tc[4];
} else {
// species 0: NO
species[0] =
+2.24543500e+00
+1.26913800e-03 * tc[1]
-5.01589000e-07 * tc[2]
+9.16928300e-11 * tc[3]
-6.27541900e-15 * tc[4];
// species 1: N2O
species[1] =
+3.71897700e+00
+2.87371400e-03 * tc[1]
-1.19749600e-06 * tc[2]
+2.25055200e-10 * tc[3]
-1.57533700e-14 * tc[4];
// species 2: O2
species[2] =
+2.66096065e+00
+6.56365811e-04 * tc[1]
-1.41149627e-07 * tc[2]
+2.05797935e-11 * tc[3]
-1.29913436e-15 * tc[4];
// species 3: H2
species[3] =
+1.93286575e+00
+8.26608026e-04 * tc[1]
-1.46402364e-07 * tc[2]
+1.54100414e-11 * tc[3]
-6.88804800e-16 * tc[4];
// species 4: AR
species[4] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 5: H
species[5] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 6: O
species[6] =
+1.54363697e+00
-2.73162486e-05 * tc[1]
-4.19029520e-09 * tc[2]
+4.95481845e-12 * tc[3]
-4.79553694e-16 * tc[4];
// species 7: OH
species[7] =
+1.83853033e+00
+1.10741289e-03 * tc[1]
-2.94000209e-07 * tc[2]
+4.20698729e-11 * tc[3]
-2.42289890e-15 * tc[4];
// species 8: HO2
species[8] =
+3.17228741e+00
+1.88117627e-03 * tc[1]
-3.46277286e-07 * tc[2]
+1.94657549e-11 * tc[3]
+1.76256905e-16 * tc[4];
// species 9: H2O
species[9] =
+1.67703890e+00
+2.97318160e-03 * tc[1]
-7.73768890e-07 * tc[2]
+9.44335140e-11 * tc[3]
-4.26899910e-15 * tc[4];
// species 10: H2O2
species[10] =
+3.57977305e+00
+4.05326003e-03 * tc[1]
-1.29844730e-06 * tc[2]
+1.98211400e-10 * tc[3]
-1.13968792e-14 * tc[4];
// species 11: NO2
species[11] =
+3.68285900e+00
+2.46242900e-03 * tc[1]
-1.04225900e-06 * tc[2]
+1.97690200e-10 * tc[3]
-1.39171700e-14 * tc[4];
// species 12: NH3
species[12] =
+1.46190400e+00
+6.05916600e-03 * tc[1]
-2.00497700e-06 * tc[2]
+3.13600300e-10 * tc[3]
-1.93831700e-14 * tc[4];
// species 13: HNO
species[13] =
+2.61514400e+00
+3.21248600e-03 * tc[1]
-1.26033700e-06 * tc[2]
+2.26729800e-10 * tc[3]
-1.53623600e-14 * tc[4];
// species 14: N
species[14] =
+1.45026800e+00
+1.06614600e-04 * tc[1]
-7.46533700e-08 * tc[2]
+1.87965200e-11 * tc[3]
-1.02598400e-15 * tc[4];
// species 15: NNH
species[15] =
+3.41534200e+00
+1.61438800e-03 * tc[1]
-1.63289400e-07 * tc[2]
-8.55984600e-11 * tc[3]
+1.61479100e-14 * tc[4];
// species 16: NH2
species[16] =
+1.96131100e+00
+2.93269900e-03 * tc[1]
-9.06360000e-07 * tc[2]
+1.61725700e-10 * tc[3]
-1.20420000e-14 * tc[4];
// species 17: NH
species[17] =
+1.78369290e+00
+1.32984290e-03 * tc[1]
-4.24780470e-07 * tc[2]
+7.83485040e-11 * tc[3]
-5.50444700e-15 * tc[4];
// species 18: HE
species[18] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 19: N2
species[19] =
+1.95257637e+00
+1.39690040e-03 * tc[1]
-4.92631603e-07 * tc[2]
+7.86010195e-11 * tc[3]
-4.60755204e-15 * tc[4];
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 20: H2NO
species[20] =
+1.53059000e+00
+8.59603500e-03 * tc[1]
-5.47103000e-06 * tc[2]
+2.27624900e-09 * tc[3]
-4.64807300e-13 * tc[4];
} else {
// species 20: H2NO
species[20] =
+4.67334600e+00
+2.29883700e-03 * tc[1]
-1.77444600e-07 * tc[2]
-1.10348200e-10 * tc[3]
+1.85976200e-14 * tc[4];
}
return;
}

// compute Cp/R at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void cp_R(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+3.37654200e+00
+1.25306300e-03 * tc[1]
-3.30275100e-06 * tc[2]
+5.21781000e-09 * tc[3]
-2.44626300e-12 * tc[4];
// species 1: N2O
species[1] =
+2.54305800e+00
+9.49219300e-03 * tc[1]
-9.79277500e-06 * tc[2]
+6.26384500e-09 * tc[3]
-1.90182600e-12 * tc[4];
// species 2: O2
species[2] =
+3.78245636e+00
-2.99673416e-03 * tc[1]
+9.84730201e-06 * tc[2]
-9.68129509e-09 * tc[3]
+3.24372837e-12 * tc[4];
// species 3: H2
species[3] =
+2.34433112e+00
+7.98052075e-03 * tc[1]
-1.94781510e-05 * tc[2]
+2.01572094e-08 * tc[3]
-7.37611761e-12 * tc[4];
// species 4: AR
species[4] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 5: H
species[5] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 6: O
species[6] =
+3.16826710e+00
-3.27931884e-03 * tc[1]
+6.64306396e-06 * tc[2]
-6.12806624e-09 * tc[3]
+2.11265971e-12 * tc[4];
// species 7: OH
species[7] =
+3.99198424e+00
-2.40106655e-03 * tc[1]
+4.61664033e-06 * tc[2]
-3.87916306e-09 * tc[3]
+1.36319502e-12 * tc[4];
// species 8: HO2
species[8] =
+4.30179807e+00
-4.74912097e-03 * tc[1]
+2.11582905e-05 * tc[2]
-2.42763914e-08 * tc[3]
+9.29225225e-12 * tc[4];
// species 9: H2O
species[9] =
+4.19863520e+00
-2.03640170e-03 * tc[1]
+6.52034160e-06 * tc[2]
-5.48792690e-09 * tc[3]
+1.77196800e-12 * tc[4];
// species 10: H2O2
species[10] =
+4.31515149e+00
-8.47390622e-04 * tc[1]
+1.76404323e-05 * tc[2]
-2.26762944e-08 * tc[3]
+9.08950158e-12 * tc[4];
// species 11: NO2
species[11] =
+2.67060000e+00
+7.83850100e-03 * tc[1]
-8.06386500e-06 * tc[2]
+6.16171500e-09 * tc[3]
-2.32015000e-12 * tc[4];
// species 12: NH3
species[12] =
+2.20435200e+00
+1.01147600e-02 * tc[1]
-1.46526500e-05 * tc[2]
+1.44723500e-08 * tc[3]
-5.32850900e-12 * tc[4];
// species 13: HNO
species[13] =
+2.78440300e+00
+6.60964600e-03 * tc[1]
-9.30022300e-06 * tc[2]
+9.43798000e-09 * tc[3]
-3.75314600e-12 * tc[4];
// species 14: N
species[14] =
+2.50307100e+00
-2.18001800e-05 * tc[1]
+5.42052900e-08 * tc[2]
-5.64756000e-11 * tc[3]
+2.09990400e-14 * tc[4];
// species 15: NNH
species[15] =
+3.50134400e+00
+2.05358700e-03 * tc[1]
+7.17041000e-07 * tc[2]
+4.92134800e-10 * tc[3]
-9.67117000e-13 * tc[4];
// species 16: NH2
species[16] =
+3.43249300e+00
+3.29954000e-03 * tc[1]
-6.61360000e-06 * tc[2]
+8.59094700e-09 * tc[3]
-3.57204700e-12 * tc[4];
// species 17: NH
species[17] =
+3.49290840e+00
+3.11791970e-04 * tc[1]
-1.48904840e-06 * tc[2]
+2.48164420e-09 * tc[3]
-1.03569670e-12 * tc[4];
// species 18: HE
species[18] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 19: N2
species[19] =
+3.53100528e+00
-1.23660988e-04 * tc[1]
-5.02999433e-07 * tc[2]
+2.43530612e-09 * tc[3]
-1.40881235e-12 * tc[4];
} else {
// species 0: NO
species[0] =
+3.24543500e+00
+1.26913800e-03 * tc[1]
-5.01589000e-07 * tc[2]
+9.16928300e-11 * tc[3]
-6.27541900e-15 * tc[4];
// species 1: N2O
species[1] =
+4.71897700e+00
+2.87371400e-03 * tc[1]
-1.19749600e-06 * tc[2]
+2.25055200e-10 * tc[3]
-1.57533700e-14 * tc[4];
// species 2: O2
species[2] =
+3.66096065e+00
+6.56365811e-04 * tc[1]
-1.41149627e-07 * tc[2]
+2.05797935e-11 * tc[3]
-1.29913436e-15 * tc[4];
// species 3: H2
species[3] =
+2.93286575e+00
+8.26608026e-04 * tc[1]
-1.46402364e-07 * tc[2]
+1.54100414e-11 * tc[3]
-6.88804800e-16 * tc[4];
// species 4: AR
species[4] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 5: H
species[5] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 6: O
species[6] =
+2.54363697e+00
-2.73162486e-05 * tc[1]
-4.19029520e-09 * tc[2]
+4.95481845e-12 * tc[3]
-4.79553694e-16 * tc[4];
// species 7: OH
species[7] =
+2.83853033e+00
+1.10741289e-03 * tc[1]
-2.94000209e-07 * tc[2]
+4.20698729e-11 * tc[3]
-2.42289890e-15 * tc[4];
// species 8: HO2
species[8] =
+4.17228741e+00
+1.88117627e-03 * tc[1]
-3.46277286e-07 * tc[2]
+1.94657549e-11 * tc[3]
+1.76256905e-16 * tc[4];
// species 9: H2O
species[9] =
+2.67703890e+00
+2.97318160e-03 * tc[1]
-7.73768890e-07 * tc[2]
+9.44335140e-11 * tc[3]
-4.26899910e-15 * tc[4];
// species 10: H2O2
species[10] =
+4.57977305e+00
+4.05326003e-03 * tc[1]
-1.29844730e-06 * tc[2]
+1.98211400e-10 * tc[3]
-1.13968792e-14 * tc[4];
// species 11: NO2
species[11] =
+4.68285900e+00
+2.46242900e-03 * tc[1]
-1.04225900e-06 * tc[2]
+1.97690200e-10 * tc[3]
-1.39171700e-14 * tc[4];
// species 12: NH3
species[12] =
+2.46190400e+00
+6.05916600e-03 * tc[1]
-2.00497700e-06 * tc[2]
+3.13600300e-10 * tc[3]
-1.93831700e-14 * tc[4];
// species 13: HNO
species[13] =
+3.61514400e+00
+3.21248600e-03 * tc[1]
-1.26033700e-06 * tc[2]
+2.26729800e-10 * tc[3]
-1.53623600e-14 * tc[4];
// species 14: N
species[14] =
+2.45026800e+00
+1.06614600e-04 * tc[1]
-7.46533700e-08 * tc[2]
+1.87965200e-11 * tc[3]
-1.02598400e-15 * tc[4];
// species 15: NNH
species[15] =
+4.41534200e+00
+1.61438800e-03 * tc[1]
-1.63289400e-07 * tc[2]
-8.55984600e-11 * tc[3]
+1.61479100e-14 * tc[4];
// species 16: NH2
species[16] =
+2.96131100e+00
+2.93269900e-03 * tc[1]
-9.06360000e-07 * tc[2]
+1.61725700e-10 * tc[3]
-1.20420000e-14 * tc[4];
// species 17: NH
species[17] =
+2.78369290e+00
+1.32984290e-03 * tc[1]
-4.24780470e-07 * tc[2]
+7.83485040e-11 * tc[3]
-5.50444700e-15 * tc[4];
// species 18: HE
species[18] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 19: N2
species[19] =
+2.95257637e+00
+1.39690040e-03 * tc[1]
-4.92631603e-07 * tc[2]
+7.86010195e-11 * tc[3]
-4.60755204e-15 * tc[4];
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 20: H2NO
species[20] =
+2.53059000e+00
+8.59603500e-03 * tc[1]
-5.47103000e-06 * tc[2]
+2.27624900e-09 * tc[3]
-4.64807300e-13 * tc[4];
} else {
// species 20: H2NO
species[20] =
+5.67334600e+00
+2.29883700e-03 * tc[1]
-1.77444600e-07 * tc[2]
-1.10348200e-10 * tc[3]
+1.85976200e-14 * tc[4];
}
return;
}

// compute the g/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void gibbs(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];
const amrex::Real invT = 1 / T;

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+9.817960999999999e+03 * invT
-2.453047999999999e+00
-3.376542000000000e+00 * tc[0]
-6.265315000000000e-04 * tc[1]
+5.504585000000000e-07 * tc[2]
-4.348175000000000e-10 * tc[3]
+1.223131500000000e-13 * tc[4];
// species 1: N2O
species[1] =
+8.765100000000000e+03 * invT
-6.968164000000000e+00
-2.543058000000000e+00 * tc[0]
-4.746096500000000e-03 * tc[1]
+1.632129166666667e-06 * tc[2]
-5.219870833333333e-10 * tc[3]
+9.509129999999999e-14 * tc[4];
// species 2: O2
species[2] =
-1.063943560000000e+03 * invT
+1.247806300000001e-01
-3.782456360000000e+00 * tc[0]
+1.498367080000000e-03 * tc[1]
-1.641217001666667e-06 * tc[2]
+8.067745908333334e-10 * tc[3]
-1.621864185000000e-13 * tc[4];
// species 3: H2
species[3] =
-9.179351730000000e+02 * invT
+1.661320882000000e+00
-2.344331120000000e+00 * tc[0]
-3.990260375000000e-03 * tc[1]
+3.246358500000000e-06 * tc[2]
-1.679767450000000e-09 * tc[3]
+3.688058805000000e-13 * tc[4];
// species 4: AR
species[4] =
-7.453750000000000e+02 * invT
-1.879674910000000e+00
-2.500000000000000e+00 * tc[0]
-0.000000000000000e+00 * tc[1]
-0.000000000000000e+00 * tc[2]
-0.000000000000000e+00 * tc[3]
-0.000000000000000e+00 * tc[4];
// species 5: H
species[5] =
+2.547366000000000e+04 * invT
+2.946682850000000e+00
-2.500000000000000e+00 * tc[0]
-0.000000000000000e+00 * tc[1]
-0.000000000000000e+00 * tc[2]
-0.000000000000000e+00 * tc[3]
-0.000000000000000e+00 * tc[4];
// species 6: O
species[6] =
+2.912225920000000e+04 * invT
+1.116333640000000e+00
-3.168267100000000e+00 * tc[0]
+1.639659420000000e-03 * tc[1]
-1.107177326666667e-06 * tc[2]
+5.106721866666666e-10 * tc[3]
-1.056329855000000e-13 * tc[4];
// species 7: OH
species[7] =
+3.368898360000000e+03 * invT
+4.095982717000000e+00
-3.991984240000000e+00 * tc[0]
+1.200533275000000e-03 * tc[1]
-7.694400550000000e-07 * tc[2]
+3.232635883333333e-10 * tc[3]
-6.815975100000000e-14 * tc[4];
// species 8: HO2
species[8] =
+2.640184850000000e+02 * invT
+5.851358700000002e-01
-4.301798070000000e+00 * tc[0]
+2.374560485000000e-03 * tc[1]
-3.526381750000000e-06 * tc[2]
+2.023032616666667e-09 * tc[3]
-4.646126125000001e-13 * tc[4];
// species 9: H2O
species[9] =
-3.029372600000000e+04 * invT
+5.047644210000000e+00
-4.198635200000000e+00 * tc[0]
+1.018200850000000e-03 * tc[1]
-1.086723600000000e-06 * tc[2]
+4.573272416666666e-10 * tc[3]
-8.859840000000001e-14 * tc[4];
// species 10: H2O2
species[10] =
-1.770674370000000e+04 * invT
+1.041418300000000e+00
-4.315151490000000e+00 * tc[0]
+4.236953110000000e-04 * tc[1]
-2.940072050000000e-06 * tc[2]
+1.889691200000000e-09 * tc[3]
-4.544750790000000e-13 * tc[4];
// species 11: NO2
species[11] =
+2.896291000000000e+03 * invT
-8.941469999999999e+00
-2.670600000000000e+00 * tc[0]
-3.919250500000000e-03 * tc[1]
+1.343977500000000e-06 * tc[2]
-5.134762500000000e-10 * tc[3]
+1.160075000000000e-13 * tc[4];
// species 12: NH3
species[12] =
-6.525488000000000e+03 * invT
-5.922786000000000e+00
-2.204352000000000e+00 * tc[0]
-5.057380000000000e-03 * tc[1]
+2.442108333333333e-06 * tc[2]
-1.206029166666667e-09 * tc[3]
+2.664254500000000e-13 * tc[4];
// species 13: HNO
species[13] =
+1.091878000000000e+04 * invT
-6.251226000000000e+00
-2.784403000000000e+00 * tc[0]
-3.304823000000000e-03 * tc[1]
+1.550037166666667e-06 * tc[2]
-7.864983333333334e-10 * tc[3]
+1.876573000000000e-13 * tc[4];
// species 14: N
species[14] =
+5.609890000000000e+04 * invT
-1.664495000000000e+00
-2.503071000000000e+00 * tc[0]
+1.090009000000000e-05 * tc[1]
-9.034215000000001e-09 * tc[2]
+4.706300000000000e-12 * tc[3]
-1.049952000000000e-15 * tc[4];
// species 15: NNH
species[15] =
+2.833347000000000e+04 * invT
-2.890493000000000e+00
-3.501344000000000e+00 * tc[0]
-1.026793500000000e-03 * tc[1]
-1.195068333333333e-07 * tc[2]
-4.101123333333334e-11 * tc[3]
+4.835585000000000e-14 * tc[4];
// species 16: NH2
species[16] =
+2.177228000000000e+04 * invT
+3.423820000000002e-01
-3.432493000000000e+00 * tc[0]
-1.649770000000000e-03 * tc[1]
+1.102266666666667e-06 * tc[2]
-7.159122500000001e-10 * tc[3]
+1.786023500000000e-13 * tc[4];
// species 17: NH
species[17] =
+4.189429400000000e+04 * invT
+1.644580700000000e+00
-3.492908400000000e+00 * tc[0]
-1.558959850000000e-04 * tc[1]
+2.481747333333333e-07 * tc[2]
-2.068036833333333e-10 * tc[3]
+5.178483500000000e-14 * tc[4];
// species 18: HE
species[18] =
-7.453750000000000e+02 * invT
+1.571276026000000e+00
-2.500000000000000e+00 * tc[0]
-0.000000000000000e+00 * tc[1]
-0.000000000000000e+00 * tc[2]
-0.000000000000000e+00 * tc[3]
-0.000000000000000e+00 * tc[4];
// species 19: N2
species[19] =
-1.046976280000000e+03 * invT
+5.635349000000001e-01
-3.531005280000000e+00 * tc[0]
+6.183049400000000e-05 * tc[1]
+8.383323883333334e-08 * tc[2]
-2.029421766666667e-10 * tc[3]
+7.044061750000001e-14 * tc[4];
} else {
// species 0: NO
species[0] =
+9.800840000000000e+03 * invT
-3.171859000000000e+00
-3.245435000000000e+00 * tc[0]
-6.345690000000000e-04 * tc[1]
+8.359816666666666e-08 * tc[2]
-7.641069166666667e-12 * tc[3]
+3.137709500000000e-16 * tc[4];
// species 1: N2O
species[1] =
+8.165811000000000e+03 * invT
+6.376227000000000e+00
-4.718977000000000e+00 * tc[0]
-1.436857000000000e-03 * tc[1]
+1.995826666666667e-07 * tc[2]
-1.875460000000000e-11 * tc[3]
+7.876685000000001e-16 * tc[4];
// species 2: O2
species[2] =
-1.215977180000000e+03 * invT
+2.455978599999997e-01
-3.660960650000000e+00 * tc[0]
-3.281829055000000e-04 * tc[1]
+2.352493783333333e-08 * tc[2]
-1.714982791666666e-12 * tc[3]
+6.495671800000001e-17 * tc[4];
// species 3: H2
species[3] =
-8.130655810000000e+02 * invT
+3.957194400000000e+00
-2.932865750000000e+00 * tc[0]
-4.133040130000000e-04 * tc[1]
+2.440039400000000e-08 * tc[2]
-1.284170116666667e-12 * tc[3]
+3.444024000000000e-17 * tc[4];
// species 4: AR
species[4] =
-7.453750000000000e+02 * invT
-1.879674910000000e+00
-2.500000000000000e+00 * tc[0]
-0.000000000000000e+00 * tc[1]
-0.000000000000000e+00 * tc[2]
-0.000000000000000e+00 * tc[3]
-0.000000000000000e+00 * tc[4];
// species 5: H
species[5] =
+2.547366000000000e+04 * invT
+2.946682850000000e+00
-2.500000000000000e+00 * tc[0]
-0.000000000000000e+00 * tc[1]
-0.000000000000000e+00 * tc[2]
-0.000000000000000e+00 * tc[3]
-0.000000000000000e+00 * tc[4];
// species 6: O
species[6] =
+2.922601200000000e+04 * invT
-2.378657600000000e+00
-2.543636970000000e+00 * tc[0]
+1.365812430000000e-05 * tc[1]
+6.983825333333333e-10 * tc[2]
-4.129015375000000e-13 * tc[3]
+2.397768470000000e-17 * tc[4];
// species 7: OH
species[7] =
+3.697808080000000e+03 * invT
-3.006416189999999e+00
-2.838530330000000e+00 * tc[0]
-5.537064450000000e-04 * tc[1]
+4.900003483333333e-08 * tc[2]
-3.505822741666666e-12 * tc[3]
+1.211449450000000e-16 * tc[4];
// species 8: HO2
species[8] =
+3.102068390000000e+01 * invT
+1.214610690000000e+00
-4.172287410000000e+00 * tc[0]
-9.405881350000000e-04 * tc[1]
+5.771288100000000e-08 * tc[2]
-1.622146241666667e-12 * tc[3]
-8.812845250000000e-18 * tc[4];
// species 9: H2O
species[9] =
-2.988589400000000e+04 * invT
-4.205511100000001e+00
-2.677038900000000e+00 * tc[0]
-1.486590800000000e-03 * tc[1]
+1.289614816666667e-07 * tc[2]
-7.869459500000001e-12 * tc[3]
+2.134499550000000e-16 * tc[4];
// species 10: H2O2
species[10] =
-1.800717750000000e+04 * invT
+3.914802356000000e+00
-4.579773050000000e+00 * tc[0]
-2.026630015000000e-03 * tc[1]
+2.164078833333333e-07 * tc[2]
-1.651761666666667e-11 * tc[3]
+5.698439600000000e-16 * tc[4];
// species 11: NO2
species[11] =
+2.261292000000000e+03 * invT
+3.694260500000000e+00
-4.682859000000000e+00 * tc[0]
-1.231214500000000e-03 * tc[1]
+1.737098333333333e-07 * tc[2]
-1.647418333333333e-11 * tc[3]
+6.958585000000000e-16 * tc[4];
// species 12: NH3
species[12] =
-6.493270000000000e+03 * invT
-5.010192999999999e+00
-2.461904000000000e+00 * tc[0]
-3.029583000000000e-03 * tc[1]
+3.341628333333333e-07 * tc[2]
-2.613335833333333e-11 * tc[3]
+9.691585000000000e-16 * tc[4];
// species 13: HNO
species[13] =
+1.066191000000000e+04 * invT
-1.195120000000000e+00
-3.615144000000000e+00 * tc[0]
-1.606243000000000e-03 * tc[1]
+2.100561666666667e-07 * tc[2]
-1.889415000000000e-11 * tc[3]
+7.681180000000001e-16 * tc[4];
// species 14: N
species[14] =
+5.611604000000000e+04 * invT
-1.998490000000000e+00
-2.450268000000000e+00 * tc[0]
-5.330730000000000e-05 * tc[1]
+1.244222833333333e-08 * tc[2]
-1.566376666666667e-12 * tc[3]
+5.129920000000000e-17 * tc[4];
// species 15: NNH
species[15] =
+2.788029000000000e+04 * invT
+3.511053200000000e+00
-4.415342000000000e+00 * tc[0]
-8.071940000000000e-04 * tc[1]
+2.721490000000000e-08 * tc[2]
+7.133205000000000e-12 * tc[3]
-8.073955000000000e-16 * tc[4];
// species 16: NH2
species[16] =
+2.191977000000000e+04 * invT
-2.816567000000000e+00
-2.961311000000000e+00 * tc[0]
-1.466349500000000e-03 * tc[1]
+1.510600000000000e-07 * tc[2]
-1.347714166666667e-11 * tc[3]
+6.021000000000000e-16 * tc[4];
// species 17: NH
species[17] =
+4.213451400000000e+04 * invT
-2.957086900000000e+00
-2.783692900000000e+00 * tc[0]
-6.649214500000000e-04 * tc[1]
+7.079674500000000e-08 * tc[2]
-6.529041999999999e-12 * tc[3]
+2.752223500000000e-16 * tc[4];
// species 18: HE
species[18] =
-7.453750000000000e+02 * invT
+1.571276026000000e+00
-2.500000000000000e+00 * tc[0]
-0.000000000000000e+00 * tc[1]
-0.000000000000000e+00 * tc[2]
-0.000000000000000e+00 * tc[3]
-0.000000000000000e+00 * tc[4];
// species 19: N2
species[19] =
-9.239486879999999e+02 * invT
-2.919311250000000e+00
-2.952576370000000e+00 * tc[0]
-6.984502000000001e-04 * tc[1]
+8.210526716666667e-08 * tc[2]
-6.550084958333333e-12 * tc[3]
+2.303776020000000e-16 * tc[4];
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 20: H2NO
species[20] =
+6.868030000000000e+03 * invT
-8.735920000000000e+00
-2.530590000000000e+00 * tc[0]
-4.298017500000000e-03 * tc[1]
+9.118383333333333e-07 * tc[2]
-1.896874166666667e-10 * tc[3]
+2.324036500000000e-14 * tc[4];
} else {
// species 20: H2NO
species[20] =
+5.569325000000000e+03 * invT
+1.182688600000000e+01
-5.673346000000000e+00 * tc[0]
-1.149418500000000e-03 * tc[1]
+2.957410000000000e-08 * tc[2]
+9.195683333333332e-12 * tc[3]
-9.298810000000001e-16 * tc[4];
}
return;
}

// compute the a/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void helmholtz(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];
const amrex::Real invT = 1 / T;

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+9.81796100e+03 * invT
-3.45304800e+00
-3.37654200e+00 * tc[0]
-6.26531500e-04 * tc[1]
+5.50458500e-07 * tc[2]
-4.34817500e-10 * tc[3]
+1.22313150e-13 * tc[4];
// species 1: N2O
species[1] =
+8.76510000e+03 * invT
-7.96816400e+00
-2.54305800e+00 * tc[0]
-4.74609650e-03 * tc[1]
+1.63212917e-06 * tc[2]
-5.21987083e-10 * tc[3]
+9.50913000e-14 * tc[4];
// species 2: O2
species[2] =
-1.06394356e+03 * invT
-8.75219370e-01
-3.78245636e+00 * tc[0]
+1.49836708e-03 * tc[1]
-1.64121700e-06 * tc[2]
+8.06774591e-10 * tc[3]
-1.62186418e-13 * tc[4];
// species 3: H2
species[3] =
-9.17935173e+02 * invT
+6.61320882e-01
-2.34433112e+00 * tc[0]
-3.99026037e-03 * tc[1]
+3.24635850e-06 * tc[2]
-1.67976745e-09 * tc[3]
+3.68805881e-13 * tc[4];
// species 4: AR
species[4] =
-7.45375000e+02 * invT
-2.87967491e+00
-2.50000000e+00 * tc[0]
-0.00000000e+00 * tc[1]
-0.00000000e+00 * tc[2]
-0.00000000e+00 * tc[3]
-0.00000000e+00 * tc[4];
// species 5: H
species[5] =
+2.54736600e+04 * invT
+1.94668285e+00
-2.50000000e+00 * tc[0]
-0.00000000e+00 * tc[1]
-0.00000000e+00 * tc[2]
-0.00000000e+00 * tc[3]
-0.00000000e+00 * tc[4];
// species 6: O
species[6] =
+2.91222592e+04 * invT
+1.16333640e-01
-3.16826710e+00 * tc[0]
+1.63965942e-03 * tc[1]
-1.10717733e-06 * tc[2]
+5.10672187e-10 * tc[3]
-1.05632985e-13 * tc[4];
// species 7: OH
species[7] =
+3.36889836e+03 * invT
+3.09598272e+00
-3.99198424e+00 * tc[0]
+1.20053327e-03 * tc[1]
-7.69440055e-07 * tc[2]
+3.23263588e-10 * tc[3]
-6.81597510e-14 * tc[4];
// species 8: HO2
species[8] =
+2.64018485e+02 * invT
-4.14864130e-01
-4.30179807e+00 * tc[0]
+2.37456049e-03 * tc[1]
-3.52638175e-06 * tc[2]
+2.02303262e-09 * tc[3]
-4.64612613e-13 * tc[4];
// species 9: H2O
species[9] =
-3.02937260e+04 * invT
+4.04764421e+00
-4.19863520e+00 * tc[0]
+1.01820085e-03 * tc[1]
-1.08672360e-06 * tc[2]
+4.57327242e-10 * tc[3]
-8.85984000e-14 * tc[4];
// species 10: H2O2
species[10] =
-1.77067437e+04 * invT
+4.14183000e-02
-4.31515149e+00 * tc[0]
+4.23695311e-04 * tc[1]
-2.94007205e-06 * tc[2]
+1.88969120e-09 * tc[3]
-4.54475079e-13 * tc[4];
// species 11: NO2
species[11] =
+2.89629100e+03 * invT
-9.94147000e+00
-2.67060000e+00 * tc[0]
-3.91925050e-03 * tc[1]
+1.34397750e-06 * tc[2]
-5.13476250e-10 * tc[3]
+1.16007500e-13 * tc[4];
// species 12: NH3
species[12] =
-6.52548800e+03 * invT
-6.92278600e+00
-2.20435200e+00 * tc[0]
-5.05738000e-03 * tc[1]
+2.44210833e-06 * tc[2]
-1.20602917e-09 * tc[3]
+2.66425450e-13 * tc[4];
// species 13: HNO
species[13] =
+1.09187800e+04 * invT
-7.25122600e+00
-2.78440300e+00 * tc[0]
-3.30482300e-03 * tc[1]
+1.55003717e-06 * tc[2]
-7.86498333e-10 * tc[3]
+1.87657300e-13 * tc[4];
// species 14: N
species[14] =
+5.60989000e+04 * invT
-2.66449500e+00
-2.50307100e+00 * tc[0]
+1.09000900e-05 * tc[1]
-9.03421500e-09 * tc[2]
+4.70630000e-12 * tc[3]
-1.04995200e-15 * tc[4];
// species 15: NNH
species[15] =
+2.83334700e+04 * invT
-3.89049300e+00
-3.50134400e+00 * tc[0]
-1.02679350e-03 * tc[1]
-1.19506833e-07 * tc[2]
-4.10112333e-11 * tc[3]
+4.83558500e-14 * tc[4];
// species 16: NH2
species[16] =
+2.17722800e+04 * invT
-6.57618000e-01
-3.43249300e+00 * tc[0]
-1.64977000e-03 * tc[1]
+1.10226667e-06 * tc[2]
-7.15912250e-10 * tc[3]
+1.78602350e-13 * tc[4];
// species 17: NH
species[17] =
+4.18942940e+04 * invT
+6.44580700e-01
-3.49290840e+00 * tc[0]
-1.55895985e-04 * tc[1]
+2.48174733e-07 * tc[2]
-2.06803683e-10 * tc[3]
+5.17848350e-14 * tc[4];
// species 18: HE
species[18] =
-7.45375000e+02 * invT
+5.71276026e-01
-2.50000000e+00 * tc[0]
-0.00000000e+00 * tc[1]
-0.00000000e+00 * tc[2]
-0.00000000e+00 * tc[3]
-0.00000000e+00 * tc[4];
// species 19: N2
species[19] =
-1.04697628e+03 * invT
-4.36465100e-01
-3.53100528e+00 * tc[0]
+6.18304940e-05 * tc[1]
+8.38332388e-08 * tc[2]
-2.02942177e-10 * tc[3]
+7.04406175e-14 * tc[4];
} else {
// species 0: NO
species[0] =
+9.80084000e+03 * invT
-4.17185900e+00
-3.24543500e+00 * tc[0]
-6.34569000e-04 * tc[1]
+8.35981667e-08 * tc[2]
-7.64106917e-12 * tc[3]
+3.13770950e-16 * tc[4];
// species 1: N2O
species[1] =
+8.16581100e+03 * invT
+5.37622700e+00
-4.71897700e+00 * tc[0]
-1.43685700e-03 * tc[1]
+1.99582667e-07 * tc[2]
-1.87546000e-11 * tc[3]
+7.87668500e-16 * tc[4];
// species 2: O2
species[2] =
-1.21597718e+03 * invT
-7.54402140e-01
-3.66096065e+00 * tc[0]
-3.28182906e-04 * tc[1]
+2.35249378e-08 * tc[2]
-1.71498279e-12 * tc[3]
+6.49567180e-17 * tc[4];
// species 3: H2
species[3] =
-8.13065581e+02 * invT
+2.95719440e+00
-2.93286575e+00 * tc[0]
-4.13304013e-04 * tc[1]
+2.44003940e-08 * tc[2]
-1.28417012e-12 * tc[3]
+3.44402400e-17 * tc[4];
// species 4: AR
species[4] =
-7.45375000e+02 * invT
-2.87967491e+00
-2.50000000e+00 * tc[0]
-0.00000000e+00 * tc[1]
-0.00000000e+00 * tc[2]
-0.00000000e+00 * tc[3]
-0.00000000e+00 * tc[4];
// species 5: H
species[5] =
+2.54736600e+04 * invT
+1.94668285e+00
-2.50000000e+00 * tc[0]
-0.00000000e+00 * tc[1]
-0.00000000e+00 * tc[2]
-0.00000000e+00 * tc[3]
-0.00000000e+00 * tc[4];
// species 6: O
species[6] =
+2.92260120e+04 * invT
-3.37865760e+00
-2.54363697e+00 * tc[0]
+1.36581243e-05 * tc[1]
+6.98382533e-10 * tc[2]
-4.12901538e-13 * tc[3]
+2.39776847e-17 * tc[4];
// species 7: OH
species[7] =
+3.69780808e+03 * invT
-4.00641619e+00
-2.83853033e+00 * tc[0]
-5.53706445e-04 * tc[1]
+4.90000348e-08 * tc[2]
-3.50582274e-12 * tc[3]
+1.21144945e-16 * tc[4];
// species 8: HO2
species[8] =
+3.10206839e+01 * invT
+2.14610690e-01
-4.17228741e+00 * tc[0]
-9.40588135e-04 * tc[1]
+5.77128810e-08 * tc[2]
-1.62214624e-12 * tc[3]
-8.81284525e-18 * tc[4];
// species 9: H2O
species[9] =
-2.98858940e+04 * invT
-5.20551110e+00
-2.67703890e+00 * tc[0]
-1.48659080e-03 * tc[1]
+1.28961482e-07 * tc[2]
-7.86945950e-12 * tc[3]
+2.13449955e-16 * tc[4];
// species 10: H2O2
species[10] =
-1.80071775e+04 * invT
+2.91480236e+00
-4.57977305e+00 * tc[0]
-2.02663002e-03 * tc[1]
+2.16407883e-07 * tc[2]
-1.65176167e-11 * tc[3]
+5.69843960e-16 * tc[4];
// species 11: NO2
species[11] =
+2.26129200e+03 * invT
+2.69426050e+00
-4.68285900e+00 * tc[0]
-1.23121450e-03 * tc[1]
+1.73709833e-07 * tc[2]
-1.64741833e-11 * tc[3]
+6.95858500e-16 * tc[4];
// species 12: NH3
species[12] =
-6.49327000e+03 * invT
-6.01019300e+00
-2.46190400e+00 * tc[0]
-3.02958300e-03 * tc[1]
+3.34162833e-07 * tc[2]
-2.61333583e-11 * tc[3]
+9.69158500e-16 * tc[4];
// species 13: HNO
species[13] =
+1.06619100e+04 * invT
-2.19512000e+00
-3.61514400e+00 * tc[0]
-1.60624300e-03 * tc[1]
+2.10056167e-07 * tc[2]
-1.88941500e-11 * tc[3]
+7.68118000e-16 * tc[4];
// species 14: N
species[14] =
+5.61160400e+04 * invT
-2.99849000e+00
-2.45026800e+00 * tc[0]
-5.33073000e-05 * tc[1]
+1.24422283e-08 * tc[2]
-1.56637667e-12 * tc[3]
+5.12992000e-17 * tc[4];
// species 15: NNH
species[15] =
+2.78802900e+04 * invT
+2.51105320e+00
-4.41534200e+00 * tc[0]
-8.07194000e-04 * tc[1]
+2.72149000e-08 * tc[2]
+7.13320500e-12 * tc[3]
-8.07395500e-16 * tc[4];
// species 16: NH2
species[16] =
+2.19197700e+04 * invT
-3.81656700e+00
-2.96131100e+00 * tc[0]
-1.46634950e-03 * tc[1]
+1.51060000e-07 * tc[2]
-1.34771417e-11 * tc[3]
+6.02100000e-16 * tc[4];
// species 17: NH
species[17] =
+4.21345140e+04 * invT
-3.95708690e+00
-2.78369290e+00 * tc[0]
-6.64921450e-04 * tc[1]
+7.07967450e-08 * tc[2]
-6.52904200e-12 * tc[3]
+2.75222350e-16 * tc[4];
// species 18: HE
species[18] =
-7.45375000e+02 * invT
+5.71276026e-01
-2.50000000e+00 * tc[0]
-0.00000000e+00 * tc[1]
-0.00000000e+00 * tc[2]
-0.00000000e+00 * tc[3]
-0.00000000e+00 * tc[4];
// species 19: N2
species[19] =
-9.23948688e+02 * invT
-3.91931125e+00
-2.95257637e+00 * tc[0]
-6.98450200e-04 * tc[1]
+8.21052672e-08 * tc[2]
-6.55008496e-12 * tc[3]
+2.30377602e-16 * tc[4];
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 20: H2NO
species[20] =
+6.86803000e+03 * invT
-9.73592000e+00
-2.53059000e+00 * tc[0]
-4.29801750e-03 * tc[1]
+9.11838333e-07 * tc[2]
-1.89687417e-10 * tc[3]
+2.32403650e-14 * tc[4];
} else {
// species 20: H2NO
species[20] =
+5.56932500e+03 * invT
+1.08268860e+01
-5.67334600e+00 * tc[0]
-1.14941850e-03 * tc[1]
+2.95741000e-08 * tc[2]
+9.19568333e-12 * tc[3]
-9.29881000e-16 * tc[4];
}
return;
}

// compute the e/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void speciesInternalEnergy(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];
const amrex::Real invT = 1 / T;

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+2.37654200e+00
+6.26531500e-04 * tc[1]
-1.10091700e-06 * tc[2]
+1.30445250e-09 * tc[3]
-4.89252600e-13 * tc[4]
+9.81796100e+03 * invT;
// species 1: N2O
species[1] =
+1.54305800e+00
+4.74609650e-03 * tc[1]
-3.26425833e-06 * tc[2]
+1.56596125e-09 * tc[3]
-3.80365200e-13 * tc[4]
+8.76510000e+03 * invT;
// species 2: O2
species[2] =
+2.78245636e+00
-1.49836708e-03 * tc[1]
+3.28243400e-06 * tc[2]
-2.42032377e-09 * tc[3]
+6.48745674e-13 * tc[4]
-1.06394356e+03 * invT;
// species 3: H2
species[3] =
+1.34433112e+00
+3.99026037e-03 * tc[1]
-6.49271700e-06 * tc[2]
+5.03930235e-09 * tc[3]
-1.47522352e-12 * tc[4]
-9.17935173e+02 * invT;
// species 4: AR
species[4] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
// species 5: H
species[5] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
+2.54736600e+04 * invT;
// species 6: O
species[6] =
+2.16826710e+00
-1.63965942e-03 * tc[1]
+2.21435465e-06 * tc[2]
-1.53201656e-09 * tc[3]
+4.22531942e-13 * tc[4]
+2.91222592e+04 * invT;
// species 7: OH
species[7] =
+2.99198424e+00
-1.20053327e-03 * tc[1]
+1.53888011e-06 * tc[2]
-9.69790765e-10 * tc[3]
+2.72639004e-13 * tc[4]
+3.36889836e+03 * invT;
// species 8: HO2
species[8] =
+3.30179807e+00
-2.37456049e-03 * tc[1]
+7.05276350e-06 * tc[2]
-6.06909785e-09 * tc[3]
+1.85845045e-12 * tc[4]
+2.64018485e+02 * invT;
// species 9: H2O
species[9] =
+3.19863520e+00
-1.01820085e-03 * tc[1]
+2.17344720e-06 * tc[2]
-1.37198172e-09 * tc[3]
+3.54393600e-13 * tc[4]
-3.02937260e+04 * invT;
// species 10: H2O2
species[10] =
+3.31515149e+00
-4.23695311e-04 * tc[1]
+5.88014410e-06 * tc[2]
-5.66907360e-09 * tc[3]
+1.81790032e-12 * tc[4]
-1.77067437e+04 * invT;
// species 11: NO2
species[11] =
+1.67060000e+00
+3.91925050e-03 * tc[1]
-2.68795500e-06 * tc[2]
+1.54042875e-09 * tc[3]
-4.64030000e-13 * tc[4]
+2.89629100e+03 * invT;
// species 12: NH3
species[12] =
+1.20435200e+00
+5.05738000e-03 * tc[1]
-4.88421667e-06 * tc[2]
+3.61808750e-09 * tc[3]
-1.06570180e-12 * tc[4]
-6.52548800e+03 * invT;
// species 13: HNO
species[13] =
+1.78440300e+00
+3.30482300e-03 * tc[1]
-3.10007433e-06 * tc[2]
+2.35949500e-09 * tc[3]
-7.50629200e-13 * tc[4]
+1.09187800e+04 * invT;
// species 14: N
species[14] =
+1.50307100e+00
-1.09000900e-05 * tc[1]
+1.80684300e-08 * tc[2]
-1.41189000e-11 * tc[3]
+4.19980800e-15 * tc[4]
+5.60989000e+04 * invT;
// species 15: NNH
species[15] =
+2.50134400e+00
+1.02679350e-03 * tc[1]
+2.39013667e-07 * tc[2]
+1.23033700e-10 * tc[3]
-1.93423400e-13 * tc[4]
+2.83334700e+04 * invT;
// species 16: NH2
species[16] =
+2.43249300e+00
+1.64977000e-03 * tc[1]
-2.20453333e-06 * tc[2]
+2.14773675e-09 * tc[3]
-7.14409400e-13 * tc[4]
+2.17722800e+04 * invT;
// species 17: NH
species[17] =
+2.49290840e+00
+1.55895985e-04 * tc[1]
-4.96349467e-07 * tc[2]
+6.20411050e-10 * tc[3]
-2.07139340e-13 * tc[4]
+4.18942940e+04 * invT;
// species 18: HE
species[18] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
// species 19: N2
species[19] =
+2.53100528e+00
-6.18304940e-05 * tc[1]
-1.67666478e-07 * tc[2]
+6.08826530e-10 * tc[3]
-2.81762470e-13 * tc[4]
-1.04697628e+03 * invT;
} else {
// species 0: NO
species[0] =
+2.24543500e+00
+6.34569000e-04 * tc[1]
-1.67196333e-07 * tc[2]
+2.29232075e-11 * tc[3]
-1.25508380e-15 * tc[4]
+9.80084000e+03 * invT;
// species 1: N2O
species[1] =
+3.71897700e+00
+1.43685700e-03 * tc[1]
-3.99165333e-07 * tc[2]
+5.62638000e-11 * tc[3]
-3.15067400e-15 * tc[4]
+8.16581100e+03 * invT;
// species 2: O2
species[2] =
+2.66096065e+00
+3.28182906e-04 * tc[1]
-4.70498757e-08 * tc[2]
+5.14494837e-12 * tc[3]
-2.59826872e-16 * tc[4]
-1.21597718e+03 * invT;
// species 3: H2
species[3] =
+1.93286575e+00
+4.13304013e-04 * tc[1]
-4.88007880e-08 * tc[2]
+3.85251035e-12 * tc[3]
-1.37760960e-16 * tc[4]
-8.13065581e+02 * invT;
// species 4: AR
species[4] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
// species 5: H
species[5] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
+2.54736600e+04 * invT;
// species 6: O
species[6] =
+1.54363697e+00
-1.36581243e-05 * tc[1]
-1.39676507e-09 * tc[2]
+1.23870461e-12 * tc[3]
-9.59107388e-17 * tc[4]
+2.92260120e+04 * invT;
// species 7: OH
species[7] =
+1.83853033e+00
+5.53706445e-04 * tc[1]
-9.80000697e-08 * tc[2]
+1.05174682e-11 * tc[3]
-4.84579780e-16 * tc[4]
+3.69780808e+03 * invT;
// species 8: HO2
species[8] =
+3.17228741e+00
+9.40588135e-04 * tc[1]
-1.15425762e-07 * tc[2]
+4.86643873e-12 * tc[3]
+3.52513810e-17 * tc[4]
+3.10206839e+01 * invT;
// species 9: H2O
species[9] =
+1.67703890e+00
+1.48659080e-03 * tc[1]
-2.57922963e-07 * tc[2]
+2.36083785e-11 * tc[3]
-8.53799820e-16 * tc[4]
-2.98858940e+04 * invT;
// species 10: H2O2
species[10] =
+3.57977305e+00
+2.02663002e-03 * tc[1]
-4.32815767e-07 * tc[2]
+4.95528500e-11 * tc[3]
-2.27937584e-15 * tc[4]
-1.80071775e+04 * invT;
// species 11: NO2
species[11] =
+3.68285900e+00
+1.23121450e-03 * tc[1]
-3.47419667e-07 * tc[2]
+4.94225500e-11 * tc[3]
-2.78343400e-15 * tc[4]
+2.26129200e+03 * invT;
// species 12: NH3
species[12] =
+1.46190400e+00
+3.02958300e-03 * tc[1]
-6.68325667e-07 * tc[2]
+7.84000750e-11 * tc[3]
-3.87663400e-15 * tc[4]
-6.49327000e+03 * invT;
// species 13: HNO
species[13] =
+2.61514400e+00
+1.60624300e-03 * tc[1]
-4.20112333e-07 * tc[2]
+5.66824500e-11 * tc[3]
-3.07247200e-15 * tc[4]
+1.06619100e+04 * invT;
// species 14: N
species[14] =
+1.45026800e+00
+5.33073000e-05 * tc[1]
-2.48844567e-08 * tc[2]
+4.69913000e-12 * tc[3]
-2.05196800e-16 * tc[4]
+5.61160400e+04 * invT;
// species 15: NNH
species[15] =
+3.41534200e+00
+8.07194000e-04 * tc[1]
-5.44298000e-08 * tc[2]
-2.13996150e-11 * tc[3]
+3.22958200e-15 * tc[4]
+2.78802900e+04 * invT;
// species 16: NH2
species[16] =
+1.96131100e+00
+1.46634950e-03 * tc[1]
-3.02120000e-07 * tc[2]
+4.04314250e-11 * tc[3]
-2.40840000e-15 * tc[4]
+2.19197700e+04 * invT;
// species 17: NH
species[17] =
+1.78369290e+00
+6.64921450e-04 * tc[1]
-1.41593490e-07 * tc[2]
+1.95871260e-11 * tc[3]
-1.10088940e-15 * tc[4]
+4.21345140e+04 * invT;
// species 18: HE
species[18] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
// species 19: N2
species[19] =
+1.95257637e+00
+6.98450200e-04 * tc[1]
-1.64210534e-07 * tc[2]
+1.96502549e-11 * tc[3]
-9.21510408e-16 * tc[4]
-9.23948688e+02 * invT;
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 20: H2NO
species[20] =
+1.53059000e+00
+4.29801750e-03 * tc[1]
-1.82367667e-06 * tc[2]
+5.69062250e-10 * tc[3]
-9.29614600e-14 * tc[4]
+6.86803000e+03 * invT;
} else {
// species 20: H2NO
species[20] =
+4.67334600e+00
+1.14941850e-03 * tc[1]
-5.91482000e-08 * tc[2]
-2.75870500e-11 * tc[3]
+3.71952400e-15 * tc[4]
+5.56932500e+03 * invT;
}
return;
}

// compute the h/(RT) at the given temperature (Eq 20)
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void speciesEnthalpy(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];
const amrex::Real invT = 1 / T;

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+3.37654200e+00
+6.26531500e-04 * tc[1]
-1.10091700e-06 * tc[2]
+1.30445250e-09 * tc[3]
-4.89252600e-13 * tc[4]
+9.81796100e+03 * invT;
// species 1: N2O
species[1] =
+2.54305800e+00
+4.74609650e-03 * tc[1]
-3.26425833e-06 * tc[2]
+1.56596125e-09 * tc[3]
-3.80365200e-13 * tc[4]
+8.76510000e+03 * invT;
// species 2: O2
species[2] =
+3.78245636e+00
-1.49836708e-03 * tc[1]
+3.28243400e-06 * tc[2]
-2.42032377e-09 * tc[3]
+6.48745674e-13 * tc[4]
-1.06394356e+03 * invT;
// species 3: H2
species[3] =
+2.34433112e+00
+3.99026037e-03 * tc[1]
-6.49271700e-06 * tc[2]
+5.03930235e-09 * tc[3]
-1.47522352e-12 * tc[4]
-9.17935173e+02 * invT;
// species 4: AR
species[4] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
// species 5: H
species[5] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
+2.54736600e+04 * invT;
// species 6: O
species[6] =
+3.16826710e+00
-1.63965942e-03 * tc[1]
+2.21435465e-06 * tc[2]
-1.53201656e-09 * tc[3]
+4.22531942e-13 * tc[4]
+2.91222592e+04 * invT;
// species 7: OH
species[7] =
+3.99198424e+00
-1.20053327e-03 * tc[1]
+1.53888011e-06 * tc[2]
-9.69790765e-10 * tc[3]
+2.72639004e-13 * tc[4]
+3.36889836e+03 * invT;
// species 8: HO2
species[8] =
+4.30179807e+00
-2.37456049e-03 * tc[1]
+7.05276350e-06 * tc[2]
-6.06909785e-09 * tc[3]
+1.85845045e-12 * tc[4]
+2.64018485e+02 * invT;
// species 9: H2O
species[9] =
+4.19863520e+00
-1.01820085e-03 * tc[1]
+2.17344720e-06 * tc[2]
-1.37198172e-09 * tc[3]
+3.54393600e-13 * tc[4]
-3.02937260e+04 * invT;
// species 10: H2O2
species[10] =
+4.31515149e+00
-4.23695311e-04 * tc[1]
+5.88014410e-06 * tc[2]
-5.66907360e-09 * tc[3]
+1.81790032e-12 * tc[4]
-1.77067437e+04 * invT;
// species 11: NO2
species[11] =
+2.67060000e+00
+3.91925050e-03 * tc[1]
-2.68795500e-06 * tc[2]
+1.54042875e-09 * tc[3]
-4.64030000e-13 * tc[4]
+2.89629100e+03 * invT;
// species 12: NH3
species[12] =
+2.20435200e+00
+5.05738000e-03 * tc[1]
-4.88421667e-06 * tc[2]
+3.61808750e-09 * tc[3]
-1.06570180e-12 * tc[4]
-6.52548800e+03 * invT;
// species 13: HNO
species[13] =
+2.78440300e+00
+3.30482300e-03 * tc[1]
-3.10007433e-06 * tc[2]
+2.35949500e-09 * tc[3]
-7.50629200e-13 * tc[4]
+1.09187800e+04 * invT;
// species 14: N
species[14] =
+2.50307100e+00
-1.09000900e-05 * tc[1]
+1.80684300e-08 * tc[2]
-1.41189000e-11 * tc[3]
+4.19980800e-15 * tc[4]
+5.60989000e+04 * invT;
// species 15: NNH
species[15] =
+3.50134400e+00
+1.02679350e-03 * tc[1]
+2.39013667e-07 * tc[2]
+1.23033700e-10 * tc[3]
-1.93423400e-13 * tc[4]
+2.83334700e+04 * invT;
// species 16: NH2
species[16] =
+3.43249300e+00
+1.64977000e-03 * tc[1]
-2.20453333e-06 * tc[2]
+2.14773675e-09 * tc[3]
-7.14409400e-13 * tc[4]
+2.17722800e+04 * invT;
// species 17: NH
species[17] =
+3.49290840e+00
+1.55895985e-04 * tc[1]
-4.96349467e-07 * tc[2]
+6.20411050e-10 * tc[3]
-2.07139340e-13 * tc[4]
+4.18942940e+04 * invT;
// species 18: HE
species[18] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
// species 19: N2
species[19] =
+3.53100528e+00
-6.18304940e-05 * tc[1]
-1.67666478e-07 * tc[2]
+6.08826530e-10 * tc[3]
-2.81762470e-13 * tc[4]
-1.04697628e+03 * invT;
} else {
// species 0: NO
species[0] =
+3.24543500e+00
+6.34569000e-04 * tc[1]
-1.67196333e-07 * tc[2]
+2.29232075e-11 * tc[3]
-1.25508380e-15 * tc[4]
+9.80084000e+03 * invT;
// species 1: N2O
species[1] =
+4.71897700e+00
+1.43685700e-03 * tc[1]
-3.99165333e-07 * tc[2]
+5.62638000e-11 * tc[3]
-3.15067400e-15 * tc[4]
+8.16581100e+03 * invT;
// species 2: O2
species[2] =
+3.66096065e+00
+3.28182906e-04 * tc[1]
-4.70498757e-08 * tc[2]
+5.14494837e-12 * tc[3]
-2.59826872e-16 * tc[4]
-1.21597718e+03 * invT;
// species 3: H2
species[3] =
+2.93286575e+00
+4.13304013e-04 * tc[1]
-4.88007880e-08 * tc[2]
+3.85251035e-12 * tc[3]
-1.37760960e-16 * tc[4]
-8.13065581e+02 * invT;
// species 4: AR
species[4] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
// species 5: H
species[5] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
+2.54736600e+04 * invT;
// species 6: O
species[6] =
+2.54363697e+00
-1.36581243e-05 * tc[1]
-1.39676507e-09 * tc[2]
+1.23870461e-12 * tc[3]
-9.59107388e-17 * tc[4]
+2.92260120e+04 * invT;
// species 7: OH
species[7] =
+2.83853033e+00
+5.53706445e-04 * tc[1]
-9.80000697e-08 * tc[2]
+1.05174682e-11 * tc[3]
-4.84579780e-16 * tc[4]
+3.69780808e+03 * invT;
// species 8: HO2
species[8] =
+4.17228741e+00
+9.40588135e-04 * tc[1]
-1.15425762e-07 * tc[2]
+4.86643873e-12 * tc[3]
+3.52513810e-17 * tc[4]
+3.10206839e+01 * invT;
// species 9: H2O
species[9] =
+2.67703890e+00
+1.48659080e-03 * tc[1]
-2.57922963e-07 * tc[2]
+2.36083785e-11 * tc[3]
-8.53799820e-16 * tc[4]
-2.98858940e+04 * invT;
// species 10: H2O2
species[10] =
+4.57977305e+00
+2.02663002e-03 * tc[1]
-4.32815767e-07 * tc[2]
+4.95528500e-11 * tc[3]
-2.27937584e-15 * tc[4]
-1.80071775e+04 * invT;
// species 11: NO2
species[11] =
+4.68285900e+00
+1.23121450e-03 * tc[1]
-3.47419667e-07 * tc[2]
+4.94225500e-11 * tc[3]
-2.78343400e-15 * tc[4]
+2.26129200e+03 * invT;
// species 12: NH3
species[12] =
+2.46190400e+00
+3.02958300e-03 * tc[1]
-6.68325667e-07 * tc[2]
+7.84000750e-11 * tc[3]
-3.87663400e-15 * tc[4]
-6.49327000e+03 * invT;
// species 13: HNO
species[13] =
+3.61514400e+00
+1.60624300e-03 * tc[1]
-4.20112333e-07 * tc[2]
+5.66824500e-11 * tc[3]
-3.07247200e-15 * tc[4]
+1.06619100e+04 * invT;
// species 14: N
species[14] =
+2.45026800e+00
+5.33073000e-05 * tc[1]
-2.48844567e-08 * tc[2]
+4.69913000e-12 * tc[3]
-2.05196800e-16 * tc[4]
+5.61160400e+04 * invT;
// species 15: NNH
species[15] =
+4.41534200e+00
+8.07194000e-04 * tc[1]
-5.44298000e-08 * tc[2]
-2.13996150e-11 * tc[3]
+3.22958200e-15 * tc[4]
+2.78802900e+04 * invT;
// species 16: NH2
species[16] =
+2.96131100e+00
+1.46634950e-03 * tc[1]
-3.02120000e-07 * tc[2]
+4.04314250e-11 * tc[3]
-2.40840000e-15 * tc[4]
+2.19197700e+04 * invT;
// species 17: NH
species[17] =
+2.78369290e+00
+6.64921450e-04 * tc[1]
-1.41593490e-07 * tc[2]
+1.95871260e-11 * tc[3]
-1.10088940e-15 * tc[4]
+4.21345140e+04 * invT;
// species 18: HE
species[18] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
// species 19: N2
species[19] =
+2.95257637e+00
+6.98450200e-04 * tc[1]
-1.64210534e-07 * tc[2]
+1.96502549e-11 * tc[3]
-9.21510408e-16 * tc[4]
-9.23948688e+02 * invT;
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 20: H2NO
species[20] =
+2.53059000e+00
+4.29801750e-03 * tc[1]
-1.82367667e-06 * tc[2]
+5.69062250e-10 * tc[3]
-9.29614600e-14 * tc[4]
+6.86803000e+03 * invT;
} else {
// species 20: H2NO
species[20] =
+5.67334600e+00
+1.14941850e-03 * tc[1]
-5.91482000e-08 * tc[2]
-2.75870500e-11 * tc[3]
+3.71952400e-15 * tc[4]
+5.56932500e+03 * invT;
}
return;
}

// compute the S/R at the given temperature (Eq 21)
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void speciesEntropy(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+3.37654200e+00 * tc[0]
+1.25306300e-03 * tc[1]
-1.65137550e-06 * tc[2]
+1.73927000e-09 * tc[3]
-6.11565750e-13 * tc[4]
+5.82959000e+00 ;
// species 1: N2O
species[1] =
+2.54305800e+00 * tc[0]
+9.49219300e-03 * tc[1]
-4.89638750e-06 * tc[2]
+2.08794833e-09 * tc[3]
-4.75456500e-13 * tc[4]
+9.51122200e+00 ;
// species 2: O2
species[2] =
+3.78245636e+00 * tc[0]
-2.99673416e-03 * tc[1]
+4.92365101e-06 * tc[2]
-3.22709836e-09 * tc[3]
+8.10932092e-13 * tc[4]
+3.65767573e+00 ;
// species 3: H2
species[3] =
+2.34433112e+00 * tc[0]
+7.98052075e-03 * tc[1]
-9.73907550e-06 * tc[2]
+6.71906980e-09 * tc[3]
-1.84402940e-12 * tc[4]
+6.83010238e-01 ;
// species 4: AR
species[4] =
+2.50000000e+00 * tc[0]
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
+4.37967491e+00 ;
// species 5: H
species[5] =
+2.50000000e+00 * tc[0]
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-4.46682850e-01 ;
// species 6: O
species[6] =
+3.16826710e+00 * tc[0]
-3.27931884e-03 * tc[1]
+3.32153198e-06 * tc[2]
-2.04268875e-09 * tc[3]
+5.28164927e-13 * tc[4]
+2.05193346e+00 ;
// species 7: OH
species[7] =
+3.99198424e+00 * tc[0]
-2.40106655e-03 * tc[1]
+2.30832017e-06 * tc[2]
-1.29305435e-09 * tc[3]
+3.40798755e-13 * tc[4]
-1.03998477e-01 ;
// species 8: HO2
species[8] =
+4.30179807e+00 * tc[0]
-4.74912097e-03 * tc[1]
+1.05791453e-05 * tc[2]
-8.09213047e-09 * tc[3]
+2.32306306e-12 * tc[4]
+3.71666220e+00 ;
// species 9: H2O
species[9] =
+4.19863520e+00 * tc[0]
-2.03640170e-03 * tc[1]
+3.26017080e-06 * tc[2]
-1.82930897e-09 * tc[3]
+4.42992000e-13 * tc[4]
-8.49009010e-01 ;
// species 10: H2O2
species[10] =
+4.31515149e+00 * tc[0]
-8.47390622e-04 * tc[1]
+8.82021615e-06 * tc[2]
-7.55876480e-09 * tc[3]
+2.27237539e-12 * tc[4]
+3.27373319e+00 ;
// species 11: NO2
species[11] =
+2.67060000e+00 * tc[0]
+7.83850100e-03 * tc[1]
-4.03193250e-06 * tc[2]
+2.05390500e-09 * tc[3]
-5.80037500e-13 * tc[4]
+1.16120700e+01 ;
// species 12: NH3
species[12] =
+2.20435200e+00 * tc[0]
+1.01147600e-02 * tc[1]
-7.32632500e-06 * tc[2]
+4.82411667e-09 * tc[3]
-1.33212725e-12 * tc[4]
+8.12713800e+00 ;
// species 13: HNO
species[13] =
+2.78440300e+00 * tc[0]
+6.60964600e-03 * tc[1]
-4.65011150e-06 * tc[2]
+3.14599333e-09 * tc[3]
-9.38286500e-13 * tc[4]
+9.03562900e+00 ;
// species 14: N
species[14] =
+2.50307100e+00 * tc[0]
-2.18001800e-05 * tc[1]
+2.71026450e-08 * tc[2]
-1.88252000e-11 * tc[3]
+5.24976000e-15 * tc[4]
+4.16756600e+00 ;
// species 15: NNH
species[15] =
+3.50134400e+00 * tc[0]
+2.05358700e-03 * tc[1]
+3.58520500e-07 * tc[2]
+1.64044933e-10 * tc[3]
-2.41779250e-13 * tc[4]
+6.39183700e+00 ;
// species 16: NH2
species[16] =
+3.43249300e+00 * tc[0]
+3.29954000e-03 * tc[1]
-3.30680000e-06 * tc[2]
+2.86364900e-09 * tc[3]
-8.93011750e-13 * tc[4]
+3.09011100e+00 ;
// species 17: NH
species[17] =
+3.49290840e+00 * tc[0]
+3.11791970e-04 * tc[1]
-7.44524200e-07 * tc[2]
+8.27214733e-10 * tc[3]
-2.58924175e-13 * tc[4]
+1.84832770e+00 ;
// species 18: HE
species[18] =
+2.50000000e+00 * tc[0]
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
+9.28723974e-01 ;
// species 19: N2
species[19] =
+3.53100528e+00 * tc[0]
-1.23660988e-04 * tc[1]
-2.51499717e-07 * tc[2]
+8.11768707e-10 * tc[3]
-3.52203088e-13 * tc[4]
+2.96747038e+00 ;
} else {
// species 0: NO
species[0] =
+3.24543500e+00 * tc[0]
+1.26913800e-03 * tc[1]
-2.50794500e-07 * tc[2]
+3.05642767e-11 * tc[3]
-1.56885475e-15 * tc[4]
+6.41729400e+00 ;
// species 1: N2O
species[1] =
+4.71897700e+00 * tc[0]
+2.87371400e-03 * tc[1]
-5.98748000e-07 * tc[2]
+7.50184000e-11 * tc[3]
-3.93834250e-15 * tc[4]
-1.65725000e+00 ;
// species 2: O2
species[2] =
+3.66096065e+00 * tc[0]
+6.56365811e-04 * tc[1]
-7.05748135e-08 * tc[2]
+6.85993117e-12 * tc[3]
-3.24783590e-16 * tc[4]
+3.41536279e+00 ;
// species 3: H2
species[3] =
+2.93286575e+00 * tc[0]
+8.26608026e-04 * tc[1]
-7.32011820e-08 * tc[2]
+5.13668047e-12 * tc[3]
-1.72201200e-16 * tc[4]
-1.02432865e+00 ;
// species 4: AR
species[4] =
+2.50000000e+00 * tc[0]
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
+4.37967491e+00 ;
// species 5: H
species[5] =
+2.50000000e+00 * tc[0]
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-4.46682850e-01 ;
// species 6: O
species[6] =
+2.54363697e+00 * tc[0]
-2.73162486e-05 * tc[1]
-2.09514760e-09 * tc[2]
+1.65160615e-12 * tc[3]
-1.19888423e-16 * tc[4]
+4.92229457e+00 ;
// species 7: OH
species[7] =
+2.83853033e+00 * tc[0]
+1.10741289e-03 * tc[1]
-1.47000104e-07 * tc[2]
+1.40232910e-11 * tc[3]
-6.05724725e-16 * tc[4]
+5.84494652e+00 ;
// species 8: HO2
species[8] =
+4.17228741e+00 * tc[0]
+1.88117627e-03 * tc[1]
-1.73138643e-07 * tc[2]
+6.48858497e-12 * tc[3]
+4.40642262e-17 * tc[4]
+2.95767672e+00 ;
// species 9: H2O
species[9] =
+2.67703890e+00 * tc[0]
+2.97318160e-03 * tc[1]
-3.86884445e-07 * tc[2]
+3.14778380e-11 * tc[3]
-1.06724977e-15 * tc[4]
+6.88255000e+00 ;
// species 10: H2O2
species[10] =
+4.57977305e+00 * tc[0]
+4.05326003e-03 * tc[1]
-6.49223650e-07 * tc[2]
+6.60704667e-11 * tc[3]
-2.84921980e-15 * tc[4]
+6.64970694e-01 ;
// species 11: NO2
species[11] =
+4.68285900e+00 * tc[0]
+2.46242900e-03 * tc[1]
-5.21129500e-07 * tc[2]
+6.58967333e-11 * tc[3]
-3.47929250e-15 * tc[4]
+9.88598500e-01 ;
// species 12: NH3
species[12] =
+2.46190400e+00 * tc[0]
+6.05916600e-03 * tc[1]
-1.00248850e-06 * tc[2]
+1.04533433e-10 * tc[3]
-4.84579250e-15 * tc[4]
+7.47209700e+00 ;
// species 13: HNO
species[13] =
+3.61514400e+00 * tc[0]
+3.21248600e-03 * tc[1]
-6.30168500e-07 * tc[2]
+7.55766000e-11 * tc[3]
-3.84059000e-15 * tc[4]
+4.81026400e+00 ;
// species 14: N
species[14] =
+2.45026800e+00 * tc[0]
+1.06614600e-04 * tc[1]
-3.73266850e-08 * tc[2]
+6.26550667e-12 * tc[3]
-2.56496000e-16 * tc[4]
+4.44875800e+00 ;
// species 15: NNH
species[15] =
+4.41534200e+00 * tc[0]
+1.61438800e-03 * tc[1]
-8.16447000e-08 * tc[2]
-2.85328200e-11 * tc[3]
+4.03697750e-15 * tc[4]
+9.04288800e-01 ;
// species 16: NH2
species[16] =
+2.96131100e+00 * tc[0]
+2.93269900e-03 * tc[1]
-4.53180000e-07 * tc[2]
+5.39085667e-11 * tc[3]
-3.01050000e-15 * tc[4]
+5.77787800e+00 ;
// species 17: NH
species[17] =
+2.78369290e+00 * tc[0]
+1.32984290e-03 * tc[1]
-2.12390235e-07 * tc[2]
+2.61161680e-11 * tc[3]
-1.37611175e-15 * tc[4]
+5.74077980e+00 ;
// species 18: HE
species[18] =
+2.50000000e+00 * tc[0]
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
+9.28723974e-01 ;
// species 19: N2
species[19] =
+2.95257637e+00 * tc[0]
+1.39690040e-03 * tc[1]
-2.46315802e-07 * tc[2]
+2.62003398e-11 * tc[3]
-1.15188801e-15 * tc[4]
+5.87188762e+00 ;
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 20: H2NO
species[20] =
+2.53059000e+00 * tc[0]
+8.59603500e-03 * tc[1]
-2.73551500e-06 * tc[2]
+7.58749667e-10 * tc[3]
-1.16201825e-13 * tc[4]
+1.12665100e+01 ;
} else {
// species 20: H2NO
species[20] =
+5.67334600e+00 * tc[0]
+2.29883700e-03 * tc[1]
-8.87223000e-08 * tc[2]
-3.67827333e-11 * tc[3]
+4.64940500e-15 * tc[4]
-6.15354000e+00 ;
}
return;
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCPBL(amrex::Real *  T, amrex::Real *  x,  amrex::Real *  cpbl)
{
int id; // loop counter
amrex::Real result = 0; 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real cpor[21]; //  temporary storage
cp_R(cpor, tc);

// perform dot product
for (id = 0; id < 21; ++id) {
result += x[id]*cpor[id];
}

*cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCPBS(amrex::Real *  T, amrex::Real *  y,  amrex::Real *  cpbs)
{
amrex::Real result = 0; 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real cpor[21], tresult[21]; //  temporary storage
amrex::Real imw[21];

get_imw(imw);

cp_R(cpor, tc);

for (int i = 0; i < 21; i++)
{
tresult[i] = cpor[i]*y[i]*imw[i];

}
for (int i = 0; i < 21; i++)
{
result += tresult[i];
}

*cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCVBL(amrex::Real *  T, amrex::Real *  x,  amrex::Real *  cvbl)
{
int id; // loop counter
amrex::Real result = 0; 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real cvor[21]; //  temporary storage
cv_R(cvor, tc);

// perform dot product
for (id = 0; id < 21; ++id) {
result += x[id]*cvor[id];
}

*cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCVBS(amrex::Real *  T, amrex::Real *  y,  amrex::Real *  cvbs)
{
amrex::Real result = 0; 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real cvor[21]; //  temporary storage
amrex::Real imw[21];

get_imw(imw);

cv_R(cvor, tc);

// multiply by y/molecularweight
result += cvor[0]*y[0]*imw[0]; // NO
result += cvor[1]*y[1]*imw[1]; // N2O
result += cvor[2]*y[2]*imw[2]; // O2
result += cvor[3]*y[3]*imw[3]; // H2
result += cvor[4]*y[4]*imw[4]; // AR
result += cvor[5]*y[5]*imw[5]; // H
result += cvor[6]*y[6]*imw[6]; // O
result += cvor[7]*y[7]*imw[7]; // OH
result += cvor[8]*y[8]*imw[8]; // HO2
result += cvor[9]*y[9]*imw[9]; // H2O
result += cvor[10]*y[10]*imw[10]; // H2O2
result += cvor[11]*y[11]*imw[11]; // NO2
result += cvor[12]*y[12]*imw[12]; // NH3
result += cvor[13]*y[13]*imw[13]; // HNO
result += cvor[14]*y[14]*imw[14]; // N
result += cvor[15]*y[15]*imw[15]; // NNH
result += cvor[16]*y[16]*imw[16]; // NH2
result += cvor[17]*y[17]*imw[17]; // NH
result += cvor[18]*y[18]*imw[18]; // HE
result += cvor[19]*y[19]*imw[19]; // N2
result += cvor[20]*y[20]*imw[20]; // H2NO

*cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKHBML(amrex::Real *  T, amrex::Real *  x,  amrex::Real *  hbml)
{
int id; // loop counter
amrex::Real result = 0; 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real hml[21]; //  temporary storage
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
speciesEnthalpy(hml, tc);

// perform dot product
for (id = 0; id < 21; ++id) {
result += x[id]*hml[id];
}

*hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKHBMS(amrex::Real *  T, amrex::Real *  y,  amrex::Real *  hbms)
{
amrex::Real result = 0;
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real hml[21], tmp[21]; //  temporary storage
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
amrex::Real imw[21];

get_imw(imw);

speciesEnthalpy(hml, tc);

int id;
for (id = 0; id < 21; ++id) {
tmp[id] = y[id]*hml[id]*imw[id];
}
for (id = 0; id < 21; ++id) {
result += tmp[id];
}

*hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKUBML(amrex::Real *  T, amrex::Real *  x,  amrex::Real *  ubml)
{
int id; // loop counter
amrex::Real result = 0; 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real uml[21]; //  temporary energy array
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
speciesInternalEnergy(uml, tc);

// perform dot product
for (id = 0; id < 21; ++id) {
result += x[id]*uml[id];
}

*ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKUBMS(amrex::Real *  T, amrex::Real *  y,  amrex::Real *  ubms)
{
amrex::Real result = 0;
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real ums[21]; //  temporary energy array
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
amrex::Real imw[21];

get_imw(imw);

speciesInternalEnergy(ums, tc);

// perform dot product + scaling by wt
result += y[0]*ums[0]*imw[0]; // NO
result += y[1]*ums[1]*imw[1]; // N2O
result += y[2]*ums[2]*imw[2]; // O2
result += y[3]*ums[3]*imw[3]; // H2
result += y[4]*ums[4]*imw[4]; // AR
result += y[5]*ums[5]*imw[5]; // H
result += y[6]*ums[6]*imw[6]; // O
result += y[7]*ums[7]*imw[7]; // OH
result += y[8]*ums[8]*imw[8]; // HO2
result += y[9]*ums[9]*imw[9]; // H2O
result += y[10]*ums[10]*imw[10]; // H2O2
result += y[11]*ums[11]*imw[11]; // NO2
result += y[12]*ums[12]*imw[12]; // NH3
result += y[13]*ums[13]*imw[13]; // HNO
result += y[14]*ums[14]*imw[14]; // N
result += y[15]*ums[15]*imw[15]; // NNH
result += y[16]*ums[16]*imw[16]; // NH2
result += y[17]*ums[17]*imw[17]; // NH
result += y[18]*ums[18]*imw[18]; // HE
result += y[19]*ums[19]*imw[19]; // N2
result += y[20]*ums[20]*imw[20]; // H2NO

*ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKSBML(amrex::Real *  P, amrex::Real *  T, amrex::Real *  x,  amrex::Real *  sbml)
{
int id; // loop counter
amrex::Real result = 0; 
// Log of normalized pressure in cgs units dynes/cm^2 by Patm
amrex::Real logPratio = log ( *P / 1013250.0 ); 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { log(tT), tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real sor[21]; //  temporary storage
speciesEntropy(sor, tc);

// Compute Eq 42
for (id = 0; id < 21; ++id) {
result += x[id]*(sor[id]-log((x[id]+1e-100))-logPratio);
}

*sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKSBMS(amrex::Real *  P, amrex::Real *  T, amrex::Real *  y,  amrex::Real *  sbms)
{
amrex::Real result = 0; 
// Log of normalized pressure in cgs units dynes/cm^2 by Patm
amrex::Real logPratio = log ( *P / 1013250.0 ); 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { log(tT), tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real sor[21]; //  temporary storage
amrex::Real x[21]; //  need a ytx conversion
amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual
amrex::Real imw[21];

get_imw(imw);

// Compute inverse of mean molecular wt first
YOW += y[0]*imw[0]; // NO
YOW += y[1]*imw[1]; // N2O
YOW += y[2]*imw[2]; // O2
YOW += y[3]*imw[3]; // H2
YOW += y[4]*imw[4]; // AR
YOW += y[5]*imw[5]; // H
YOW += y[6]*imw[6]; // O
YOW += y[7]*imw[7]; // OH
YOW += y[8]*imw[8]; // HO2
YOW += y[9]*imw[9]; // H2O
YOW += y[10]*imw[10]; // H2O2
YOW += y[11]*imw[11]; // NO2
YOW += y[12]*imw[12]; // NH3
YOW += y[13]*imw[13]; // HNO
YOW += y[14]*imw[14]; // N
YOW += y[15]*imw[15]; // NNH
YOW += y[16]*imw[16]; // NH2
YOW += y[17]*imw[17]; // NH
YOW += y[18]*imw[18]; // HE
YOW += y[19]*imw[19]; // N2
YOW += y[20]*imw[20]; // H2NO
// Now compute y to x conversion
x[0] = y[0]/(30.006000*YOW); 
x[1] = y[1]/(44.013000*YOW); 
x[2] = y[2]/(31.998000*YOW); 
x[3] = y[3]/(2.016000*YOW); 
x[4] = y[4]/(39.950000*YOW); 
x[5] = y[5]/(1.008000*YOW); 
x[6] = y[6]/(15.999000*YOW); 
x[7] = y[7]/(17.007000*YOW); 
x[8] = y[8]/(33.006000*YOW); 
x[9] = y[9]/(18.015000*YOW); 
x[10] = y[10]/(34.014000*YOW); 
x[11] = y[11]/(46.005000*YOW); 
x[12] = y[12]/(17.031000*YOW); 
x[13] = y[13]/(31.014000*YOW); 
x[14] = y[14]/(14.007000*YOW); 
x[15] = y[15]/(29.022000*YOW); 
x[16] = y[16]/(16.023000*YOW); 
x[17] = y[17]/(15.015000*YOW); 
x[18] = y[18]/(4.002602*YOW); 
x[19] = y[19]/(28.014000*YOW); 
x[20] = y[20]/(32.022000*YOW); 
speciesEntropy(sor, tc);
// Perform computation in Eq 42 and 43
result += x[0]*(sor[0]-log((x[0]+1e-100))-logPratio);
result += x[1]*(sor[1]-log((x[1]+1e-100))-logPratio);
result += x[2]*(sor[2]-log((x[2]+1e-100))-logPratio);
result += x[3]*(sor[3]-log((x[3]+1e-100))-logPratio);
result += x[4]*(sor[4]-log((x[4]+1e-100))-logPratio);
result += x[5]*(sor[5]-log((x[5]+1e-100))-logPratio);
result += x[6]*(sor[6]-log((x[6]+1e-100))-logPratio);
result += x[7]*(sor[7]-log((x[7]+1e-100))-logPratio);
result += x[8]*(sor[8]-log((x[8]+1e-100))-logPratio);
result += x[9]*(sor[9]-log((x[9]+1e-100))-logPratio);
result += x[10]*(sor[10]-log((x[10]+1e-100))-logPratio);
result += x[11]*(sor[11]-log((x[11]+1e-100))-logPratio);
result += x[12]*(sor[12]-log((x[12]+1e-100))-logPratio);
result += x[13]*(sor[13]-log((x[13]+1e-100))-logPratio);
result += x[14]*(sor[14]-log((x[14]+1e-100))-logPratio);
result += x[15]*(sor[15]-log((x[15]+1e-100))-logPratio);
result += x[16]*(sor[16]-log((x[16]+1e-100))-logPratio);
result += x[17]*(sor[17]-log((x[17]+1e-100))-logPratio);
result += x[18]*(sor[18]-log((x[18]+1e-100))-logPratio);
result += x[19]*(sor[19]-log((x[19]+1e-100))-logPratio);
result += x[20]*(sor[20]-log((x[20]+1e-100))-logPratio);
// Scale by R/W
*sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void GET_T_GIVEN_EY(amrex::Real *  e, amrex::Real *  y, amrex::Real *  t, int * ierr)
{
#ifdef CONVERGENCE
const int maxiter = 5000;
const amrex::Real tol  = 1.e-12;
#else
const int maxiter = 200;
const amrex::Real tol  = 1.e-6;
#endif
amrex::Real ein  = *e;
amrex::Real tmin = 90;// max lower bound for thermo def
amrex::Real tmax = 4000;// min upper bound for thermo def
amrex::Real e1,emin,emax,cv,t1,dt;
int i;//  loop counter
CKUBMS(&tmin, y, &emin);
CKUBMS(&tmax, y, &emax);
if (ein < emin) {
// Linear Extrapolation below tmin
CKCVBS(&tmin, y, &cv);
*t = tmin - (emin-ein)/cv;
*ierr = 1;
return;
}
if (ein > emax) {
// Linear Extrapolation above tmax
CKCVBS(&tmax, y, &cv);
*t = tmax - (emax-ein)/cv;
*ierr = 1;
return;
}
t1 = *t;
if (t1 < tmin || t1 > tmax) {
t1 = tmin + (tmax-tmin)/(emax-emin)*(ein-emin);
}
for (i = 0; i < maxiter; ++i) {
CKUBMS(&t1,y,&e1);
CKCVBS(&t1,y,&cv);
dt = (ein - e1) / cv;
if (dt > 100.) { dt = 100.; }
else if (dt < -100.) { dt = -100.; }
else if (fabs(dt) < tol) break;
else if (t1+dt == t1) break;
t1 += dt;
}
*t = t1;
*ierr = 0;
return;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void GET_T_GIVEN_HY(amrex::Real *  h, amrex::Real *  y, amrex::Real *  t, int * ierr)
{
#ifdef CONVERGENCE
const int maxiter = 5000;
const amrex::Real tol  = 1.e-12;
#else
const int maxiter = 200;
const amrex::Real tol  = 1.e-6;
#endif
amrex::Real hin  = *h;
amrex::Real tmin = 90;// max lower bound for thermo def
amrex::Real tmax = 4000;// min upper bound for thermo def
amrex::Real h1,hmin,hmax,cp,t1,dt;
int i;//  loop counter
CKHBMS(&tmin, y, &hmin);
CKHBMS(&tmax, y, &hmax);
if (hin < hmin) {
// Linear Extrapolation below tmin
CKCPBS(&tmin, y, &cp);
*t = tmin - (hmin-hin)/cp;
*ierr = 1;
return;
}
if (hin > hmax) {
// Linear Extrapolation above tmax
CKCPBS(&tmax, y, &cp);
*t = tmax - (hmax-hin)/cp;
*ierr = 1;
return;
}
t1 = *t;
if (t1 < tmin || t1 > tmax) {
t1 = tmin + (tmax-tmin)/(hmax-hmin)*(hin-hmin);
}
for (i = 0; i < maxiter; ++i) {
CKHBMS(&t1,y,&h1);
CKCPBS(&t1,y,&cp);
dt = (hin - h1) / cp;
if (dt > 100.) { dt = 100.; }
else if (dt < -100.) { dt = -100.; }
else if (fabs(dt) < tol) break;
else if (t1+dt == t1) break;
t1 += dt;
}
*t = t1;
*ierr = 0;
return;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKPX(amrex::Real *  rho, amrex::Real *  T, amrex::Real *  x, amrex::Real *  P)
{
amrex::Real XW = 0;//  To hold mean molecular wt
XW += x[0]*30.006000; // NO
XW += x[1]*44.013000; // N2O
XW += x[2]*31.998000; // O2
XW += x[3]*2.016000; // H2
XW += x[4]*39.950000; // AR
XW += x[5]*1.008000; // H
XW += x[6]*15.999000; // O
XW += x[7]*17.007000; // OH
XW += x[8]*33.006000; // HO2
XW += x[9]*18.015000; // H2O
XW += x[10]*34.014000; // H2O2
XW += x[11]*46.005000; // NO2
XW += x[12]*17.031000; // NH3
XW += x[13]*31.014000; // HNO
XW += x[14]*14.007000; // N
XW += x[15]*29.022000; // NNH
XW += x[16]*16.023000; // NH2
XW += x[17]*15.015000; // NH
XW += x[18]*4.002602; // HE
XW += x[19]*28.014000; // N2
XW += x[20]*32.022000; // H2NO
*P = *rho * 8.31446261815324e+07 * (*T) / XW; // P = rho*R*T/W

return;
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKPY(amrex::Real *  rho, amrex::Real *  T, amrex::Real *  y,  amrex::Real *  P)
{
amrex::Real YOW = 0;//  for computing mean MW
amrex::Real imw[21];

get_imw(imw);

YOW += y[0]*imw[0]; // NO
YOW += y[1]*imw[1]; // N2O
YOW += y[2]*imw[2]; // O2
YOW += y[3]*imw[3]; // H2
YOW += y[4]*imw[4]; // AR
YOW += y[5]*imw[5]; // H
YOW += y[6]*imw[6]; // O
YOW += y[7]*imw[7]; // OH
YOW += y[8]*imw[8]; // HO2
YOW += y[9]*imw[9]; // H2O
YOW += y[10]*imw[10]; // H2O2
YOW += y[11]*imw[11]; // NO2
YOW += y[12]*imw[12]; // NH3
YOW += y[13]*imw[13]; // HNO
YOW += y[14]*imw[14]; // N
YOW += y[15]*imw[15]; // NNH
YOW += y[16]*imw[16]; // NH2
YOW += y[17]*imw[17]; // NH
YOW += y[18]*imw[18]; // HE
YOW += y[19]*imw[19]; // N2
YOW += y[20]*imw[20]; // H2NO
*P = *rho * 8.31446261815324e+07 * (*T) * YOW; // P = rho*R*T/W

return;
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKPC(amrex::Real *  rho, amrex::Real *  T, amrex::Real *  c,  amrex::Real *  P)
{
int id; // loop counter
// See Eq 5 in CK Manual
amrex::Real W = 0;
amrex::Real sumC = 0;
W += c[0]*30.006000; // NO
W += c[1]*44.013000; // N2O
W += c[2]*31.998000; // O2
W += c[3]*2.016000; // H2
W += c[4]*39.950000; // AR
W += c[5]*1.008000; // H
W += c[6]*15.999000; // O
W += c[7]*17.007000; // OH
W += c[8]*33.006000; // HO2
W += c[9]*18.015000; // H2O
W += c[10]*34.014000; // H2O2
W += c[11]*46.005000; // NO2
W += c[12]*17.031000; // NH3
W += c[13]*31.014000; // HNO
W += c[14]*14.007000; // N
W += c[15]*29.022000; // NNH
W += c[16]*16.023000; // NH2
W += c[17]*15.015000; // NH
W += c[18]*4.002602; // HE
W += c[19]*28.014000; // N2
W += c[20]*32.022000; // H2NO

for (id = 0; id < 21; ++id) {
sumC += c[id];
}
*P = *rho * 8.31446261815324e+07 * (*T) * sumC / W; // P = rho*R*T/W

return;
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKRHOX(amrex::Real *  P, amrex::Real *  T, amrex::Real *  x,  amrex::Real *  rho)
{
amrex::Real XW = 0;//  To hold mean molecular wt
XW += x[0]*30.006000; // NO
XW += x[1]*44.013000; // N2O
XW += x[2]*31.998000; // O2
XW += x[3]*2.016000; // H2
XW += x[4]*39.950000; // AR
XW += x[5]*1.008000; // H
XW += x[6]*15.999000; // O
XW += x[7]*17.007000; // OH
XW += x[8]*33.006000; // HO2
XW += x[9]*18.015000; // H2O
XW += x[10]*34.014000; // H2O2
XW += x[11]*46.005000; // NO2
XW += x[12]*17.031000; // NH3
XW += x[13]*31.014000; // HNO
XW += x[14]*14.007000; // N
XW += x[15]*29.022000; // NNH
XW += x[16]*16.023000; // NH2
XW += x[17]*15.015000; // NH
XW += x[18]*4.002602; // HE
XW += x[19]*28.014000; // N2
XW += x[20]*32.022000; // H2NO
*rho = *P * XW / (8.31446261815324e+07 * (*T)); // rho = P*W/(R*T)

return;
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKRHOY(amrex::Real *  P, amrex::Real *  T, amrex::Real *  y,  amrex::Real *  rho)
{
amrex::Real YOW = 0;
amrex::Real tmp[21];
amrex::Real imw[21];

get_imw(imw);

for (int i = 0; i < 21; i++)
{
tmp[i] = y[i]*imw[i];
}
for (int i = 0; i < 21; i++)
{
YOW += tmp[i];
}

*rho = *P / (8.31446261815324e+07 * (*T) * YOW);// rho = P*W/(R*T)
return;
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKRHOC(amrex::Real *  P, amrex::Real *  T, amrex::Real *  c,  amrex::Real *  rho)
{
int id; // loop counter
// See Eq 5 in CK Manual
amrex::Real W = 0;
amrex::Real sumC = 0;
W += c[0]*30.006000; // NO
W += c[1]*44.013000; // N2O
W += c[2]*31.998000; // O2
W += c[3]*2.016000; // H2
W += c[4]*39.950000; // AR
W += c[5]*1.008000; // H
W += c[6]*15.999000; // O
W += c[7]*17.007000; // OH
W += c[8]*33.006000; // HO2
W += c[9]*18.015000; // H2O
W += c[10]*34.014000; // H2O2
W += c[11]*46.005000; // NO2
W += c[12]*17.031000; // NH3
W += c[13]*31.014000; // HNO
W += c[14]*14.007000; // N
W += c[15]*29.022000; // NNH
W += c[16]*16.023000; // NH2
W += c[17]*15.015000; // NH
W += c[18]*4.002602; // HE
W += c[19]*28.014000; // N2
W += c[20]*32.022000; // H2NO

for (id = 0; id < 21; ++id) {
sumC += c[id];
}
*rho = *P * W / (sumC * (*T) * 8.31446261815324e+07); // rho = PW/(R*T)

return;
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKWT( amrex::Real *  wt)
{
get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKMMWY(amrex::Real *  y,  amrex::Real *  wtm)
{
amrex::Real YOW = 0;
amrex::Real tmp[21];
amrex::Real imw[21];

get_imw(imw);

for (int i = 0; i < 21; i++)
{
tmp[i] = y[i]*imw[i];
}
for (int i = 0; i < 21; i++)
{
YOW += tmp[i];
}

*wtm = 1.0 / YOW;
return;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKMMWX(amrex::Real *  x,  amrex::Real *  wtm)
{
amrex::Real XW = 0;//  see Eq 4 in CK Manual
XW += x[0]*30.006000; // NO
XW += x[1]*44.013000; // N2O
XW += x[2]*31.998000; // O2
XW += x[3]*2.016000; // H2
XW += x[4]*39.950000; // AR
XW += x[5]*1.008000; // H
XW += x[6]*15.999000; // O
XW += x[7]*17.007000; // OH
XW += x[8]*33.006000; // HO2
XW += x[9]*18.015000; // H2O
XW += x[10]*34.014000; // H2O2
XW += x[11]*46.005000; // NO2
XW += x[12]*17.031000; // NH3
XW += x[13]*31.014000; // HNO
XW += x[14]*14.007000; // N
XW += x[15]*29.022000; // NNH
XW += x[16]*16.023000; // NH2
XW += x[17]*15.015000; // NH
XW += x[18]*4.002602; // HE
XW += x[19]*28.014000; // N2
XW += x[20]*32.022000; // H2NO
*wtm = XW;

return;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKMMWC(amrex::Real *  c,  amrex::Real *  wtm)
{
int id; // loop counter
// See Eq 5 in CK Manual
amrex::Real W = 0;
amrex::Real sumC = 0;
W += c[0]*30.006000; // NO
W += c[1]*44.013000; // N2O
W += c[2]*31.998000; // O2
W += c[3]*2.016000; // H2
W += c[4]*39.950000; // AR
W += c[5]*1.008000; // H
W += c[6]*15.999000; // O
W += c[7]*17.007000; // OH
W += c[8]*33.006000; // HO2
W += c[9]*18.015000; // H2O
W += c[10]*34.014000; // H2O2
W += c[11]*46.005000; // NO2
W += c[12]*17.031000; // NH3
W += c[13]*31.014000; // HNO
W += c[14]*14.007000; // N
W += c[15]*29.022000; // NNH
W += c[16]*16.023000; // NH2
W += c[17]*15.015000; // NH
W += c[18]*4.002602; // HE
W += c[19]*28.014000; // N2
W += c[20]*32.022000; // H2NO

for (id = 0; id < 21; ++id) {
sumC += c[id];
}
//  CK provides no guard against divison by zero
*wtm = W/sumC;

return;
}

// get Cp/R as a function of T 
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCPOR(amrex::Real *  T, amrex::Real *  cpor)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
cp_R(cpor, tc);
}

// get H/RT as a function of T 
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKHORT(amrex::Real *  T, amrex::Real *  hort)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
speciesEnthalpy(hort, tc);
}

// get S/R as a function of T 
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKSOR(amrex::Real *  T, amrex::Real *  sor)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { log(tT), tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
speciesEntropy(sor, tc);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKYTX(amrex::Real *  y,  amrex::Real *  x)
{
amrex::Real YOW = 0;
amrex::Real tmp[21];
amrex::Real imw[21];

get_imw(imw);

for (int i = 0; i < 21; i++)
{
tmp[i] = y[i]*imw[i];
}
for (int i = 0; i < 21; i++)
{
YOW += tmp[i];
}

amrex::Real YOWINV = 1.0/YOW;

for (int i = 0; i < 21; i++)
{
x[i] = y[i]*imw[i]*YOWINV;
}
return;
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKYTCP(amrex::Real *  P, amrex::Real *  T, amrex::Real *  y,  amrex::Real *  c)
{
amrex::Real YOW = 0;
amrex::Real PWORT;
amrex::Real imw[21];

get_imw(imw);

// Compute inverse of mean molecular wt first
for (int i = 0; i < 21; i++)
{
c[i] = y[i]*imw[i];
}
for (int i = 0; i < 21; i++)
{
YOW += c[i];
}

// PW/RT (see Eq. 7)
PWORT = (*P)/(YOW * 8.31446261815324e+07 * (*T)); 
// Now compute conversion

for (int i = 0; i < 21; i++)
{
c[i] = PWORT * y[i] * imw[i];
}
return;
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKYTCR(amrex::Real *  rho, amrex::Real * /*T*/, amrex::Real * y,  amrex::Real * c)
{
amrex::Real imw[21];

get_imw(imw);

for (int i = 0; i < 21; i++)
{
c[i] = (*rho)  * y[i] * imw[i];
}
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKXTY(amrex::Real *  x,  amrex::Real *  y)
{
amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
// Compute mean molecular wt first
XW += x[0]*30.006000; // NO
XW += x[1]*44.013000; // N2O
XW += x[2]*31.998000; // O2
XW += x[3]*2.016000; // H2
XW += x[4]*39.950000; // AR
XW += x[5]*1.008000; // H
XW += x[6]*15.999000; // O
XW += x[7]*17.007000; // OH
XW += x[8]*33.006000; // HO2
XW += x[9]*18.015000; // H2O
XW += x[10]*34.014000; // H2O2
XW += x[11]*46.005000; // NO2
XW += x[12]*17.031000; // NH3
XW += x[13]*31.014000; // HNO
XW += x[14]*14.007000; // N
XW += x[15]*29.022000; // NNH
XW += x[16]*16.023000; // NH2
XW += x[17]*15.015000; // NH
XW += x[18]*4.002602; // HE
XW += x[19]*28.014000; // N2
XW += x[20]*32.022000; // H2NO
// Now compute conversion
amrex::Real XWinv = 1.0/XW;
y[0] = x[0]*30.006000*XWinv; 
y[1] = x[1]*44.013000*XWinv; 
y[2] = x[2]*31.998000*XWinv; 
y[3] = x[3]*2.016000*XWinv; 
y[4] = x[4]*39.950000*XWinv; 
y[5] = x[5]*1.008000*XWinv; 
y[6] = x[6]*15.999000*XWinv; 
y[7] = x[7]*17.007000*XWinv; 
y[8] = x[8]*33.006000*XWinv; 
y[9] = x[9]*18.015000*XWinv; 
y[10] = x[10]*34.014000*XWinv; 
y[11] = x[11]*46.005000*XWinv; 
y[12] = x[12]*17.031000*XWinv; 
y[13] = x[13]*31.014000*XWinv; 
y[14] = x[14]*14.007000*XWinv; 
y[15] = x[15]*29.022000*XWinv; 
y[16] = x[16]*16.023000*XWinv; 
y[17] = x[17]*15.015000*XWinv; 
y[18] = x[18]*4.002602*XWinv; 
y[19] = x[19]*28.014000*XWinv; 
y[20] = x[20]*32.022000*XWinv; 

return;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKXTCP(amrex::Real *  P, amrex::Real *  T, amrex::Real *  x,  amrex::Real *  c)
{
int id; // loop counter
amrex::Real PORT = (*P)/(8.31446261815324e+07 * (*T)); // P/RT

// Compute conversion, see Eq 10
for (id = 0; id < 21; ++id) {
c[id] = x[id]*PORT;
}

return;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKXTCR(amrex::Real *  rho, amrex::Real * /*T*/, amrex::Real *  x, amrex::Real *  c)
{
int id; // loop counter
amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
amrex::Real ROW; 
// Compute mean molecular wt first
XW += x[0]*30.006000; // NO
XW += x[1]*44.013000; // N2O
XW += x[2]*31.998000; // O2
XW += x[3]*2.016000; // H2
XW += x[4]*39.950000; // AR
XW += x[5]*1.008000; // H
XW += x[6]*15.999000; // O
XW += x[7]*17.007000; // OH
XW += x[8]*33.006000; // HO2
XW += x[9]*18.015000; // H2O
XW += x[10]*34.014000; // H2O2
XW += x[11]*46.005000; // NO2
XW += x[12]*17.031000; // NH3
XW += x[13]*31.014000; // HNO
XW += x[14]*14.007000; // N
XW += x[15]*29.022000; // NNH
XW += x[16]*16.023000; // NH2
XW += x[17]*15.015000; // NH
XW += x[18]*4.002602; // HE
XW += x[19]*28.014000; // N2
XW += x[20]*32.022000; // H2NO
ROW = (*rho) / XW;

// Compute conversion, see Eq 11
for (id = 0; id < 21; ++id) {
c[id] = x[id]*ROW;
}

return;
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCTX(amrex::Real *  c, amrex::Real *  x)
{
int id; // loop counter
amrex::Real sumC = 0; 

// compute sum of c 
for (id = 0; id < 21; ++id) {
sumC += c[id];
}

//  See Eq 13 
amrex::Real sumCinv = 1.0/sumC;
for (id = 0; id < 21; ++id) {
x[id] = c[id]*sumCinv;
}

return;
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCTY(amrex::Real *  c, amrex::Real *  y)
{
amrex::Real CW = 0; // See Eq 12 in CK Manual
// compute denominator in eq 12 first
CW += c[0]*30.006000; // NO
CW += c[1]*44.013000; // N2O
CW += c[2]*31.998000; // O2
CW += c[3]*2.016000; // H2
CW += c[4]*39.950000; // AR
CW += c[5]*1.008000; // H
CW += c[6]*15.999000; // O
CW += c[7]*17.007000; // OH
CW += c[8]*33.006000; // HO2
CW += c[9]*18.015000; // H2O
CW += c[10]*34.014000; // H2O2
CW += c[11]*46.005000; // NO2
CW += c[12]*17.031000; // NH3
CW += c[13]*31.014000; // HNO
CW += c[14]*14.007000; // N
CW += c[15]*29.022000; // NNH
CW += c[16]*16.023000; // NH2
CW += c[17]*15.015000; // NH
CW += c[18]*4.002602; // HE
CW += c[19]*28.014000; // N2
CW += c[20]*32.022000; // H2NO
// Now compute conversion
amrex::Real CWinv = 1.0/CW;
y[0] = c[0]*30.006000*CWinv; 
y[1] = c[1]*44.013000*CWinv; 
y[2] = c[2]*31.998000*CWinv; 
y[3] = c[3]*2.016000*CWinv; 
y[4] = c[4]*39.950000*CWinv; 
y[5] = c[5]*1.008000*CWinv; 
y[6] = c[6]*15.999000*CWinv; 
y[7] = c[7]*17.007000*CWinv; 
y[8] = c[8]*33.006000*CWinv; 
y[9] = c[9]*18.015000*CWinv; 
y[10] = c[10]*34.014000*CWinv; 
y[11] = c[11]*46.005000*CWinv; 
y[12] = c[12]*17.031000*CWinv; 
y[13] = c[13]*31.014000*CWinv; 
y[14] = c[14]*14.007000*CWinv; 
y[15] = c[15]*29.022000*CWinv; 
y[16] = c[16]*16.023000*CWinv; 
y[17] = c[17]*15.015000*CWinv; 
y[18] = c[18]*4.002602*CWinv; 
y[19] = c[19]*28.014000*CWinv; 
y[20] = c[20]*32.022000*CWinv; 

return;
}

// get specific heat at constant volume as a function 
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCVML(amrex::Real *  T,  amrex::Real *  cvml)
{
int id; // loop counter
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
cv_R(cvml, tc);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
cvml[id] *= 8.31446261815324e+07;
}
}

// get specific heat at constant pressure as a 
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCPML(amrex::Real *  T,  amrex::Real *  cpml)
{
int id; // loop counter
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
cp_R(cpml, tc);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
cpml[id] *= 8.31446261815324e+07;
}
}

// get internal energy as a function 
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKUML(amrex::Real *  T,  amrex::Real *  uml)
{
int id; // loop counter
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
speciesInternalEnergy(uml, tc);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
uml[id] *= RT;
}
}

// get enthalpy as a function 
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKHML(amrex::Real *  T,  amrex::Real *  hml)
{
int id; // loop counter
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
speciesEnthalpy(hml, tc);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
hml[id] *= RT;
}
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKSML(amrex::Real *  T,  amrex::Real *  sml)
{
int id; // loop counter
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { log(tT), tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
speciesEntropy(sml, tc);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
sml[id] *= 8.31446261815324e+07;
}
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCVMS(amrex::Real *  T,  amrex::Real *  cvms)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
cv_R(cvms, tc);
// multiply by R/molecularweight
cvms[0] *= 2.770933352713870e+06; // NO
cvms[1] *= 1.889092454082485e+06; // N2O
cvms[2] *= 2.598431970171023e+06; // O2
cvms[3] *= 4.124237409798234e+07; // H2
cvms[4] *= 2.081217176008320e+06; // AR
cvms[5] *= 8.248474819596468e+07; // H
cvms[6] *= 5.196863940342046e+06; // O
cvms[7] *= 4.888847308845322e+06; // OH
cvms[8] *= 2.519076112874398e+06; // HO2
cvms[9] *= 4.615299815794193e+06; // H2O
cvms[10] *= 2.444423654422661e+06; // H2O2
cvms[11] *= 1.807295428356318e+06; // NO2
cvms[12] *= 4.881957969674852e+06; // NH3
cvms[13] *= 2.680873998243773e+06; // HNO
cvms[14] *= 5.935933903157878e+06; // N
cvms[15] *= 2.864882715923520e+06; // NNH
cvms[16] *= 5.189079834084279e+06; // NH2
cvms[17] *= 5.537437641127699e+06; // NH
cvms[18] *= 2.077264394049980e+07; // HE
cvms[19] *= 2.967966951578939e+06; // N2
cvms[20] *= 2.596484485089389e+06; // H2NO
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCPMS(amrex::Real *  T,  amrex::Real *  cpms)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
cp_R(cpms, tc);
// multiply by R/molecularweight
cpms[0] *= 2.770933352713870e+06; // NO
cpms[1] *= 1.889092454082485e+06; // N2O
cpms[2] *= 2.598431970171023e+06; // O2
cpms[3] *= 4.124237409798234e+07; // H2
cpms[4] *= 2.081217176008320e+06; // AR
cpms[5] *= 8.248474819596468e+07; // H
cpms[6] *= 5.196863940342046e+06; // O
cpms[7] *= 4.888847308845322e+06; // OH
cpms[8] *= 2.519076112874398e+06; // HO2
cpms[9] *= 4.615299815794193e+06; // H2O
cpms[10] *= 2.444423654422661e+06; // H2O2
cpms[11] *= 1.807295428356318e+06; // NO2
cpms[12] *= 4.881957969674852e+06; // NH3
cpms[13] *= 2.680873998243773e+06; // HNO
cpms[14] *= 5.935933903157878e+06; // N
cpms[15] *= 2.864882715923520e+06; // NNH
cpms[16] *= 5.189079834084279e+06; // NH2
cpms[17] *= 5.537437641127699e+06; // NH
cpms[18] *= 2.077264394049980e+07; // HE
cpms[19] *= 2.967966951578939e+06; // N2
cpms[20] *= 2.596484485089389e+06; // H2NO
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKUMS(amrex::Real *  T,  amrex::Real *  ums)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
amrex::Real imw[21];

get_imw(imw);

speciesInternalEnergy(ums, tc);

for (int i = 0; i < 21; i++)
{
ums[i] *= RT*imw[i];
}
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKHMS(amrex::Real *  T,  amrex::Real *  hms)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
amrex::Real imw[21];

get_imw(imw);

speciesEnthalpy(hms, tc);

for (int i = 0; i < 21; i++)
{
hms[i] *= RT*imw[i];
}
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKSMS(amrex::Real *  T,  amrex::Real *  sms)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { log(tT), tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
speciesEntropy(sms, tc);
// multiply by R/molecularweight
sms[0] *= 2.770933352713870e+06; // NO
sms[1] *= 1.889092454082485e+06; // N2O
sms[2] *= 2.598431970171023e+06; // O2
sms[3] *= 4.124237409798234e+07; // H2
sms[4] *= 2.081217176008320e+06; // AR
sms[5] *= 8.248474819596468e+07; // H
sms[6] *= 5.196863940342046e+06; // O
sms[7] *= 4.888847308845322e+06; // OH
sms[8] *= 2.519076112874398e+06; // HO2
sms[9] *= 4.615299815794193e+06; // H2O
sms[10] *= 2.444423654422661e+06; // H2O2
sms[11] *= 1.807295428356318e+06; // NO2
sms[12] *= 4.881957969674852e+06; // NH3
sms[13] *= 2.680873998243773e+06; // HNO
sms[14] *= 5.935933903157878e+06; // N
sms[15] *= 2.864882715923520e+06; // NNH
sms[16] *= 5.189079834084279e+06; // NH2
sms[17] *= 5.537437641127699e+06; // NH
sms[18] *= 2.077264394049980e+07; // HE
sms[19] *= 2.967966951578939e+06; // N2
sms[20] *= 2.596484485089389e+06; // H2NO
}

// GPU version of productionRate: no more use of thermo namespace vectors 
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void comp_qfqr(amrex::Real *  qf, amrex::Real * qr, amrex::Real * sc, amrex::Real * sc_qss, const amrex::Real * tc, amrex::Real invT)
{

// reaction 8: H + O2 (+M) <=> HO2 (+M)
qf[0] = sc[2]*sc[5];
qr[0] = sc[8];

// reaction 15: 2 OH (+M) <=> H2O2 (+M)
qf[1] = (sc[7] * sc[7]);
qr[1] = sc[10];

// reaction 41: NNH (+M) <=> H + N2 (+M)
qf[2] = sc[15];
qr[2] = sc[5]*sc[19];

// reaction 48: H + NO (+M) <=> HNO (+M)
qf[3] = sc[0]*sc[5];
qr[3] = sc[13];

// reaction 59: N2O (+M) <=> N2 + O (+M)
qf[4] = sc[1];
qr[4] = sc[6]*sc[19];

// reaction 4: 2 H + M <=> H2 + M
qf[5] = (sc[5] * sc[5]);
qr[5] = sc[3];

// reaction 5: H + OH + M <=> H2O + M
qf[6] = sc[5]*sc[7];
qr[6] = sc[9];

// reaction 6: 2 O + M <=> O2 + M
qf[7] = (sc[6] * sc[6]);
qr[7] = sc[2];

// reaction 7: H + O + M <=> OH + M
qf[8] = sc[5]*sc[6];
qr[8] = sc[7];

// reaction 23: NH3 + M <=> H + NH2 + M
qf[9] = sc[12];
qr[9] = sc[5]*sc[16];

// reaction 51: NO2 + M <=> NO + O + M
qf[10] = sc[11];
qr[10] = sc[0]*sc[6];

// reaction 0: H + O2 <=> O + OH
qf[11] = sc[2]*sc[5];
qr[11] = sc[6]*sc[7];

// reaction 1: H2 + O <=> H + OH
qf[12] = sc[3]*sc[6];
qr[12] = sc[5]*sc[7];

// reaction 2: H2 + OH <=> H + H2O
qf[13] = sc[3]*sc[7];
qr[13] = sc[5]*sc[9];

// reaction 3: H2O + O <=> 2 OH
qf[14] = sc[6]*sc[9];
qr[14] = (sc[7] * sc[7]);

// reaction 9: H + HO2 <=> 2 OH
qf[15] = sc[5]*sc[8];
qr[15] = (sc[7] * sc[7]);

// reaction 10: H + HO2 <=> H2 + O2
qf[16] = sc[5]*sc[8];
qr[16] = sc[2]*sc[3];

// reaction 11: H + HO2 <=> H2O + O
qf[17] = sc[5]*sc[8];
qr[17] = sc[6]*sc[9];

// reaction 12: HO2 + O <=> O2 + OH
qf[18] = sc[6]*sc[8];
qr[18] = sc[2]*sc[7];

// reaction 13: HO2 + OH <=> H2O + O2
qf[19] = sc[7]*sc[8];
qr[19] = sc[2]*sc[9];

// reaction 14: HO2 + OH <=> H2O + O2
qf[20] = sc[7]*sc[8];
qr[20] = sc[2]*sc[9];

// reaction 16: 2 HO2 <=> H2O2 + O2
qf[21] = (sc[8] * sc[8]);
qr[21] = sc[2]*sc[10];

// reaction 17: 2 HO2 <=> H2O2 + O2
qf[22] = (sc[8] * sc[8]);
qr[22] = sc[2]*sc[10];

// reaction 18: H + H2O2 <=> H2 + HO2
qf[23] = sc[5]*sc[10];
qr[23] = sc[3]*sc[8];

// reaction 19: H + H2O2 <=> H2O + OH
qf[24] = sc[5]*sc[10];
qr[24] = sc[7]*sc[9];

// reaction 20: H2O2 + OH <=> H2O + HO2
qf[25] = sc[7]*sc[10];
qr[25] = sc[8]*sc[9];

// reaction 21: H2O2 + OH <=> H2O + HO2
qf[26] = sc[7]*sc[10];
qr[26] = sc[8]*sc[9];

// reaction 22: H2O2 + O <=> HO2 + OH
qf[27] = sc[6]*sc[10];
qr[27] = sc[7]*sc[8];

// reaction 24: H + NH3 <=> H2 + NH2
qf[28] = sc[5]*sc[12];
qr[28] = sc[3]*sc[16];

// reaction 25: NH3 + O <=> NH2 + OH
qf[29] = sc[6]*sc[12];
qr[29] = sc[7]*sc[16];

// reaction 26: NH3 + OH <=> H2O + NH2
qf[30] = sc[7]*sc[12];
qr[30] = sc[9]*sc[16];

// reaction 27: H + NH2 <=> H2 + NH
qf[31] = sc[5]*sc[16];
qr[31] = sc[3]*sc[17];

// reaction 28: N + NH2 <=> 2 H + N2
qf[32] = sc[14]*sc[16];
qr[32] = (sc[5] * sc[5])*sc[19];

// reaction 29: NH2 + O <=> H + HNO
qf[33] = sc[6]*sc[16];
qr[33] = sc[5]*sc[13];

// reaction 30: NH2 + OH <=> H2O + NH
qf[34] = sc[7]*sc[16];
qr[34] = sc[9]*sc[17];

// reaction 31: NH2 + NO <=> H2O + N2
qf[35] = sc[0]*sc[16];
qr[35] = sc[9]*sc[19];

// reaction 32: NH2 + NO <=> NNH + OH
qf[36] = sc[0]*sc[16];
qr[36] = sc[7]*sc[15];

// reaction 33: NH2 + O2 <=> H2NO + O
qf[37] = sc[2]*sc[16];
qr[37] = sc[6]*sc[20];

// reaction 34: H + NH <=> H2 + N
qf[38] = sc[5]*sc[17];
qr[38] = sc[3]*sc[14];

// reaction 35: NH + O <=> H + NO
qf[39] = sc[6]*sc[17];
qr[39] = sc[0]*sc[5];

// reaction 36: NH + OH <=> H + HNO
qf[40] = sc[7]*sc[17];
qr[40] = sc[5]*sc[13];

// reaction 37: NH + OH <=> H2O + N
qf[41] = sc[7]*sc[17];
qr[41] = sc[9]*sc[14];

// reaction 38: NH + O2 <=> HNO + O
qf[42] = sc[2]*sc[17];
qr[42] = sc[6]*sc[13];

// reaction 39: NH + NO <=> H + N2O
qf[43] = sc[0]*sc[17];
qr[43] = sc[1]*sc[5];

// reaction 40: NH + NO <=> N2 + OH
qf[44] = sc[0]*sc[17];
qr[44] = sc[7]*sc[19];

// reaction 42: H + NNH <=> H2 + N2
qf[45] = sc[5]*sc[15];
qr[45] = sc[3]*sc[19];

// reaction 43: NNH + O <=> H + N2O
qf[46] = sc[6]*sc[15];
qr[46] = sc[1]*sc[5];

// reaction 44: NNH + OH <=> H2O + N2
qf[47] = sc[7]*sc[15];
qr[47] = sc[9]*sc[19];

// reaction 45: NNH + O2 <=> HO2 + N2
qf[48] = sc[2]*sc[15];
qr[48] = sc[8]*sc[19];

// reaction 46: N2 + O <=> N + NO
qf[49] = sc[6]*sc[19];
qr[49] = sc[0]*sc[14];

// reaction 47: HO2 + NO <=> NO2 + OH
qf[50] = sc[0]*sc[8];
qr[50] = sc[7]*sc[11];

// reaction 49: H + NO2 <=> NO + OH
qf[51] = sc[5]*sc[11];
qr[51] = sc[0]*sc[7];

// reaction 50: NO2 + O <=> NO + O2
qf[52] = sc[6]*sc[11];
qr[52] = sc[0]*sc[2];

// reaction 52: HNO + OH <=> H2O + NO
qf[53] = sc[7]*sc[13];
qr[53] = sc[0]*sc[9];

// reaction 53: H + HNO <=> H2 + NO
qf[54] = sc[5]*sc[13];
qr[54] = sc[0]*sc[3];

// reaction 54: N + O2 <=> NO + O
qf[55] = sc[2]*sc[14];
qr[55] = sc[0]*sc[6];

// reaction 55: N + OH <=> H + NO
qf[56] = sc[7]*sc[14];
qr[56] = sc[0]*sc[5];

// reaction 56: H2NO + O <=> HNO + OH
qf[57] = sc[6]*sc[20];
qr[57] = sc[7]*sc[13];

// reaction 57: H2NO + O2 <=> HNO + HO2
qf[58] = sc[2]*sc[20];
qr[58] = sc[8]*sc[13];

// reaction 58: H2NO + HO2 <=> H2O2 + HNO
qf[59] = sc[8]*sc[20];
qr[59] = sc[10]*sc[13];

// reaction 60: N2O + O <=> 2 NO
qf[60] = sc[1]*sc[6];
qr[60] = (sc[0] * sc[0]);

// reaction 61: H + N2O <=> N2 + OH
qf[61] = sc[1]*sc[5];
qr[61] = sc[7]*sc[19];

// reaction 62: H + N2O <=> N2 + OH
qf[62] = sc[1]*sc[5];
qr[62] = sc[7]*sc[19];

// reaction 63: N2O + OH <=> HO2 + N2
qf[63] = sc[1]*sc[7];
qr[63] = sc[8]*sc[19];

// compute the mixture concentration
amrex::Real mixture = 0.0;
for (int i = 0; i < 21; ++i) {
mixture += sc[i];
}

// compute the Gibbs free energy
amrex::Real g_RT[21];
gibbs(g_RT, tc);

// reference concentration: P_atm / (RT) in inverse mol/m^3
amrex::Real refC = 101325 / 8.31446 * invT;
amrex::Real refCinv = 1 / refC;

// Evaluate the kfs
amrex::Real k_f, k_r, Corr;
amrex::Real redP, F, logPred, logFcent, troe_c, troe_n, troe, F_troe;

// reaction 0:  H + O2 <=> O + OH
k_f = 35200000000
           * exp((-0.7) * tc[0] - (8589.80280978675) * invT);
qf[11] *= k_f;
qr[11] *= k_f * exp(-(g_RT[2] + g_RT[5] - g_RT[6] - g_RT[7]));
// reaction 1:  H2 + O <=> H + OH
k_f = 0.0506
           * exp((2.67) * tc[0] - (3165.54985441114) * invT);
qf[12] *= k_f;
qr[12] *= k_f * exp(-(g_RT[3] - g_RT[5] + g_RT[6] - g_RT[7]));
// reaction 2:  H2 + OH <=> H + H2O
k_f = 1170
           * exp((1.3) * tc[0] - (1829.33348086658) * invT);
qf[13] *= k_f;
qr[13] *= k_f * exp(-(g_RT[3] - g_RT[5] + g_RT[7] - g_RT[9]));
// reaction 3:  H2O + O <=> 2 OH
k_f = 0.7
           * exp((2.33) * tc[0] - (7320.93695479349) * invT);
qf[14] *= k_f;
qr[14] *= k_f * exp(-(g_RT[6] - 2.000000*g_RT[7] + g_RT[9]));
// reaction 4:  2 H + M <=> H2 + M
k_f = 1300000
           * exp((-1) * tc[0]);
Corr  = mixture + (1.5)*sc[3] + (-0.5)*sc[4] + (11)*sc[9] + (-0.5)*sc[18];
qf[5] *= Corr * k_f;
qr[5] *= Corr * k_f * exp(-(-g_RT[3] + 2.000000*g_RT[5])) * (refC);
// reaction 5:  H + OH + M <=> H2O + M
k_f = 40000000000
           * exp((-2) * tc[0]);
Corr  = mixture + (1.5)*sc[3] + (-0.62)*sc[4] + (11)*sc[9] + (-0.62)*sc[18];
qf[6] *= Corr * k_f;
qr[6] *= Corr * k_f * exp(-(g_RT[5] + g_RT[7] - g_RT[9])) * (refC);
// reaction 6:  2 O + M <=> O2 + M
k_f = 6170
           * exp((-0.5) * tc[0]);
Corr  = mixture + (1.5)*sc[3] + (-0.8)*sc[4] + (11)*sc[9] + (-0.8)*sc[18];
qf[7] *= Corr * k_f;
qr[7] *= Corr * k_f * exp(-(-g_RT[2] + 2.000000*g_RT[6])) * (refC);
// reaction 7:  H + O + M <=> OH + M
k_f = 4710000
           * exp((-1) * tc[0]);
Corr  = mixture + (1.5)*sc[3] + (-0.25)*sc[4] + (11)*sc[9] + (-0.25)*sc[18];
qf[8] *= Corr * k_f;
qr[8] *= Corr * k_f * exp(-(g_RT[5] + g_RT[6] - g_RT[7])) * (refC);
// reaction 8:  H + O2 (+M) <=> HO2 (+M)
k_f = 4650000
           * exp((0.44) * tc[0]);
Corr  = mixture + (1.5)*sc[3] + (-0.3)*sc[4] + (15)*sc[9] + (-0.3)*sc[18];
redP = Corr / k_f * 57500000 
           * exp(-1.4  * tc[0]);
F = redP / (1.0 + redP);
logPred = log10(redP);
logFcent = log10(
    (0.5)*exp(-tc[1] * 1e+30)
    + 0.5 * exp(-tc[1] * 1e-30)
    + 0.0);
troe_c = -0.4 - 0.67 * logFcent;
troe_n = 0.75 - 1.27 * logFcent;
troe = (troe_c + logPred) / (troe_n - 0.14*(troe_c + logPred));
F_troe = exp(M_LN10 * logFcent / (1.0 + troe*troe));
Corr = F * F_troe;
qf[0] *= Corr * k_f;
qr[0] *= Corr * k_f * exp(-(g_RT[2] + g_RT[5] - g_RT[8])) * (refC);
// reaction 9:  H + HO2 <=> 2 OH
k_f = 70800000
           * exp(-(148.413691245786) * invT);
qf[15] *= k_f;
qr[15] *= k_f * exp(-(g_RT[5] - 2.000000*g_RT[7] + g_RT[8]));
// reaction 10:  H + HO2 <=> H2 + O2
k_f = 16600000
           * exp(-(414.096994290704) * invT);
qf[16] *= k_f;
qr[16] *= k_f * exp(-(-g_RT[2] - g_RT[3] + g_RT[5] + g_RT[8]));
// reaction 11:  H + HO2 <=> H2O + O
k_f = 31000000
           * exp(-(865.955367183394) * invT);
qf[17] *= k_f;
qr[17] *= k_f * exp(-(g_RT[5] - g_RT[6] + g_RT[8] - g_RT[9]));
// reaction 12:  HO2 + O <=> O2 + OH
k_f = 20000000
           ;
qf[18] *= k_f;
qr[18] *= k_f * exp(-(-g_RT[2] + g_RT[6] - g_RT[7] + g_RT[8]));
// reaction 13:  HO2 + OH <=> H2O + O2
k_f = 7000000
           * exp(-(-550.846123223136) * invT);
qf[19] *= k_f;
qr[19] *= k_f * exp(-(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9]));
// reaction 14:  HO2 + OH <=> H2O + O2
k_f = 450000000
           * exp(-(5500.02228874582) * invT);
qf[20] *= k_f;
qr[20] *= k_f * exp(-(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9]));
// reaction 15:  2 OH (+M) <=> H2O2 (+M)
k_f = 95500000
           * exp((-0.27) * tc[0]);
Corr  = mixture + (1.5)*sc[3] + (-0.3)*sc[4] + (5)*sc[9] + (5)*sc[10] + (-0.6)*sc[18];
redP = Corr / k_f * 27600000000000 
           * exp(-3.2  * tc[0]);
F = redP / (1.0 + redP);
logPred = log10(redP);
logFcent = log10(
    (0.43)*exp(-tc[1] * 1e-30)
    + 0.57 * exp(-tc[1] * 1e+30)
    + 0.0);
troe_c = -0.4 - 0.67 * logFcent;
troe_n = 0.75 - 1.27 * logFcent;
troe = (troe_c + logPred) / (troe_n - 0.14*(troe_c + logPred));
F_troe = exp(M_LN10 * logFcent / (1.0 + troe*troe));
Corr = F * F_troe;
qf[1] *= Corr * k_f;
qr[1] *= Corr * k_f * exp(-(2.000000*g_RT[7] - g_RT[10])) * (refC);
// reaction 16:  2 HO2 <=> H2O2 + O2
k_f = 103000000
           * exp(-(5556.55364898232) * invT);
qf[21] *= k_f;
qr[21] *= k_f * exp(-(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10]));
// reaction 17:  2 HO2 <=> H2O2 + O2
k_f = 194000
           * exp(-(-709.002089118902) * invT);
qf[22] *= k_f;
qr[22] *= k_f * exp(-(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10]));
// reaction 18:  H + H2O2 <=> H2 + HO2
k_f = 23000000
           * exp(-(4000.59765398081) * invT);
qf[23] *= k_f;
qr[23] *= k_f * exp(-(-g_RT[3] + g_RT[5] - g_RT[8] + g_RT[10]));
// reaction 19:  H + H2O2 <=> H2O + OH
k_f = 10000000
           * exp(-(1804.07703640984) * invT);
qf[24] *= k_f;
qr[24] *= k_f * exp(-(g_RT[5] - g_RT[7] - g_RT[9] + g_RT[10]));
// reaction 20:  H2O2 + OH <=> H2O + HO2
k_f = 1740000
           * exp(-(721.627795263942) * invT);
qf[25] *= k_f;
qr[25] *= k_f * exp(-(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10]));
// reaction 21:  H2O2 + OH <=> H2O + HO2
k_f = 75900000
           * exp(-(3659.86461739778) * invT);
qf[26] *= k_f;
qr[26] *= k_f * exp(-(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10]));
// reaction 22:  H2O2 + O <=> HO2 + OH
k_f = 9.63
           * exp((2) * tc[0] - (2008.53899989296) * invT);
qf[27] *= k_f;
qr[27] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[8] + g_RT[10]));
// reaction 23:  NH3 + M <=> H + NH2 + M
k_f = 22000000000
           * exp(-(47026.2214081167) * invT);
Corr  = mixture;
qf[9] *= Corr * k_f;
qr[9] *= Corr * k_f * exp(-(-g_RT[5] + g_RT[12] - g_RT[16])) * (refCinv);
// reaction 24:  H + NH3 <=> H2 + NH2
k_f = 0.64
           * exp((2.39) * tc[0] - (5123.57093322397) * invT);
qf[28] *= k_f;
qr[28] *= k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[12] - g_RT[16]));
// reaction 25:  NH3 + O <=> NH2 + OH
k_f = 9.4
           * exp((1.94) * tc[0] - (3253.35109826075) * invT);
qf[29] *= k_f;
qr[29] *= k_f * exp(-(g_RT[6] - g_RT[7] + g_RT[12] - g_RT[16]));
// reaction 26:  NH3 + OH <=> H2O + NH2
k_f = 2.04
           * exp((2.04) * tc[0] - (285.042048178425) * invT);
qf[30] *= k_f;
qr[30] *= k_f * exp(-(g_RT[7] - g_RT[9] + g_RT[12] - g_RT[16]));
// reaction 27:  H + NH2 <=> H2 + NH
k_f = 40000000
           * exp(-(1837.75229568549) * invT);
qf[31] *= k_f;
qr[31] *= k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[16] - g_RT[17]));
// reaction 28:  N + NH2 <=> 2 H + N2
k_f = 70000000
           ;
qf[32] *= k_f;
qr[32] *= k_f * exp(-(-2.000000*g_RT[5] + g_RT[14] + g_RT[16] - g_RT[19])) * (refCinv);
// reaction 29:  NH2 + O <=> H + HNO
k_f = 660000000
           * exp((-0.5) * tc[0]);
qf[33] *= k_f;
qr[33] *= k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[13] + g_RT[16]));
// reaction 30:  NH2 + OH <=> H2O + NH
k_f = 4
           * exp((2) * tc[0] - (503.93626563682) * invT);
qf[34] *= k_f;
qr[34] *= k_f * exp(-(g_RT[7] - g_RT[9] + g_RT[16] - g_RT[17]));
// reaction 31:  NH2 + NO <=> H2O + N2
k_f = 280000000000000
           * exp((-2.654) * tc[0] - (633.046565582337) * invT);
qf[35] *= k_f;
qr[35] *= k_f * exp(-(g_RT[0] - g_RT[9] + g_RT[16] - g_RT[19]));
// reaction 32:  NH2 + NO <=> NNH + OH
k_f = 31000000
           * exp((-0.48) * tc[0] - (593.795665649569) * invT);
qf[36] *= k_f;
qr[36] *= k_f * exp(-(g_RT[0] - g_RT[7] - g_RT[15] + g_RT[16]));
// reaction 33:  NH2 + O2 <=> H2NO + O
k_f = 260000
           * exp((0.4872) * tc[0] - (14618.4441416271) * invT);
qf[37] *= k_f;
qr[37] *= k_f * exp(-(g_RT[2] - g_RT[6] + g_RT[16] - g_RT[20]));
// reaction 34:  H + NH <=> H2 + N
k_f = 100000000
           ;
qf[38] *= k_f;
qr[38] *= k_f * exp(-(-g_RT[3] + g_RT[5] - g_RT[14] + g_RT[17]));
// reaction 35:  NH + O <=> H + NO
k_f = 92000000
           ;
qf[39] *= k_f;
qr[39] *= k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[6] + g_RT[17]));
// reaction 36:  NH + OH <=> H + HNO
k_f = 40000000
           ;
qf[40] *= k_f;
qr[40] *= k_f * exp(-(-g_RT[5] + g_RT[7] - g_RT[13] + g_RT[17]));
// reaction 37:  NH + OH <=> H2O + N
k_f = 500000
           * exp((0.5) * tc[0] - (1006.67487560903) * invT);
qf[41] *= k_f;
qr[41] *= k_f * exp(-(g_RT[7] - g_RT[9] - g_RT[14] + g_RT[17]));
// reaction 38:  NH + O2 <=> HNO + O
k_f = 0.46
           * exp((2) * tc[0] - (3271.39141572985) * invT);
qf[42] *= k_f;
qr[42] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[17]));
// reaction 39:  NH + NO <=> H + N2O
k_f = 180000000
           * exp((-0.351) * tc[0] - (-122.784866456352) * invT);
qf[43] *= k_f;
qr[43] *= k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[5] + g_RT[17]));
// reaction 40:  NH + NO <=> N2 + OH
k_f = 22000000
           * exp((-0.23) * tc[0]);
qf[44] *= k_f;
qr[44] *= k_f * exp(-(g_RT[0] - g_RT[7] + g_RT[17] - g_RT[19]));
// reaction 41:  NNH (+M) <=> H + N2 (+M)
k_f = 65000000
           ;
Corr  = mixture;
redP = Corr / k_f * 50000000 
           ;
Corr = redP / (1. + redP);
qf[2] *= Corr * k_f;
qr[2] *= Corr * k_f * exp(-(-g_RT[5] + g_RT[15] - g_RT[19])) * (refCinv);
// reaction 42:  H + NNH <=> H2 + N2
k_f = 100000000
           ;
qf[45] *= k_f;
qr[45] *= k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[15] - g_RT[19]));
// reaction 43:  NNH + O <=> H + N2O
k_f = 100000000
           ;
qf[46] *= k_f;
qr[46] *= k_f * exp(-(-g_RT[1] - g_RT[5] + g_RT[6] + g_RT[15]));
// reaction 44:  NNH + OH <=> H2O + N2
k_f = 50000000
           ;
qf[47] *= k_f;
qr[47] *= k_f * exp(-(g_RT[7] - g_RT[9] + g_RT[15] - g_RT[19]));
// reaction 45:  NNH + O2 <=> HO2 + N2
k_f = 200000000
           ;
qf[48] *= k_f;
qr[48] *= k_f * exp(-(g_RT[2] - g_RT[8] + g_RT[15] - g_RT[19]));
// reaction 46:  N2 + O <=> N + NO
k_f = 14700000
           * exp((0.3) * tc[0] - (37885.5775072734) * invT);
qf[49] *= k_f;
qr[49] *= k_f * exp(-(-g_RT[0] + g_RT[6] - g_RT[14] + g_RT[19]));
// reaction 47:  HO2 + NO <=> NO2 + OH
k_f = 2100000
           * exp(-(-241.745286252587) * invT);
qf[50] *= k_f;
qr[50] *= k_f * exp(-(g_RT[0] - g_RT[7] + g_RT[8] - g_RT[11]));
// reaction 48:  H + NO (+M) <=> HNO (+M)
k_f = 1500000000
           * exp((-0.4) * tc[0]);
Corr  = mixture + (0.5)*sc[2] + sc[3] + (9)*sc[9];
redP = Corr / k_f * 230 
           * exp(0.206  * tc[0] - (-782.486818826365) *invT);
Corr = redP / (1. + redP);
qf[3] *= Corr * k_f;
qr[3] *= Corr * k_f * exp(-(g_RT[0] + g_RT[5] - g_RT[13])) * (refC);
// reaction 49:  H + NO2 <=> NO + OH
k_f = 350000000
           * exp(-(755.308086706252) * invT);
qf[51] *= k_f;
qr[51] *= k_f * exp(-(-g_RT[0] + g_RT[5] - g_RT[7] + g_RT[11]));
// reaction 50:  NO2 + O <=> NO + O2
k_f = 10000000
           * exp(-(301.879677816251) * invT);
qf[52] *= k_f;
qr[52] *= k_f * exp(-(-g_RT[0] - g_RT[2] + g_RT[6] + g_RT[11]));
// reaction 51:  NO2 + M <=> NO + O + M
k_f = 11000000000
           * exp(-(33194.9792254745) * invT);
qf[10] *= k_f;
qr[10] *= k_f * exp(-(-g_RT[0] - g_RT[6] + g_RT[11])) * (refCinv);
// reaction 52:  HNO + OH <=> H2O + NO
k_f = 36000000
           ;
qf[53] *= k_f;
qr[53] *= k_f * exp(-(-g_RT[0] + g_RT[7] - g_RT[9] + g_RT[13]));
// reaction 53:  H + HNO <=> H2 + NO
k_f = 440000
           * exp((0.72) * tc[0] - (327.141154439648) * invT);
qf[54] *= k_f;
qr[54] *= k_f * exp(-(-g_RT[0] - g_RT[3] + g_RT[5] + g_RT[13]));
// reaction 54:  N + O2 <=> NO + O
k_f = 6400
           * exp((1) * tc[0] - (3163.1444787486) * invT);
qf[55] *= k_f;
qr[55] *= k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[6] + g_RT[14]));
// reaction 55:  N + OH <=> H + NO
k_f = 38000000
           ;
qf[56] *= k_f;
qr[56] *= k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[7] + g_RT[14]));
// reaction 56:  H2NO + O <=> HNO + OH
k_f = 30
           * exp((2) * tc[0] - (1006.43333160944) * invT);
qf[57] *= k_f;
qr[57] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[20]));
// reaction 57:  H2NO + O2 <=> HNO + HO2
k_f = 3000000
           * exp(-(12580.416645118) * invT);
qf[58] *= k_f;
qr[58] *= k_f * exp(-(g_RT[2] - g_RT[8] - g_RT[13] + g_RT[20]));
// reaction 58:  H2NO + HO2 <=> H2O2 + HNO
k_f = 0.029
           * exp((2.69) * tc[0] - (-805.146665287552) * invT);
qf[59] *= k_f;
qr[59] *= k_f * exp(-(g_RT[8] - g_RT[10] - g_RT[13] + g_RT[20]));
// reaction 59:  N2O (+M) <=> N2 + O (+M)
k_f = 800000000000
           * exp(-(31511.1760043586) * invT);
Corr  = mixture;
redP = Corr / k_f * 200000000 
           * exp(- (28504.3859758422) *invT);
Corr = redP / (1. + redP);
qf[4] *= Corr * k_f;
qr[4] *= Corr * k_f * exp(-(g_RT[1] - g_RT[6] - g_RT[19])) * (refCinv);
// reaction 60:  N2O + O <=> 2 NO
k_f = 91500000
           * exp(-(13935.5791261301) * invT);
qf[60] *= k_f;
qr[60] *= k_f * exp(-(-2.000000*g_RT[0] + g_RT[1] + g_RT[6]));
// reaction 61:  H + N2O <=> N2 + OH
k_f = 33100
           * exp(-(2561.37282894602) * invT);
qf[61] *= k_f;
qr[61] *= k_f * exp(-(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[19]));
// reaction 62:  H + N2O <=> N2 + OH
k_f = 783000000
           * exp(-(9757.37114995351) * invT);
qf[62] *= k_f;
qr[62] *= k_f * exp(-(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[19]));
// reaction 63:  N2O + OH <=> HO2 + N2
k_f = 2000000
           * exp(-(20128.6666321888) * invT);
qf[63] *= k_f;
qr[63] *= k_f * exp(-(g_RT[1] + g_RT[7] - g_RT[8] - g_RT[19]));


return;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void  productionRate(amrex::Real * wdot, amrex::Real * sc, amrex::Real T)
{
const amrex::Real tc[5] = { log(T), T, T*T, T*T*T, T*T*T*T };// temperature cache
const amrex::Real invT = 1.0 / tc[1];

// reference concentration: P_atm / (RT) in inverse mol/m^3
const amrex::Real refC = 101325 / 8.31446 * invT;
const amrex::Real refCinv = 1 / refC;

for (int i = 0; i < 21; ++i) {
wdot[i] = 0.0;
}

// compute the mixture concentration
amrex::Real mixture = 0.0;
for (int i = 0; i < 21; ++i) {
mixture += sc[i];
}

// compute the Gibbs free energy
amrex::Real g_RT[21];
gibbs(g_RT, tc);

{
// reaction 8:  H + O2 (+M) <=> HO2 (+M)
const amrex::Real k_f = 4650000
           * exp((0.44) * tc[0]);
amrex::Real Corr = mixture + (1.5)*sc[3] + (-0.3)*sc[4] + (15)*sc[9] + (-0.3)*sc[18];
const amrex::Real redP = Corr / k_f * 57500000 
           * exp(-1.4 * tc[0]);
const amrex::Real F = redP / (1.0 + redP);
const amrex::Real logPred = log10(redP);
const amrex::Real logFcent = log10(
    0.5 * exp(-tc[1] * 1e+30)
    + 0.5 * exp(-tc[1] * 1e-30)
    + 0.0);
const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
const amrex::Real troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
const amrex::Real F_troe = exp(M_LN10 *logFcent / (1.0 + troe * troe));
Corr = F * F_troe;
const amrex::Real qf = Corr * k_f * (sc[2]*sc[5]);
const amrex::Real qr = Corr * k_f * exp(-(g_RT[2] + g_RT[5] - g_RT[8])) * (refC) * (sc[8]);
const amrex::Real qdot = qf - qr;
wdot[2] -= qdot;
wdot[5] -= qdot;
wdot[8] += qdot;
}

{
// reaction 15:  2 OH (+M) <=> H2O2 (+M)
const amrex::Real k_f = 95500000
           * exp((-0.27) * tc[0]);
amrex::Real Corr = mixture + (1.5)*sc[3] + (-0.3)*sc[4] + (5)*sc[9] + (5)*sc[10] + (-0.6)*sc[18];
const amrex::Real redP = Corr / k_f * 27600000000000 
           * exp(-3.2 * tc[0]);
const amrex::Real F = redP / (1.0 + redP);
const amrex::Real logPred = log10(redP);
const amrex::Real logFcent = log10(
    0.43 * exp(-tc[1] * 1e-30)
    + 0.57 * exp(-tc[1] * 1e+30)
    + 0.0);
const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
const amrex::Real troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
const amrex::Real F_troe = exp(M_LN10 *logFcent / (1.0 + troe * troe));
Corr = F * F_troe;
const amrex::Real qf = Corr * k_f * ((sc[7] * sc[7]));
const amrex::Real qr = Corr * k_f * exp(-(2.000000*g_RT[7] - g_RT[10])) * (refC) * (sc[10]);
const amrex::Real qdot = qf - qr;
wdot[7] -= 2.000000 * qdot;
wdot[10] += qdot;
}

{
// reaction 41:  NNH (+M) <=> H + N2 (+M)
const amrex::Real k_f = 65000000
           ;
amrex::Real Corr = mixture;
const amrex::Real redP = Corr / k_f * 50000000 
           ;
Corr = redP / (1.0 + redP);
const amrex::Real qf = Corr * k_f * (sc[15]);
const amrex::Real qr = Corr * k_f * exp(-(-g_RT[5] + g_RT[15] - g_RT[19])) * (refCinv) * (sc[5]*sc[19]);
const amrex::Real qdot = qf - qr;
wdot[5] += qdot;
wdot[15] -= qdot;
wdot[19] += qdot;
}

{
// reaction 48:  H + NO (+M) <=> HNO (+M)
const amrex::Real k_f = 1500000000
           * exp((-0.4) * tc[0]);
amrex::Real Corr = mixture + (0.5)*sc[2] + sc[3] + (9)*sc[9];
const amrex::Real redP = Corr / k_f * 230 
           * exp(0.206 * tc[0] - -782.486818826365 * invT);
Corr = redP / (1.0 + redP);
const amrex::Real qf = Corr * k_f * (sc[0]*sc[5]);
const amrex::Real qr = Corr * k_f * exp(-(g_RT[0] + g_RT[5] - g_RT[13])) * (refC) * (sc[13]);
const amrex::Real qdot = qf - qr;
wdot[0] -= qdot;
wdot[5] -= qdot;
wdot[13] += qdot;
}

{
// reaction 59:  N2O (+M) <=> N2 + O (+M)
const amrex::Real k_f = 800000000000
           * exp(-(31511.1760043586) * invT);
amrex::Real Corr = mixture;
const amrex::Real redP = Corr / k_f * 200000000 
           * exp(- 28504.3859758422 * invT);
Corr = redP / (1.0 + redP);
const amrex::Real qf = Corr * k_f * (sc[1]);
const amrex::Real qr = Corr * k_f * exp(-(g_RT[1] - g_RT[6] - g_RT[19])) * (refCinv) * (sc[6]*sc[19]);
const amrex::Real qdot = qf - qr;
wdot[1] -= qdot;
wdot[6] += qdot;
wdot[19] += qdot;
}

{
// reaction 4:  2 H + M <=> H2 + M
const amrex::Real k_f = 1300000
           * exp((-1) * tc[0]);
const amrex::Real Corr = mixture + (1.5)*sc[3] + (-0.5)*sc[4] + (11)*sc[9] + (-0.5)*sc[18];
const amrex::Real qf = Corr * k_f * ((sc[5] * sc[5]));
const amrex::Real qr = Corr * k_f * exp(-(-g_RT[3] + 2.000000*g_RT[5])) * (refC) * (sc[3]);
const amrex::Real qdot = qf - qr;
wdot[3] += qdot;
wdot[5] -= 2.000000 * qdot;
}

{
// reaction 5:  H + OH + M <=> H2O + M
const amrex::Real k_f = 40000000000
           * exp((-2) * tc[0]);
const amrex::Real Corr = mixture + (1.5)*sc[3] + (-0.62)*sc[4] + (11)*sc[9] + (-0.62)*sc[18];
const amrex::Real qf = Corr * k_f * (sc[5]*sc[7]);
const amrex::Real qr = Corr * k_f * exp(-(g_RT[5] + g_RT[7] - g_RT[9])) * (refC) * (sc[9]);
const amrex::Real qdot = qf - qr;
wdot[5] -= qdot;
wdot[7] -= qdot;
wdot[9] += qdot;
}

{
// reaction 6:  2 O + M <=> O2 + M
const amrex::Real k_f = 6170
           * exp((-0.5) * tc[0]);
const amrex::Real Corr = mixture + (1.5)*sc[3] + (-0.8)*sc[4] + (11)*sc[9] + (-0.8)*sc[18];
const amrex::Real qf = Corr * k_f * ((sc[6] * sc[6]));
const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] + 2.000000*g_RT[6])) * (refC) * (sc[2]);
const amrex::Real qdot = qf - qr;
wdot[2] += qdot;
wdot[6] -= 2.000000 * qdot;
}

{
// reaction 7:  H + O + M <=> OH + M
const amrex::Real k_f = 4710000
           * exp((-1) * tc[0]);
const amrex::Real Corr = mixture + (1.5)*sc[3] + (-0.25)*sc[4] + (11)*sc[9] + (-0.25)*sc[18];
const amrex::Real qf = Corr * k_f * (sc[5]*sc[6]);
const amrex::Real qr = Corr * k_f * exp(-(g_RT[5] + g_RT[6] - g_RT[7])) * (refC) * (sc[7]);
const amrex::Real qdot = qf - qr;
wdot[5] -= qdot;
wdot[6] -= qdot;
wdot[7] += qdot;
}

{
// reaction 23:  NH3 + M <=> H + NH2 + M
const amrex::Real k_f = 22000000000
           * exp(-(47026.2214081167) * invT);
const amrex::Real Corr = mixture;
const amrex::Real qf = Corr * k_f * (sc[12]);
const amrex::Real qr = Corr * k_f * exp(-(-g_RT[5] + g_RT[12] - g_RT[16])) * (refCinv) * (sc[5]*sc[16]);
const amrex::Real qdot = qf - qr;
wdot[5] += qdot;
wdot[12] -= qdot;
wdot[16] += qdot;
}

{
// reaction 51:  NO2 + M <=> NO + O + M
const amrex::Real k_f = 11000000000
           * exp(-(33194.9792254745) * invT);
const amrex::Real Corr = mixture + (15.25)*sc[9];
const amrex::Real qf = Corr * k_f * (sc[11]);
const amrex::Real qr = Corr * k_f * exp(-(-g_RT[0] - g_RT[6] + g_RT[11])) * (refCinv) * (sc[0]*sc[6]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[6] += qdot;
wdot[11] -= qdot;
}

{
// reaction 0:  H + O2 <=> O + OH
const amrex::Real k_f = 35200000000
           * exp((-0.7) * tc[0] - (8589.80280978675) * invT);
const amrex::Real qf = k_f * (sc[2]*sc[5]);
const amrex::Real qr = k_f * exp(-(g_RT[2] + g_RT[5] - g_RT[6] - g_RT[7])) * (sc[6]*sc[7]);
const amrex::Real qdot = qf - qr;
wdot[2] -= qdot;
wdot[5] -= qdot;
wdot[6] += qdot;
wdot[7] += qdot;
}

{
// reaction 1:  H2 + O <=> H + OH
const amrex::Real k_f = 0.0506
           * exp((2.67) * tc[0] - (3165.54985441114) * invT);
const amrex::Real qf = k_f * (sc[3]*sc[6]);
const amrex::Real qr = k_f * exp(-(g_RT[3] - g_RT[5] + g_RT[6] - g_RT[7])) * (sc[5]*sc[7]);
const amrex::Real qdot = qf - qr;
wdot[3] -= qdot;
wdot[5] += qdot;
wdot[6] -= qdot;
wdot[7] += qdot;
}

{
// reaction 2:  H2 + OH <=> H + H2O
const amrex::Real k_f = 1170
           * exp((1.3) * tc[0] - (1829.33348086658) * invT);
const amrex::Real qf = k_f * (sc[3]*sc[7]);
const amrex::Real qr = k_f * exp(-(g_RT[3] - g_RT[5] + g_RT[7] - g_RT[9])) * (sc[5]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[3] -= qdot;
wdot[5] += qdot;
wdot[7] -= qdot;
wdot[9] += qdot;
}

{
// reaction 3:  H2O + O <=> 2 OH
const amrex::Real k_f = 0.7
           * exp((2.33) * tc[0] - (7320.93695479349) * invT);
const amrex::Real qf = k_f * (sc[6]*sc[9]);
const amrex::Real qr = k_f * exp(-(g_RT[6] - 2.000000*g_RT[7] + g_RT[9])) * ((sc[7] * sc[7]));
const amrex::Real qdot = qf - qr;
wdot[6] -= qdot;
wdot[7] += 2.000000 * qdot;
wdot[9] -= qdot;
}

{
// reaction 9:  H + HO2 <=> 2 OH
const amrex::Real k_f = 70800000
           * exp(-(148.413691245786) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[8]);
const amrex::Real qr = k_f * exp(-(g_RT[5] - 2.000000*g_RT[7] + g_RT[8])) * ((sc[7] * sc[7]));
const amrex::Real qdot = qf - qr;
wdot[5] -= qdot;
wdot[7] += 2.000000 * qdot;
wdot[8] -= qdot;
}

{
// reaction 10:  H + HO2 <=> H2 + O2
const amrex::Real k_f = 16600000
           * exp(-(414.096994290704) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[8]);
const amrex::Real qr = k_f * exp(-(-g_RT[2] - g_RT[3] + g_RT[5] + g_RT[8])) * (sc[2]*sc[3]);
const amrex::Real qdot = qf - qr;
wdot[2] += qdot;
wdot[3] += qdot;
wdot[5] -= qdot;
wdot[8] -= qdot;
}

{
// reaction 11:  H + HO2 <=> H2O + O
const amrex::Real k_f = 31000000
           * exp(-(865.955367183394) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[8]);
const amrex::Real qr = k_f * exp(-(g_RT[5] - g_RT[6] + g_RT[8] - g_RT[9])) * (sc[6]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[5] -= qdot;
wdot[6] += qdot;
wdot[8] -= qdot;
wdot[9] += qdot;
}

{
// reaction 12:  HO2 + O <=> O2 + OH
const amrex::Real k_f = 20000000
           ;
const amrex::Real qf = k_f * (sc[6]*sc[8]);
const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[6] - g_RT[7] + g_RT[8])) * (sc[2]*sc[7]);
const amrex::Real qdot = qf - qr;
wdot[2] += qdot;
wdot[6] -= qdot;
wdot[7] += qdot;
wdot[8] -= qdot;
}

{
// reaction 13:  HO2 + OH <=> H2O + O2
const amrex::Real k_f = 7000000
           * exp(-(-550.846123223136) * invT);
const amrex::Real qf = k_f * (sc[7]*sc[8]);
const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9])) * (sc[2]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[2] += qdot;
wdot[7] -= qdot;
wdot[8] -= qdot;
wdot[9] += qdot;
}

{
// reaction 14:  HO2 + OH <=> H2O + O2
const amrex::Real k_f = 450000000
           * exp(-(5500.02228874582) * invT);
const amrex::Real qf = k_f * (sc[7]*sc[8]);
const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9])) * (sc[2]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[2] += qdot;
wdot[7] -= qdot;
wdot[8] -= qdot;
wdot[9] += qdot;
}

{
// reaction 16:  2 HO2 <=> H2O2 + O2
const amrex::Real k_f = 103000000
           * exp(-(5556.55364898232) * invT);
const amrex::Real qf = k_f * ((sc[8] * sc[8]));
const amrex::Real qr = k_f * exp(-(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10])) * (sc[2]*sc[10]);
const amrex::Real qdot = qf - qr;
wdot[2] += qdot;
wdot[8] -= 2.000000 * qdot;
wdot[10] += qdot;
}

{
// reaction 17:  2 HO2 <=> H2O2 + O2
const amrex::Real k_f = 194000
           * exp(-(-709.002089118902) * invT);
const amrex::Real qf = k_f * ((sc[8] * sc[8]));
const amrex::Real qr = k_f * exp(-(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10])) * (sc[2]*sc[10]);
const amrex::Real qdot = qf - qr;
wdot[2] += qdot;
wdot[8] -= 2.000000 * qdot;
wdot[10] += qdot;
}

{
// reaction 18:  H + H2O2 <=> H2 + HO2
const amrex::Real k_f = 23000000
           * exp(-(4000.59765398081) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[10]);
const amrex::Real qr = k_f * exp(-(-g_RT[3] + g_RT[5] - g_RT[8] + g_RT[10])) * (sc[3]*sc[8]);
const amrex::Real qdot = qf - qr;
wdot[3] += qdot;
wdot[5] -= qdot;
wdot[8] += qdot;
wdot[10] -= qdot;
}

{
// reaction 19:  H + H2O2 <=> H2O + OH
const amrex::Real k_f = 10000000
           * exp(-(1804.07703640984) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[10]);
const amrex::Real qr = k_f * exp(-(g_RT[5] - g_RT[7] - g_RT[9] + g_RT[10])) * (sc[7]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[5] -= qdot;
wdot[7] += qdot;
wdot[9] += qdot;
wdot[10] -= qdot;
}

{
// reaction 20:  H2O2 + OH <=> H2O + HO2
const amrex::Real k_f = 1740000
           * exp(-(721.627795263942) * invT);
const amrex::Real qf = k_f * (sc[7]*sc[10]);
const amrex::Real qr = k_f * exp(-(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10])) * (sc[8]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[7] -= qdot;
wdot[8] += qdot;
wdot[9] += qdot;
wdot[10] -= qdot;
}

{
// reaction 21:  H2O2 + OH <=> H2O + HO2
const amrex::Real k_f = 75900000
           * exp(-(3659.86461739778) * invT);
const amrex::Real qf = k_f * (sc[7]*sc[10]);
const amrex::Real qr = k_f * exp(-(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10])) * (sc[8]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[7] -= qdot;
wdot[8] += qdot;
wdot[9] += qdot;
wdot[10] -= qdot;
}

{
// reaction 22:  H2O2 + O <=> HO2 + OH
const amrex::Real k_f = 9.63
           * exp((2) * tc[0] - (2008.53899989296) * invT);
const amrex::Real qf = k_f * (sc[6]*sc[10]);
const amrex::Real qr = k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[8] + g_RT[10])) * (sc[7]*sc[8]);
const amrex::Real qdot = qf - qr;
wdot[6] -= qdot;
wdot[7] += qdot;
wdot[8] += qdot;
wdot[10] -= qdot;
}

{
// reaction 24:  H + NH3 <=> H2 + NH2
const amrex::Real k_f = 0.64
           * exp((2.39) * tc[0] - (5123.57093322397) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[12]);
const amrex::Real qr = k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[12] - g_RT[16])) * (sc[3]*sc[16]);
const amrex::Real qdot = qf - qr;
wdot[3] += qdot;
wdot[5] -= qdot;
wdot[12] -= qdot;
wdot[16] += qdot;
}

{
// reaction 25:  NH3 + O <=> NH2 + OH
const amrex::Real k_f = 9.4
           * exp((1.94) * tc[0] - (3253.35109826075) * invT);
const amrex::Real qf = k_f * (sc[6]*sc[12]);
const amrex::Real qr = k_f * exp(-(g_RT[6] - g_RT[7] + g_RT[12] - g_RT[16])) * (sc[7]*sc[16]);
const amrex::Real qdot = qf - qr;
wdot[6] -= qdot;
wdot[7] += qdot;
wdot[12] -= qdot;
wdot[16] += qdot;
}

{
// reaction 26:  NH3 + OH <=> H2O + NH2
const amrex::Real k_f = 2.04
           * exp((2.04) * tc[0] - (285.042048178425) * invT);
const amrex::Real qf = k_f * (sc[7]*sc[12]);
const amrex::Real qr = k_f * exp(-(g_RT[7] - g_RT[9] + g_RT[12] - g_RT[16])) * (sc[9]*sc[16]);
const amrex::Real qdot = qf - qr;
wdot[7] -= qdot;
wdot[9] += qdot;
wdot[12] -= qdot;
wdot[16] += qdot;
}

{
// reaction 27:  H + NH2 <=> H2 + NH
const amrex::Real k_f = 40000000
           * exp(-(1837.75229568549) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[16]);
const amrex::Real qr = k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[16] - g_RT[17])) * (sc[3]*sc[17]);
const amrex::Real qdot = qf - qr;
wdot[3] += qdot;
wdot[5] -= qdot;
wdot[16] -= qdot;
wdot[17] += qdot;
}

{
// reaction 28:  N + NH2 <=> 2 H + N2
const amrex::Real k_f = 70000000
           ;
const amrex::Real qf = k_f * (sc[14]*sc[16]);
const amrex::Real qr = k_f * exp(-(-2.000000*g_RT[5] + g_RT[14] + g_RT[16] - g_RT[19])) * (refCinv) * ((sc[5] * sc[5])*sc[19]);
const amrex::Real qdot = qf - qr;
wdot[5] += 2.000000 * qdot;
wdot[14] -= qdot;
wdot[16] -= qdot;
wdot[19] += qdot;
}

{
// reaction 29:  NH2 + O <=> H + HNO
const amrex::Real k_f = 660000000
           * exp((-0.5) * tc[0]);
const amrex::Real qf = k_f * (sc[6]*sc[16]);
const amrex::Real qr = k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[13] + g_RT[16])) * (sc[5]*sc[13]);
const amrex::Real qdot = qf - qr;
wdot[5] += qdot;
wdot[6] -= qdot;
wdot[13] += qdot;
wdot[16] -= qdot;
}

{
// reaction 30:  NH2 + OH <=> H2O + NH
const amrex::Real k_f = 4
           * exp((2) * tc[0] - (503.93626563682) * invT);
const amrex::Real qf = k_f * (sc[7]*sc[16]);
const amrex::Real qr = k_f * exp(-(g_RT[7] - g_RT[9] + g_RT[16] - g_RT[17])) * (sc[9]*sc[17]);
const amrex::Real qdot = qf - qr;
wdot[7] -= qdot;
wdot[9] += qdot;
wdot[16] -= qdot;
wdot[17] += qdot;
}

{
// reaction 31:  NH2 + NO <=> H2O + N2
const amrex::Real k_f = 280000000000000
           * exp((-2.654) * tc[0] - (633.046565582337) * invT);
const amrex::Real qf = k_f * (sc[0]*sc[16]);
const amrex::Real qr = k_f * exp(-(g_RT[0] - g_RT[9] + g_RT[16] - g_RT[19])) * (sc[9]*sc[19]);
const amrex::Real qdot = qf - qr;
wdot[0] -= qdot;
wdot[9] += qdot;
wdot[16] -= qdot;
wdot[19] += qdot;
}

{
// reaction 32:  NH2 + NO <=> NNH + OH
const amrex::Real k_f = 31000000
           * exp((-0.48) * tc[0] - (593.795665649569) * invT);
const amrex::Real qf = k_f * (sc[0]*sc[16]);
const amrex::Real qr = k_f * exp(-(g_RT[0] - g_RT[7] - g_RT[15] + g_RT[16])) * (sc[7]*sc[15]);
const amrex::Real qdot = qf - qr;
wdot[0] -= qdot;
wdot[7] += qdot;
wdot[15] += qdot;
wdot[16] -= qdot;
}

{
// reaction 33:  NH2 + O2 <=> H2NO + O
const amrex::Real k_f = 260000
           * exp((0.4872) * tc[0] - (14618.4441416271) * invT);
const amrex::Real qf = k_f * (sc[2]*sc[16]);
const amrex::Real qr = k_f * exp(-(g_RT[2] - g_RT[6] + g_RT[16] - g_RT[20])) * (sc[6]*sc[20]);
const amrex::Real qdot = qf - qr;
wdot[2] -= qdot;
wdot[6] += qdot;
wdot[16] -= qdot;
wdot[20] += qdot;
}

{
// reaction 34:  H + NH <=> H2 + N
const amrex::Real k_f = 100000000
           ;
const amrex::Real qf = k_f * (sc[5]*sc[17]);
const amrex::Real qr = k_f * exp(-(-g_RT[3] + g_RT[5] - g_RT[14] + g_RT[17])) * (sc[3]*sc[14]);
const amrex::Real qdot = qf - qr;
wdot[3] += qdot;
wdot[5] -= qdot;
wdot[14] += qdot;
wdot[17] -= qdot;
}

{
// reaction 35:  NH + O <=> H + NO
const amrex::Real k_f = 92000000
           ;
const amrex::Real qf = k_f * (sc[6]*sc[17]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[6] + g_RT[17])) * (sc[0]*sc[5]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[5] += qdot;
wdot[6] -= qdot;
wdot[17] -= qdot;
}

{
// reaction 36:  NH + OH <=> H + HNO
const amrex::Real k_f = 40000000
           ;
const amrex::Real qf = k_f * (sc[7]*sc[17]);
const amrex::Real qr = k_f * exp(-(-g_RT[5] + g_RT[7] - g_RT[13] + g_RT[17])) * (sc[5]*sc[13]);
const amrex::Real qdot = qf - qr;
wdot[5] += qdot;
wdot[7] -= qdot;
wdot[13] += qdot;
wdot[17] -= qdot;
}

{
// reaction 37:  NH + OH <=> H2O + N
const amrex::Real k_f = 500000
           * exp((0.5) * tc[0] - (1006.67487560903) * invT);
const amrex::Real qf = k_f * (sc[7]*sc[17]);
const amrex::Real qr = k_f * exp(-(g_RT[7] - g_RT[9] - g_RT[14] + g_RT[17])) * (sc[9]*sc[14]);
const amrex::Real qdot = qf - qr;
wdot[7] -= qdot;
wdot[9] += qdot;
wdot[14] += qdot;
wdot[17] -= qdot;
}

{
// reaction 38:  NH + O2 <=> HNO + O
const amrex::Real k_f = 0.46
           * exp((2) * tc[0] - (3271.39141572985) * invT);
const amrex::Real qf = k_f * (sc[2]*sc[17]);
const amrex::Real qr = k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[17])) * (sc[6]*sc[13]);
const amrex::Real qdot = qf - qr;
wdot[2] -= qdot;
wdot[6] += qdot;
wdot[13] += qdot;
wdot[17] -= qdot;
}

{
// reaction 39:  NH + NO <=> H + N2O
const amrex::Real k_f = 180000000
           * exp((-0.351) * tc[0] - (-122.784866456352) * invT);
const amrex::Real qf = k_f * (sc[0]*sc[17]);
const amrex::Real qr = k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[5] + g_RT[17])) * (sc[1]*sc[5]);
const amrex::Real qdot = qf - qr;
wdot[0] -= qdot;
wdot[1] += qdot;
wdot[5] += qdot;
wdot[17] -= qdot;
}

{
// reaction 40:  NH + NO <=> N2 + OH
const amrex::Real k_f = 22000000
           * exp((-0.23) * tc[0]);
const amrex::Real qf = k_f * (sc[0]*sc[17]);
const amrex::Real qr = k_f * exp(-(g_RT[0] - g_RT[7] + g_RT[17] - g_RT[19])) * (sc[7]*sc[19]);
const amrex::Real qdot = qf - qr;
wdot[0] -= qdot;
wdot[7] += qdot;
wdot[17] -= qdot;
wdot[19] += qdot;
}

{
// reaction 42:  H + NNH <=> H2 + N2
const amrex::Real k_f = 100000000
           ;
const amrex::Real qf = k_f * (sc[5]*sc[15]);
const amrex::Real qr = k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[15] - g_RT[19])) * (sc[3]*sc[19]);
const amrex::Real qdot = qf - qr;
wdot[3] += qdot;
wdot[5] -= qdot;
wdot[15] -= qdot;
wdot[19] += qdot;
}

{
// reaction 43:  NNH + O <=> H + N2O
const amrex::Real k_f = 100000000
           ;
const amrex::Real qf = k_f * (sc[6]*sc[15]);
const amrex::Real qr = k_f * exp(-(-g_RT[1] - g_RT[5] + g_RT[6] + g_RT[15])) * (sc[1]*sc[5]);
const amrex::Real qdot = qf - qr;
wdot[1] += qdot;
wdot[5] += qdot;
wdot[6] -= qdot;
wdot[15] -= qdot;
}

{
// reaction 44:  NNH + OH <=> H2O + N2
const amrex::Real k_f = 50000000
           ;
const amrex::Real qf = k_f * (sc[7]*sc[15]);
const amrex::Real qr = k_f * exp(-(g_RT[7] - g_RT[9] + g_RT[15] - g_RT[19])) * (sc[9]*sc[19]);
const amrex::Real qdot = qf - qr;
wdot[7] -= qdot;
wdot[9] += qdot;
wdot[15] -= qdot;
wdot[19] += qdot;
}

{
// reaction 45:  NNH + O2 <=> HO2 + N2
const amrex::Real k_f = 200000000
           ;
const amrex::Real qf = k_f * (sc[2]*sc[15]);
const amrex::Real qr = k_f * exp(-(g_RT[2] - g_RT[8] + g_RT[15] - g_RT[19])) * (sc[8]*sc[19]);
const amrex::Real qdot = qf - qr;
wdot[2] -= qdot;
wdot[8] += qdot;
wdot[15] -= qdot;
wdot[19] += qdot;
}

{
// reaction 46:  N2 + O <=> N + NO
const amrex::Real k_f = 14700000
           * exp((0.3) * tc[0] - (37885.5775072734) * invT);
const amrex::Real qf = k_f * (sc[6]*sc[19]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] + g_RT[6] - g_RT[14] + g_RT[19])) * (sc[0]*sc[14]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[6] -= qdot;
wdot[14] += qdot;
wdot[19] -= qdot;
}

{
// reaction 47:  HO2 + NO <=> NO2 + OH
const amrex::Real k_f = 2100000
           * exp(-(-241.745286252587) * invT);
const amrex::Real qf = k_f * (sc[0]*sc[8]);
const amrex::Real qr = k_f * exp(-(g_RT[0] - g_RT[7] + g_RT[8] - g_RT[11])) * (sc[7]*sc[11]);
const amrex::Real qdot = qf - qr;
wdot[0] -= qdot;
wdot[7] += qdot;
wdot[8] -= qdot;
wdot[11] += qdot;
}

{
// reaction 49:  H + NO2 <=> NO + OH
const amrex::Real k_f = 350000000
           * exp(-(755.308086706252) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[11]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] + g_RT[5] - g_RT[7] + g_RT[11])) * (sc[0]*sc[7]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[5] -= qdot;
wdot[7] += qdot;
wdot[11] -= qdot;
}

{
// reaction 50:  NO2 + O <=> NO + O2
const amrex::Real k_f = 10000000
           * exp(-(301.879677816251) * invT);
const amrex::Real qf = k_f * (sc[6]*sc[11]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] - g_RT[2] + g_RT[6] + g_RT[11])) * (sc[0]*sc[2]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[2] += qdot;
wdot[6] -= qdot;
wdot[11] -= qdot;
}

{
// reaction 52:  HNO + OH <=> H2O + NO
const amrex::Real k_f = 36000000
           ;
const amrex::Real qf = k_f * (sc[7]*sc[13]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] + g_RT[7] - g_RT[9] + g_RT[13])) * (sc[0]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[7] -= qdot;
wdot[9] += qdot;
wdot[13] -= qdot;
}

{
// reaction 53:  H + HNO <=> H2 + NO
const amrex::Real k_f = 440000
           * exp((0.72) * tc[0] - (327.141154439648) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[13]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] - g_RT[3] + g_RT[5] + g_RT[13])) * (sc[0]*sc[3]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[3] += qdot;
wdot[5] -= qdot;
wdot[13] -= qdot;
}

{
// reaction 54:  N + O2 <=> NO + O
const amrex::Real k_f = 6400
           * exp((1) * tc[0] - (3163.1444787486) * invT);
const amrex::Real qf = k_f * (sc[2]*sc[14]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[6] + g_RT[14])) * (sc[0]*sc[6]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[2] -= qdot;
wdot[6] += qdot;
wdot[14] -= qdot;
}

{
// reaction 55:  N + OH <=> H + NO
const amrex::Real k_f = 38000000
           ;
const amrex::Real qf = k_f * (sc[7]*sc[14]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[7] + g_RT[14])) * (sc[0]*sc[5]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[5] += qdot;
wdot[7] -= qdot;
wdot[14] -= qdot;
}

{
// reaction 56:  H2NO + O <=> HNO + OH
const amrex::Real k_f = 30
           * exp((2) * tc[0] - (1006.43333160944) * invT);
const amrex::Real qf = k_f * (sc[6]*sc[20]);
const amrex::Real qr = k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[20])) * (sc[7]*sc[13]);
const amrex::Real qdot = qf - qr;
wdot[6] -= qdot;
wdot[7] += qdot;
wdot[13] += qdot;
wdot[20] -= qdot;
}

{
// reaction 57:  H2NO + O2 <=> HNO + HO2
const amrex::Real k_f = 3000000
           * exp(-(12580.416645118) * invT);
const amrex::Real qf = k_f * (sc[2]*sc[20]);
const amrex::Real qr = k_f * exp(-(g_RT[2] - g_RT[8] - g_RT[13] + g_RT[20])) * (sc[8]*sc[13]);
const amrex::Real qdot = qf - qr;
wdot[2] -= qdot;
wdot[8] += qdot;
wdot[13] += qdot;
wdot[20] -= qdot;
}

{
// reaction 58:  H2NO + HO2 <=> H2O2 + HNO
const amrex::Real k_f = 0.029
           * exp((2.69) * tc[0] - (-805.146665287552) * invT);
const amrex::Real qf = k_f * (sc[8]*sc[20]);
const amrex::Real qr = k_f * exp(-(g_RT[8] - g_RT[10] - g_RT[13] + g_RT[20])) * (sc[10]*sc[13]);
const amrex::Real qdot = qf - qr;
wdot[8] -= qdot;
wdot[10] += qdot;
wdot[13] += qdot;
wdot[20] -= qdot;
}

{
// reaction 60:  N2O + O <=> 2 NO
const amrex::Real k_f = 91500000
           * exp(-(13935.5791261301) * invT);
const amrex::Real qf = k_f * (sc[1]*sc[6]);
const amrex::Real qr = k_f * exp(-(-2.000000*g_RT[0] + g_RT[1] + g_RT[6])) * ((sc[0] * sc[0]));
const amrex::Real qdot = qf - qr;
wdot[0] += 2.000000 * qdot;
wdot[1] -= qdot;
wdot[6] -= qdot;
}

{
// reaction 61:  H + N2O <=> N2 + OH
const amrex::Real k_f = 33100
           * exp(-(2561.37282894602) * invT);
const amrex::Real qf = k_f * (sc[1]*sc[5]);
const amrex::Real qr = k_f * exp(-(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[19])) * (sc[7]*sc[19]);
const amrex::Real qdot = qf - qr;
wdot[1] -= qdot;
wdot[5] -= qdot;
wdot[7] += qdot;
wdot[19] += qdot;
}

{
// reaction 62:  H + N2O <=> N2 + OH
const amrex::Real k_f = 783000000
           * exp(-(9757.37114995351) * invT);
const amrex::Real qf = k_f * (sc[1]*sc[5]);
const amrex::Real qr = k_f * exp(-(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[19])) * (sc[7]*sc[19]);
const amrex::Real qdot = qf - qr;
wdot[1] -= qdot;
wdot[5] -= qdot;
wdot[7] += qdot;
wdot[19] += qdot;
}

{
// reaction 63:  N2O + OH <=> HO2 + N2
const amrex::Real k_f = 2000000
           * exp(-(20128.6666321888) * invT);
const amrex::Real qf = k_f * (sc[1]*sc[7]);
const amrex::Real qr = k_f * exp(-(g_RT[1] + g_RT[7] - g_RT[8] - g_RT[19])) * (sc[8]*sc[19]);
const amrex::Real qdot = qf - qr;
wdot[1] -= qdot;
wdot[7] -= qdot;
wdot[8] += qdot;
wdot[19] += qdot;
}


return;
}


// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKWC(amrex::Real *  T, amrex::Real *  C,  amrex::Real *  wdot)
{
int id; // loop counter

// convert to SI
for (id = 0; id < 21; ++id) {
C[id] *= 1.0e6;
}

// convert to chemkin units
productionRate(wdot, C, *T);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
C[id] *= 1.0e-6;
wdot[id] *= 1.0e-6;
}
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKWYP(amrex::Real *  P, amrex::Real *  T, amrex::Real *  y,  amrex::Real *  wdot)
{
int id; // loop counter
amrex::Real c[21]; // temporary storage
amrex::Real YOW = 0; 
amrex::Real PWORT; 
amrex::Real imw[21];

get_imw(imw);

// Compute inverse of mean molecular wt first
YOW += y[0]*imw[0]; // NO
YOW += y[1]*imw[1]; // N2O
YOW += y[2]*imw[2]; // O2
YOW += y[3]*imw[3]; // H2
YOW += y[4]*imw[4]; // AR
YOW += y[5]*imw[5]; // H
YOW += y[6]*imw[6]; // O
YOW += y[7]*imw[7]; // OH
YOW += y[8]*imw[8]; // HO2
YOW += y[9]*imw[9]; // H2O
YOW += y[10]*imw[10]; // H2O2
YOW += y[11]*imw[11]; // NO2
YOW += y[12]*imw[12]; // NH3
YOW += y[13]*imw[13]; // HNO
YOW += y[14]*imw[14]; // N
YOW += y[15]*imw[15]; // NNH
YOW += y[16]*imw[16]; // NH2
YOW += y[17]*imw[17]; // NH
YOW += y[18]*imw[18]; // HE
YOW += y[19]*imw[19]; // N2
YOW += y[20]*imw[20]; // H2NO
// PW/RT (see Eq. 7)
PWORT = (*P)/(YOW * 8.31446261815324e+07 * (*T)); 
// multiply by 1e6 so c goes to SI
PWORT *= 1e6; 
// Now compute conversion (and go to SI)
c[0] = PWORT * y[0]*imw[0]; 
c[1] = PWORT * y[1]*imw[1]; 
c[2] = PWORT * y[2]*imw[2]; 
c[3] = PWORT * y[3]*imw[3]; 
c[4] = PWORT * y[4]*imw[4]; 
c[5] = PWORT * y[5]*imw[5]; 
c[6] = PWORT * y[6]*imw[6]; 
c[7] = PWORT * y[7]*imw[7]; 
c[8] = PWORT * y[8]*imw[8]; 
c[9] = PWORT * y[9]*imw[9]; 
c[10] = PWORT * y[10]*imw[10]; 
c[11] = PWORT * y[11]*imw[11]; 
c[12] = PWORT * y[12]*imw[12]; 
c[13] = PWORT * y[13]*imw[13]; 
c[14] = PWORT * y[14]*imw[14]; 
c[15] = PWORT * y[15]*imw[15]; 
c[16] = PWORT * y[16]*imw[16]; 
c[17] = PWORT * y[17]*imw[17]; 
c[18] = PWORT * y[18]*imw[18]; 
c[19] = PWORT * y[19]*imw[19]; 
c[20] = PWORT * y[20]*imw[20]; 

// convert to chemkin units
productionRate(wdot, c, *T);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
wdot[id] *= 1.0e-6;
}
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKWXP(amrex::Real *  P, amrex::Real *  T, amrex::Real *  x,  amrex::Real *  wdot)
{
int id; // loop counter
amrex::Real c[21]; // temporary storage
amrex::Real PORT = 1e6 * (*P)/(8.31446261815324e+07 * (*T)); // 1e6 * P/RT so c goes to SI units

// Compute conversion, see Eq 10
for (id = 0; id < 21; ++id) {
c[id] = x[id]*PORT;
}

// convert to chemkin units
productionRate(wdot, c, *T);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
wdot[id] *= 1.0e-6;
}
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKWYR(amrex::Real *  rho, amrex::Real *  T, amrex::Real *  y,  amrex::Real *  wdot)
{
int id; // loop counter
amrex::Real c[21]; // temporary storage
amrex::Real imw[21];

get_imw(imw);

// See Eq 8 with an extra 1e6 so c goes to SI
c[0] = 1e6 * (*rho) * y[0]*imw[0]; 
c[1] = 1e6 * (*rho) * y[1]*imw[1]; 
c[2] = 1e6 * (*rho) * y[2]*imw[2]; 
c[3] = 1e6 * (*rho) * y[3]*imw[3]; 
c[4] = 1e6 * (*rho) * y[4]*imw[4]; 
c[5] = 1e6 * (*rho) * y[5]*imw[5]; 
c[6] = 1e6 * (*rho) * y[6]*imw[6]; 
c[7] = 1e6 * (*rho) * y[7]*imw[7]; 
c[8] = 1e6 * (*rho) * y[8]*imw[8]; 
c[9] = 1e6 * (*rho) * y[9]*imw[9]; 
c[10] = 1e6 * (*rho) * y[10]*imw[10]; 
c[11] = 1e6 * (*rho) * y[11]*imw[11]; 
c[12] = 1e6 * (*rho) * y[12]*imw[12]; 
c[13] = 1e6 * (*rho) * y[13]*imw[13]; 
c[14] = 1e6 * (*rho) * y[14]*imw[14]; 
c[15] = 1e6 * (*rho) * y[15]*imw[15]; 
c[16] = 1e6 * (*rho) * y[16]*imw[16]; 
c[17] = 1e6 * (*rho) * y[17]*imw[17]; 
c[18] = 1e6 * (*rho) * y[18]*imw[18]; 
c[19] = 1e6 * (*rho) * y[19]*imw[19]; 
c[20] = 1e6 * (*rho) * y[20]*imw[20]; 

// call productionRate
productionRate(wdot, c, *T);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
wdot[id] *= 1.0e-6;
}
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKWXR(amrex::Real *  rho, amrex::Real *  T, amrex::Real *  x,  amrex::Real *  wdot)
{
int id; // loop counter
amrex::Real c[21]; // temporary storage
amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
amrex::Real ROW; 
// Compute mean molecular wt first
XW += x[0]*30.006000; // NO
XW += x[1]*44.013000; // N2O
XW += x[2]*31.998000; // O2
XW += x[3]*2.016000; // H2
XW += x[4]*39.950000; // AR
XW += x[5]*1.008000; // H
XW += x[6]*15.999000; // O
XW += x[7]*17.007000; // OH
XW += x[8]*33.006000; // HO2
XW += x[9]*18.015000; // H2O
XW += x[10]*34.014000; // H2O2
XW += x[11]*46.005000; // NO2
XW += x[12]*17.031000; // NH3
XW += x[13]*31.014000; // HNO
XW += x[14]*14.007000; // N
XW += x[15]*29.022000; // NNH
XW += x[16]*16.023000; // NH2
XW += x[17]*15.015000; // NH
XW += x[18]*4.002602; // HE
XW += x[19]*28.014000; // N2
XW += x[20]*32.022000; // H2NO
// Extra 1e6 factor to take c to SI
ROW = 1e6*(*rho) / XW;

// Compute conversion, see Eq 11
for (id = 0; id < 21; ++id) {
c[id] = x[id]*ROW;
}

// convert to chemkin units
productionRate(wdot, c, *T);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
wdot[id] *= 1.0e-6;
}
}

//  species unit charge number 
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRG(int * kcharge)
{
kcharge[0] = 0;// NO
kcharge[1] = 0;// N2O
kcharge[2] = 0;// O2
kcharge[3] = 0;// H2
kcharge[4] = 0;// AR
kcharge[5] = 0;// H
kcharge[6] = 0;// O
kcharge[7] = 0;// OH
kcharge[8] = 0;// HO2
kcharge[9] = 0;// H2O
kcharge[10] = 0;// H2O2
kcharge[11] = 0;// NO2
kcharge[12] = 0;// NH3
kcharge[13] = 0;// HNO
kcharge[14] = 0;// N
kcharge[15] = 0;// NNH
kcharge[16] = 0;// NH2
kcharge[17] = 0;// NH
kcharge[18] = 0;// HE
kcharge[19] = 0;// N2
kcharge[20] = 0;// H2NO
}

//  species charge per unit mass 
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRGMASS(amrex::Real * zk)
{
amrex::Real imw[21];
get_imw(imw);

int kchrg[21];
CKCHRG(kchrg);

for (int id = 0; id < 21; ++id) {
zk[id] = 6.02214076e+23 * 1.60217663e-19 * kchrg[id] * imw[id];
}
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void dcvpRdT(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+1.25306300e-03
-6.60550200e-06 * tc[1]
+1.56534300e-08 * tc[2]
-9.78505200e-12 * tc[3];
// species 1: N2O
species[1] =
+9.49219300e-03
-1.95855500e-05 * tc[1]
+1.87915350e-08 * tc[2]
-7.60730400e-12 * tc[3];
// species 2: O2
species[2] =
-2.99673416e-03
+1.96946040e-05 * tc[1]
-2.90438853e-08 * tc[2]
+1.29749135e-11 * tc[3];
// species 3: H2
species[3] =
+7.98052075e-03
-3.89563020e-05 * tc[1]
+6.04716282e-08 * tc[2]
-2.95044704e-11 * tc[3];
// species 4: AR
species[4] =
+0.00000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3];
// species 5: H
species[5] =
+0.00000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3];
// species 6: O
species[6] =
-3.27931884e-03
+1.32861279e-05 * tc[1]
-1.83841987e-08 * tc[2]
+8.45063884e-12 * tc[3];
// species 7: OH
species[7] =
-2.40106655e-03
+9.23328066e-06 * tc[1]
-1.16374892e-08 * tc[2]
+5.45278008e-12 * tc[3];
// species 8: HO2
species[8] =
-4.74912097e-03
+4.23165810e-05 * tc[1]
-7.28291742e-08 * tc[2]
+3.71690090e-11 * tc[3];
// species 9: H2O
species[9] =
-2.03640170e-03
+1.30406832e-05 * tc[1]
-1.64637807e-08 * tc[2]
+7.08787200e-12 * tc[3];
// species 10: H2O2
species[10] =
-8.47390622e-04
+3.52808646e-05 * tc[1]
-6.80288832e-08 * tc[2]
+3.63580063e-11 * tc[3];
// species 11: NO2
species[11] =
+7.83850100e-03
-1.61277300e-05 * tc[1]
+1.84851450e-08 * tc[2]
-9.28060000e-12 * tc[3];
// species 12: NH3
species[12] =
+1.01147600e-02
-2.93053000e-05 * tc[1]
+4.34170500e-08 * tc[2]
-2.13140360e-11 * tc[3];
// species 13: HNO
species[13] =
+6.60964600e-03
-1.86004460e-05 * tc[1]
+2.83139400e-08 * tc[2]
-1.50125840e-11 * tc[3];
// species 14: N
species[14] =
-2.18001800e-05
+1.08410580e-07 * tc[1]
-1.69426800e-10 * tc[2]
+8.39961600e-14 * tc[3];
// species 15: NNH
species[15] =
+2.05358700e-03
+1.43408200e-06 * tc[1]
+1.47640440e-09 * tc[2]
-3.86846800e-12 * tc[3];
// species 16: NH2
species[16] =
+3.29954000e-03
-1.32272000e-05 * tc[1]
+2.57728410e-08 * tc[2]
-1.42881880e-11 * tc[3];
// species 17: NH
species[17] =
+3.11791970e-04
-2.97809680e-06 * tc[1]
+7.44493260e-09 * tc[2]
-4.14278680e-12 * tc[3];
// species 18: HE
species[18] =
+0.00000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3];
// species 19: N2
species[19] =
-1.23660988e-04
-1.00599887e-06 * tc[1]
+7.30591836e-09 * tc[2]
-5.63524940e-12 * tc[3];
} else {
// species 0: NO
species[0] =
+1.26913800e-03
-1.00317800e-06 * tc[1]
+2.75078490e-10 * tc[2]
-2.51016760e-14 * tc[3];
// species 1: N2O
species[1] =
+2.87371400e-03
-2.39499200e-06 * tc[1]
+6.75165600e-10 * tc[2]
-6.30134800e-14 * tc[3];
// species 2: O2
species[2] =
+6.56365811e-04
-2.82299254e-07 * tc[1]
+6.17393805e-11 * tc[2]
-5.19653744e-15 * tc[3];
// species 3: H2
species[3] =
+8.26608026e-04
-2.92804728e-07 * tc[1]
+4.62301242e-11 * tc[2]
-2.75521920e-15 * tc[3];
// species 4: AR
species[4] =
+0.00000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3];
// species 5: H
species[5] =
+0.00000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3];
// species 6: O
species[6] =
-2.73162486e-05
-8.38059040e-09 * tc[1]
+1.48644553e-11 * tc[2]
-1.91821478e-15 * tc[3];
// species 7: OH
species[7] =
+1.10741289e-03
-5.88000418e-07 * tc[1]
+1.26209619e-10 * tc[2]
-9.69159560e-15 * tc[3];
// species 8: HO2
species[8] =
+1.88117627e-03
-6.92554572e-07 * tc[1]
+5.83972647e-11 * tc[2]
+7.05027620e-16 * tc[3];
// species 9: H2O
species[9] =
+2.97318160e-03
-1.54753778e-06 * tc[1]
+2.83300542e-10 * tc[2]
-1.70759964e-14 * tc[3];
// species 10: H2O2
species[10] =
+4.05326003e-03
-2.59689460e-06 * tc[1]
+5.94634200e-10 * tc[2]
-4.55875168e-14 * tc[3];
// species 11: NO2
species[11] =
+2.46242900e-03
-2.08451800e-06 * tc[1]
+5.93070600e-10 * tc[2]
-5.56686800e-14 * tc[3];
// species 12: NH3
species[12] =
+6.05916600e-03
-4.00995400e-06 * tc[1]
+9.40800900e-10 * tc[2]
-7.75326800e-14 * tc[3];
// species 13: HNO
species[13] =
+3.21248600e-03
-2.52067400e-06 * tc[1]
+6.80189400e-10 * tc[2]
-6.14494400e-14 * tc[3];
// species 14: N
species[14] =
+1.06614600e-04
-1.49306740e-07 * tc[1]
+5.63895600e-11 * tc[2]
-4.10393600e-15 * tc[3];
// species 15: NNH
species[15] =
+1.61438800e-03
-3.26578800e-07 * tc[1]
-2.56795380e-10 * tc[2]
+6.45916400e-14 * tc[3];
// species 16: NH2
species[16] =
+2.93269900e-03
-1.81272000e-06 * tc[1]
+4.85177100e-10 * tc[2]
-4.81680000e-14 * tc[3];
// species 17: NH
species[17] =
+1.32984290e-03
-8.49560940e-07 * tc[1]
+2.35045512e-10 * tc[2]
-2.20177880e-14 * tc[3];
// species 18: HE
species[18] =
+0.00000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3];
// species 19: N2
species[19] =
+1.39690040e-03
-9.85263206e-07 * tc[1]
+2.35803059e-10 * tc[2]
-1.84302082e-14 * tc[3];
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 20: H2NO
species[20] =
+8.59603500e-03
-1.09420600e-05 * tc[1]
+6.82874700e-09 * tc[2]
-1.85922920e-12 * tc[3];
} else {
// species 20: H2NO
species[20] =
+2.29883700e-03
-3.54889200e-07 * tc[1]
-3.31044600e-10 * tc[2]
+7.43904800e-14 * tc[3];
}
return;
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void aJacobian_precond(amrex::Real *  J, amrex::Real *  sc, amrex::Real T, const int HP)
{

for (int i=0; i<484; i++) {
J[i] = 0.0;
}

amrex::Real wdot[21];
for (int k=0; k<21; k++) {
wdot[k] = 0.0;
}

const amrex::Real tc[5] = { log(T), T, T*T, T*T*T, T*T*T*T };// temperature cache
amrex::Real invT = 1.0 / tc[1];
amrex::Real invT2 = invT * invT;

// reference concentration: P_atm / (RT) in inverse mol/m^3
amrex::Real refC = 101325 / 8.31446 / T;
amrex::Real refCinv = 1.0 / refC;

// compute the mixture concentration
amrex::Real mixture = 0.0;
for (int k = 0; k < 21; ++k) {
mixture += sc[k];
}

// compute the Gibbs free energy
amrex::Real g_RT[21];
gibbs(g_RT, tc);

// compute the species enthalpy
amrex::Real h_RT[21];
speciesEnthalpy(h_RT, tc);

amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
amrex::Real dqdci, dcdc_fac, dqdc[21];
amrex::Real Pr, fPr, F, k_0, logPr;
amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
const amrex::Real ln10 = log(10.0);
const amrex::Real log10e = 1.0/log(10.0);
// reaction 8: H + O2 (+M) <=> HO2 (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.7 - 1)*sc[4] + ( 16 - 1)*sc[9] + ( 0.7 - 1)*sc[18];
// forward
phi_f = sc[2]*sc[5];
k_f = 4650000
            * exp(0.44 * tc[0]);
dlnkfdT = 0.44 * invT;
// pressure-fall-off
k_0 = 5.75e+19 * exp(-1.4 * tc[0]);
Pr = 1e-12 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = -1.4 * invT;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Troe form
logPr = log10(Pr);
Fcent1 = (1.-0.5)*exp(-T/1e-30);
Fcent2 = 0.5 * exp(-T/1e+30);
Fcent3 = 0.;
Fcent = Fcent1 + Fcent2 + Fcent3;
logFcent = log10(Fcent);
troe_c = -.4 - .67 * logFcent;
troe_n = .75 - 1.27 * logFcent;
troePr_den = 1.0 / (troe_n - .14*(troe_c + logPr));
troePr = (troe_c + logPr) * troePr_den;
troe = 1.0 / (1.0 + troePr*troePr);
F = exp(M_LN10 * logFcent * troe);
dlogFcentdT = log10e/Fcent*( 
    -Fcent1/1e-30
    -Fcent2/1e+30
);
dlogFdcn_fac = 2.0 * logFcent * troe*troe * troePr * troePr_den;
dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
dlogFdn = dlogFdcn_fac * troePr;
dlogFdlogPr = dlogFdc;
dlogFdT = dlogFcentdT*(troe - 0.67*dlogFdc - 1.27*dlogFdn) + dlogFdlogPr * dlogPrdT;
// reverse
phi_r = sc[8];
Kc = refCinv * exp(g_RT[2] + g_RT[5] - g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[8]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[2] -= q;// O2
wdot[5] -= q;// H
wdot[8] += q;// HO2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = 0.0;
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac;
dqdc[2] = dcdc_fac + k_f*sc[5];
dqdc[3] = 2.5*dcdc_fac;
dqdc[4] = 0.7*dcdc_fac;
dqdc[5] = dcdc_fac + k_f*sc[2];
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac - k_r;
dqdc[9] = 16*dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = 0.7*dcdc_fac;
dqdc[19] = dcdc_fac;
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+2] -= dqdc[k];
J[22*k+5] -= dqdc[k];
J[22*k+8] += dqdc[k];
}
J[464] -= dqdT;// dwdot[O2]/dT
J[467] -= dqdT;// dwdot[H]/dT
J[470] += dqdT;// dwdot[HO2]/dT

// reaction 15: 2 OH (+M) <=> H2O2 (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.7 - 1)*sc[4] + ( 6 - 1)*sc[9] + ( 6 - 1)*sc[10] + ( 0.4 - 1)*sc[18];
// forward
phi_f = (sc[7] * sc[7]);
k_f = 95500000
            * exp(-0.27 * tc[0]);
dlnkfdT = -0.27 * invT;
// pressure-fall-off
k_0 = 2.76e+25 * exp(-3.2 * tc[0]);
Pr = 1e-12 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = -3.2 * invT;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Troe form
logPr = log10(Pr);
Fcent1 = (1.-0.57)*exp(-T/1e+30);
Fcent2 = 0.57 * exp(-T/1e-30);
Fcent3 = 0.;
Fcent = Fcent1 + Fcent2 + Fcent3;
logFcent = log10(Fcent);
troe_c = -.4 - .67 * logFcent;
troe_n = .75 - 1.27 * logFcent;
troePr_den = 1.0 / (troe_n - .14*(troe_c + logPr));
troePr = (troe_c + logPr) * troePr_den;
troe = 1.0 / (1.0 + troePr*troePr);
F = exp(M_LN10 * logFcent * troe);
dlogFcentdT = log10e/Fcent*( 
    -Fcent1/1e+30
    -Fcent2/1e-30
);
dlogFdcn_fac = 2.0 * logFcent * troe*troe * troePr * troePr_den;
dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
dlogFdn = dlogFdcn_fac * troePr;
dlogFdlogPr = dlogFdc;
dlogFdT = dlogFcentdT*(troe - 0.67*dlogFdc - 1.27*dlogFdn) + dlogFdlogPr * dlogPrdT;
// reverse
phi_r = sc[10];
Kc = refCinv * exp(2.000000*g_RT[7] - g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[7]) + (h_RT[10]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[7] -= 2 * q;// OH
wdot[10] += q;// H2O2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = 0.0;
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac;
dqdc[2] = dcdc_fac;
dqdc[3] = 2.5*dcdc_fac;
dqdc[4] = 0.7*dcdc_fac;
dqdc[5] = dcdc_fac;
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac + k_f*2.000000*sc[7];
dqdc[8] = dcdc_fac;
dqdc[9] = 6*dcdc_fac;
dqdc[10] = 6*dcdc_fac - k_r;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = 0.4*dcdc_fac;
dqdc[19] = dcdc_fac;
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+7] += -2 * dqdc[k];
J[22*k+10] += dqdc[k];
}
J[469] += -2 * dqdT;// dwdot[OH]/dT
J[472] += dqdT;// dwdot[H2O2]/dT

// reaction 41: NNH (+M) <=> H + N2 (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture;
// forward
phi_f = sc[15];
k_f = 65000000
           ;
dlnkfdT = 0.0;
// pressure-fall-off
k_0 = 50000000000000;
Pr = 1e-6 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = 0.0;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Lindemann form
F = 1.0;
dlogFdlogPr = 0.0;
dlogFdT = 0.0;
// reverse
phi_r = sc[5]*sc[19];
Kc = refC * exp(-g_RT[5] + g_RT[15] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[15]) + (h_RT[5] + h_RT[19]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[5] += q;// H
wdot[15] -= q;// NNH
wdot[19] += q;// N2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = 0.0;
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac;
dqdc[2] = dcdc_fac;
dqdc[3] = dcdc_fac;
dqdc[4] = dcdc_fac;
dqdc[5] = dcdc_fac - k_r*sc[19];
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac;
dqdc[9] = dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac + k_f;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac;
dqdc[19] = dcdc_fac - k_r*sc[5];
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+5] += dqdc[k];
J[22*k+15] -= dqdc[k];
J[22*k+19] += dqdc[k];
}
J[467] += dqdT;// dwdot[H]/dT
J[477] -= dqdT;// dwdot[NNH]/dT
J[481] += dqdT;// dwdot[N2]/dT

// reaction 48: H + NO (+M) <=> HNO (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 1.5 - 1)*sc[2] + sc[3] + ( 10 - 1)*sc[9];
// forward
phi_f = sc[0]*sc[5];
k_f = 1500000000
            * exp(-0.4 * tc[0]);
dlnkfdT = -0.4 * invT;
// pressure-fall-off
k_0 = 230000000000000 * exp(0.206 * tc[0] - (-782.486818826365) * invT);
Pr = 1e-12 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = 0.206 * invT + (-782.486818826365) * invT2;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Lindemann form
F = 1.0;
dlogFdlogPr = 0.0;
dlogFdT = 0.0;
// reverse
phi_r = sc[13];
Kc = refCinv * exp(g_RT[0] + g_RT[5] - g_RT[13]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[5]) + (h_RT[13]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[0] -= q;// NO
wdot[5] -= q;// H
wdot[13] += q;// HNO
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = 0.0;
dqdc[0] = dcdc_fac + k_f*sc[5];
dqdc[1] = dcdc_fac;
dqdc[2] = 1.5*dcdc_fac;
dqdc[3] = 2*dcdc_fac;
dqdc[4] = dcdc_fac;
dqdc[5] = dcdc_fac + k_f*sc[0];
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac;
dqdc[9] = 10*dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac - k_r;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac;
dqdc[19] = dcdc_fac;
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+0] -= dqdc[k];
J[22*k+5] -= dqdc[k];
J[22*k+13] += dqdc[k];
}
J[462] -= dqdT;// dwdot[NO]/dT
J[467] -= dqdT;// dwdot[H]/dT
J[475] += dqdT;// dwdot[HNO]/dT

// reaction 59: N2O (+M) <=> N2 + O (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture;
// forward
phi_f = sc[1];
k_f = 800000000000
            * exp(- (31511.1760043586) * invT);
dlnkfdT = (31511.1760043586) * invT2;
// pressure-fall-off
k_0 = 200000000000000 * exp(-(28504.3859758422) * invT);
Pr = 1e-6 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = (28504.3859758422) * invT2;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Lindemann form
F = 1.0;
dlogFdlogPr = 0.0;
dlogFdT = 0.0;
// reverse
phi_r = sc[6]*sc[19];
Kc = refC * exp(g_RT[1] - g_RT[6] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1]) + (h_RT[6] + h_RT[19]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[1] -= q;// N2O
wdot[6] += q;// O
wdot[19] += q;// N2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = 0.0;
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac + k_f;
dqdc[2] = dcdc_fac;
dqdc[3] = dcdc_fac;
dqdc[4] = dcdc_fac;
dqdc[5] = dcdc_fac;
dqdc[6] = dcdc_fac - k_r*sc[19];
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac;
dqdc[9] = dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac;
dqdc[19] = dcdc_fac - k_r*sc[6];
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+1] -= dqdc[k];
J[22*k+6] += dqdc[k];
J[22*k+19] += dqdc[k];
}
J[463] -= dqdT;// dwdot[N2O]/dT
J[468] += dqdT;// dwdot[O]/dT
J[481] += dqdT;// dwdot[N2]/dT

// reaction 4: 2 H + M <=> H2 + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.5 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.5 - 1)*sc[18];
// forward
phi_f = (sc[5] * sc[5]);
k_f = 1300000
            * exp(-1 * tc[0]);
dlnkfdT = -1 * invT;
// reverse
phi_r = sc[3];
Kc = refCinv * exp(-g_RT[3] + 2.000000*g_RT[5]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[5]) + (h_RT[3]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= 2 * q;// H
// for convenience
k_f *= alpha;
k_r *= alpha;
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = 2.5*q_nocor - k_r;
dqdc[4] = 0.5*q_nocor;
dqdc[5] = q_nocor + k_f*2.000000*sc[5];
dqdc[6] = q_nocor;
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = 0.5*q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+3] += dqdc[k];
J[22*k+5] += -2 * dqdc[k];
}
J[465] += dqdT;// dwdot[H2]/dT
J[467] += -2 * dqdT;// dwdot[H]/dT

// reaction 5: H + OH + M <=> H2O + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.38 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.38 - 1)*sc[18];
// forward
phi_f = sc[5]*sc[7];
k_f = 40000000000
            * exp(-2 * tc[0]);
dlnkfdT = -2 * invT;
// reverse
phi_r = sc[9];
Kc = refCinv * exp(g_RT[5] + g_RT[7] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[7]) + (h_RT[9]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[7] -= q;// OH
wdot[9] += q;// H2O
// for convenience
k_f *= alpha;
k_r *= alpha;
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = 2.5*q_nocor;
dqdc[4] = 0.38*q_nocor;
dqdc[5] = q_nocor + k_f*sc[7];
dqdc[6] = q_nocor;
dqdc[7] = q_nocor + k_f*sc[5];
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor - k_r;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = 0.38*q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+5] -= dqdc[k];
J[22*k+7] -= dqdc[k];
J[22*k+9] += dqdc[k];
}
J[467] -= dqdT;// dwdot[H]/dT
J[469] -= dqdT;// dwdot[OH]/dT
J[471] += dqdT;// dwdot[H2O]/dT

// reaction 6: 2 O + M <=> O2 + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.2 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.2 - 1)*sc[18];
// forward
phi_f = (sc[6] * sc[6]);
k_f = 6170
            * exp(-0.5 * tc[0]);
dlnkfdT = -0.5 * invT;
// reverse
phi_r = sc[2];
Kc = refCinv * exp(-g_RT[2] + 2.000000*g_RT[6]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[6]) + (h_RT[2]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[6] -= 2 * q;// O
// for convenience
k_f *= alpha;
k_r *= alpha;
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor - k_r;
dqdc[3] = 2.5*q_nocor;
dqdc[4] = 0.2*q_nocor;
dqdc[5] = q_nocor;
dqdc[6] = q_nocor + k_f*2.000000*sc[6];
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = 0.2*q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+2] += dqdc[k];
J[22*k+6] += -2 * dqdc[k];
}
J[464] += dqdT;// dwdot[O2]/dT
J[468] += -2 * dqdT;// dwdot[O]/dT

// reaction 7: H + O + M <=> OH + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.75 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.75 - 1)*sc[18];
// forward
phi_f = sc[5]*sc[6];
k_f = 4710000
            * exp(-1 * tc[0]);
dlnkfdT = -1 * invT;
// reverse
phi_r = sc[7];
Kc = refCinv * exp(g_RT[5] + g_RT[6] - g_RT[7]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[6]) + (h_RT[7]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[6] -= q;// O
wdot[7] += q;// OH
// for convenience
k_f *= alpha;
k_r *= alpha;
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = 2.5*q_nocor;
dqdc[4] = 0.75*q_nocor;
dqdc[5] = q_nocor + k_f*sc[6];
dqdc[6] = q_nocor + k_f*sc[5];
dqdc[7] = q_nocor - k_r;
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = 0.75*q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+5] -= dqdc[k];
J[22*k+6] -= dqdc[k];
J[22*k+7] += dqdc[k];
}
J[467] -= dqdT;// dwdot[H]/dT
J[468] -= dqdT;// dwdot[O]/dT
J[469] += dqdT;// dwdot[OH]/dT

// reaction 23: NH3 + M <=> H + NH2 + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture;
// forward
phi_f = sc[12];
k_f = 22000000000
            * exp(- (47026.2214081167) * invT);
dlnkfdT = (47026.2214081167) * invT2;
// reverse
phi_r = sc[5]*sc[16];
Kc = refC * exp(-g_RT[5] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[12]) + (h_RT[5] + h_RT[16]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += q;// H
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// for convenience
k_f *= alpha;
k_r *= alpha;
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = q_nocor;
dqdc[4] = q_nocor;
dqdc[5] = q_nocor - k_r*sc[16];
dqdc[6] = q_nocor;
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor + k_f;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor - k_r*sc[5];
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+5] += dqdc[k];
J[22*k+12] -= dqdc[k];
J[22*k+16] += dqdc[k];
}
J[467] += dqdT;// dwdot[H]/dT
J[474] -= dqdT;// dwdot[NH3]/dT
J[478] += dqdT;// dwdot[NH2]/dT

// reaction 51: NO2 + M <=> NO + O + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 16.25 - 1)*sc[9];
// forward
phi_f = sc[11];
k_f = 11000000000
            * exp(- (33194.9792254745) * invT);
dlnkfdT = (33194.9792254745) * invT2;
// reverse
phi_r = sc[0]*sc[6];
Kc = refC * exp(-g_RT[0] - g_RT[6] + g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[11]) + (h_RT[0] + h_RT[6]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[6] += q;// O
wdot[11] -= q;// NO2
// for convenience
k_f *= alpha;
k_r *= alpha;
dqdc[0] = q_nocor - k_r*sc[6];
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = q_nocor;
dqdc[4] = q_nocor;
dqdc[5] = q_nocor;
dqdc[6] = q_nocor - k_r*sc[0];
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = 16.25*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor + k_f;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+0] += dqdc[k];
J[22*k+6] += dqdc[k];
J[22*k+11] -= dqdc[k];
}
J[462] += dqdT;// dwdot[NO]/dT
J[468] += dqdT;// dwdot[O]/dT
J[473] -= dqdT;// dwdot[NO2]/dT

// reaction 0: H + O2 <=> O + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[5];
k_f = 35200000000
            * exp(-0.7 * tc[0] - (8589.80280978675) * invT);
dlnkfdT = -0.7 * invT + (8589.80280978675) * invT2;
// reverse
phi_r = sc[6]*sc[7];
Kc = exp(g_RT[2] + g_RT[5] - g_RT[6] - g_RT[7]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[6] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[5] -= q;// H
wdot[6] += q;// O
wdot[7] += q;// OH
// d()/d[O2]
dqdci =  + k_f*sc[5];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[49] -= dqdci;               // dwdot[H]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[51] += dqdci;               // dwdot[OH]/d[O2]
// d()/d[H]
dqdci =  + k_f*sc[2];
J[112] -= dqdci;              // dwdot[O2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[116] += dqdci;              // dwdot[O]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
// d()/d[O]
dqdci =  - k_r*sc[7];
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[137] -= dqdci;              // dwdot[H]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[6];
J[156] -= dqdci;              // dwdot[O2]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[160] += dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT

// reaction 1: H2 + O <=> H + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[3]*sc[6];
k_f = 0.0506
            * exp(2.67 * tc[0] - (3165.54985441114) * invT);
dlnkfdT = 2.67 * invT + (3165.54985441114) * invT2;
// reverse
phi_r = sc[5]*sc[7];
Kc = exp(g_RT[3] - g_RT[5] + g_RT[6] - g_RT[7]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[3] + h_RT[6]) + (h_RT[5] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] -= q;// H2
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[7] += q;// OH
// d()/d[H2]
dqdci =  + k_f*sc[6];
J[69] -= dqdci;               // dwdot[H2]/d[H2]
J[71] += dqdci;               // dwdot[H]/d[H2]
J[72] -= dqdci;               // dwdot[O]/d[H2]
J[73] += dqdci;               // dwdot[OH]/d[H2]
// d()/d[H]
dqdci =  - k_r*sc[7];
J[113] -= dqdci;              // dwdot[H2]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[3];
J[135] -= dqdci;              // dwdot[H2]/d[O]
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[5];
J[157] -= dqdci;              // dwdot[H2]/d[OH]
J[159] += dqdci;              // dwdot[H]/d[OH]
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
// d()/dT
J[465] -= dqdT;               // dwdot[H2]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT

// reaction 2: H2 + OH <=> H + H2O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[3]*sc[7];
k_f = 1170
            * exp(1.3 * tc[0] - (1829.33348086658) * invT);
dlnkfdT = 1.3 * invT + (1829.33348086658) * invT2;
// reverse
phi_r = sc[5]*sc[9];
Kc = exp(g_RT[3] - g_RT[5] + g_RT[7] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[3] + h_RT[7]) + (h_RT[5] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] -= q;// H2
wdot[5] += q;// H
wdot[7] -= q;// OH
wdot[9] += q;// H2O
// d()/d[H2]
dqdci =  + k_f*sc[7];
J[69] -= dqdci;               // dwdot[H2]/d[H2]
J[71] += dqdci;               // dwdot[H]/d[H2]
J[73] -= dqdci;               // dwdot[OH]/d[H2]
J[75] += dqdci;               // dwdot[H2O]/d[H2]
// d()/d[H]
dqdci =  - k_r*sc[9];
J[113] -= dqdci;              // dwdot[H2]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[117] -= dqdci;              // dwdot[OH]/d[H]
J[119] += dqdci;              // dwdot[H2O]/d[H]
// d()/d[OH]
dqdci =  + k_f*sc[3];
J[157] -= dqdci;              // dwdot[H2]/d[OH]
J[159] += dqdci;              // dwdot[H]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[5];
J[201] -= dqdci;              // dwdot[H2]/d[H2O]
J[203] += dqdci;              // dwdot[H]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[465] -= dqdT;               // dwdot[H2]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 3: H2O + O <=> 2 OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[9];
k_f = 0.7
            * exp(2.33 * tc[0] - (7320.93695479349) * invT);
dlnkfdT = 2.33 * invT + (7320.93695479349) * invT2;
// reverse
phi_r = (sc[7] * sc[7]);
Kc = exp(g_RT[6] - 2.000000*g_RT[7] + g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[9]) + (2.000000*h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += 2 * q;// OH
wdot[9] -= q;// H2O
// d()/d[O]
dqdci =  + k_f*sc[9];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += 2 * dqdci;          // dwdot[OH]/d[O]
J[141] -= dqdci;              // dwdot[H2O]/d[O]
// d()/d[OH]
dqdci =  - k_r*2.000000*sc[7];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += 2 * dqdci;          // dwdot[OH]/d[OH]
J[163] -= dqdci;              // dwdot[H2O]/d[OH]
// d()/d[H2O]
dqdci =  + k_f*sc[6];
J[204] -= dqdci;              // dwdot[O]/d[H2O]
J[205] += 2 * dqdci;          // dwdot[OH]/d[H2O]
J[207] -= dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += 2 * dqdT;           // dwdot[OH]/dT
J[471] -= dqdT;               // dwdot[H2O]/dT

// reaction 9: H + HO2 <=> 2 OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[8];
k_f = 70800000
            * exp(- (148.413691245786) * invT);
dlnkfdT = (148.413691245786) * invT2;
// reverse
phi_r = (sc[7] * sc[7]);
Kc = exp(g_RT[5] - 2.000000*g_RT[7] + g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (2.000000*h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[7] += 2 * q;// OH
wdot[8] -= q;// HO2
// d()/d[H]
dqdci =  + k_f*sc[8];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += 2 * dqdci;          // dwdot[OH]/d[H]
J[118] -= dqdci;              // dwdot[HO2]/d[H]
// d()/d[OH]
dqdci =  - k_r*2.000000*sc[7];
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += 2 * dqdci;          // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[5];
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[183] += 2 * dqdci;          // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
// d()/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += 2 * dqdT;           // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT

// reaction 10: H + HO2 <=> H2 + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[8];
k_f = 16600000
            * exp(- (414.096994290704) * invT);
dlnkfdT = (414.096994290704) * invT2;
// reverse
phi_r = sc[2]*sc[3];
Kc = exp(-g_RT[2] - g_RT[3] + g_RT[5] + g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (h_RT[2] + h_RT[3]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[8] -= q;// HO2
// d()/d[O2]
dqdci =  - k_r*sc[3];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[47] += dqdci;               // dwdot[H2]/d[O2]
J[49] -= dqdci;               // dwdot[H]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
// d()/d[H2]
dqdci =  - k_r*sc[2];
J[68] += dqdci;               // dwdot[O2]/d[H2]
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[74] -= dqdci;               // dwdot[HO2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[8];
J[112] += dqdci;              // dwdot[O2]/d[H]
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[118] -= dqdci;              // dwdot[HO2]/d[H]
// d()/d[HO2]
dqdci =  + k_f*sc[5];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[179] += dqdci;              // dwdot[H2]/d[HO2]
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT

// reaction 11: H + HO2 <=> H2O + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[8];
k_f = 31000000
            * exp(- (865.955367183394) * invT);
dlnkfdT = (865.955367183394) * invT2;
// reverse
phi_r = sc[6]*sc[9];
Kc = exp(g_RT[5] - g_RT[6] + g_RT[8] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (h_RT[6] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[6] += q;// O
wdot[8] -= q;// HO2
wdot[9] += q;// H2O
// d()/d[H]
dqdci =  + k_f*sc[8];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[116] += dqdci;              // dwdot[O]/d[H]
J[118] -= dqdci;              // dwdot[HO2]/d[H]
J[119] += dqdci;              // dwdot[H2O]/d[H]
// d()/d[O]
dqdci =  - k_r*sc[9];
J[137] -= dqdci;              // dwdot[H]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[140] -= dqdci;              // dwdot[HO2]/d[O]
J[141] += dqdci;              // dwdot[H2O]/d[O]
// d()/d[HO2]
dqdci =  + k_f*sc[5];
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[182] += dqdci;              // dwdot[O]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[6];
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[204] += dqdci;              // dwdot[O]/d[H2O]
J[206] -= dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 12: HO2 + O <=> O2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[8];
k_f = 20000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[2]*sc[7];
Kc = exp(-g_RT[2] + g_RT[6] - g_RT[7] + g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[8]) + (h_RT[2] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[8] -= q;// HO2
// d()/d[O2]
dqdci =  - k_r*sc[7];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[50] -= dqdci;               // dwdot[O]/d[O2]
J[51] += dqdci;               // dwdot[OH]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
// d()/d[O]
dqdci =  + k_f*sc[8];
J[134] += dqdci;              // dwdot[O2]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[140] -= dqdci;              // dwdot[HO2]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[2];
J[156] += dqdci;              // dwdot[O2]/d[OH]
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[6];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[182] -= dqdci;              // dwdot[O]/d[HO2]
J[183] += dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT

// reaction 13: HO2 + OH <=> H2O + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[8];
k_f = 7000000
            * exp(- (-550.846123223136) * invT);
dlnkfdT = (-550.846123223136) * invT2;
// reverse
phi_r = sc[2]*sc[9];
Kc = exp(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[8]) + (h_RT[2] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[7] -= q;// OH
wdot[8] -= q;// HO2
wdot[9] += q;// H2O
// d()/d[O2]
dqdci =  - k_r*sc[9];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[51] -= dqdci;               // dwdot[OH]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
J[53] += dqdci;               // dwdot[H2O]/d[O2]
// d()/d[OH]
dqdci =  + k_f*sc[8];
J[156] += dqdci;              // dwdot[O2]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[7];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[2];
J[200] += dqdci;              // dwdot[O2]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] -= dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 14: HO2 + OH <=> H2O + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[8];
k_f = 450000000
            * exp(- (5500.02228874582) * invT);
dlnkfdT = (5500.02228874582) * invT2;
// reverse
phi_r = sc[2]*sc[9];
Kc = exp(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[8]) + (h_RT[2] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[7] -= q;// OH
wdot[8] -= q;// HO2
wdot[9] += q;// H2O
// d()/d[O2]
dqdci =  - k_r*sc[9];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[51] -= dqdci;               // dwdot[OH]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
J[53] += dqdci;               // dwdot[H2O]/d[O2]
// d()/d[OH]
dqdci =  + k_f*sc[8];
J[156] += dqdci;              // dwdot[O2]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[7];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[2];
J[200] += dqdci;              // dwdot[O2]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] -= dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 16: 2 HO2 <=> H2O2 + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = (sc[8] * sc[8]);
k_f = 103000000
            * exp(- (5556.55364898232) * invT);
dlnkfdT = (5556.55364898232) * invT2;
// reverse
phi_r = sc[2]*sc[10];
Kc = exp(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[8]) + (h_RT[2] + h_RT[10]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[8] -= 2 * q;// HO2
wdot[10] += q;// H2O2
// d()/d[O2]
dqdci =  - k_r*sc[10];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[52] += -2 * dqdci;          // dwdot[HO2]/d[O2]
J[54] += dqdci;               // dwdot[H2O2]/d[O2]
// d()/d[HO2]
dqdci =  + k_f*2.000000*sc[8];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[184] += -2 * dqdci;         // dwdot[HO2]/d[HO2]
J[186] += dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  - k_r*sc[2];
J[222] += dqdci;              // dwdot[O2]/d[H2O2]
J[228] += -2 * dqdci;         // dwdot[HO2]/d[H2O2]
J[230] += dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[470] += -2 * dqdT;          // dwdot[HO2]/dT
J[472] += dqdT;               // dwdot[H2O2]/dT

// reaction 17: 2 HO2 <=> H2O2 + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = (sc[8] * sc[8]);
k_f = 194000
            * exp(- (-709.002089118902) * invT);
dlnkfdT = (-709.002089118902) * invT2;
// reverse
phi_r = sc[2]*sc[10];
Kc = exp(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[8]) + (h_RT[2] + h_RT[10]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[8] -= 2 * q;// HO2
wdot[10] += q;// H2O2
// d()/d[O2]
dqdci =  - k_r*sc[10];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[52] += -2 * dqdci;          // dwdot[HO2]/d[O2]
J[54] += dqdci;               // dwdot[H2O2]/d[O2]
// d()/d[HO2]
dqdci =  + k_f*2.000000*sc[8];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[184] += -2 * dqdci;         // dwdot[HO2]/d[HO2]
J[186] += dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  - k_r*sc[2];
J[222] += dqdci;              // dwdot[O2]/d[H2O2]
J[228] += -2 * dqdci;         // dwdot[HO2]/d[H2O2]
J[230] += dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[470] += -2 * dqdT;          // dwdot[HO2]/dT
J[472] += dqdT;               // dwdot[H2O2]/dT

// reaction 18: H + H2O2 <=> H2 + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[10];
k_f = 23000000
            * exp(- (4000.59765398081) * invT);
dlnkfdT = (4000.59765398081) * invT2;
// reverse
phi_r = sc[3]*sc[8];
Kc = exp(-g_RT[3] + g_RT[5] - g_RT[8] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[3] + h_RT[8]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[8] += q;// HO2
wdot[10] -= q;// H2O2
// d()/d[H2]
dqdci =  - k_r*sc[8];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[74] += dqdci;               // dwdot[HO2]/d[H2]
J[76] -= dqdci;               // dwdot[H2O2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[10];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[118] += dqdci;              // dwdot[HO2]/d[H]
J[120] -= dqdci;              // dwdot[H2O2]/d[H]
// d()/d[HO2]
dqdci =  - k_r*sc[3];
J[179] += dqdci;              // dwdot[H2]/d[HO2]
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  + k_f*sc[5];
J[223] += dqdci;              // dwdot[H2]/d[H2O2]
J[225] -= dqdci;              // dwdot[H]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 19: H + H2O2 <=> H2O + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[10];
k_f = 10000000
            * exp(- (1804.07703640984) * invT);
dlnkfdT = (1804.07703640984) * invT2;
// reverse
phi_r = sc[7]*sc[9];
Kc = exp(g_RT[5] - g_RT[7] - g_RT[9] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[7] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[9] += q;// H2O
wdot[10] -= q;// H2O2
// d()/d[H]
dqdci =  + k_f*sc[10];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[119] += dqdci;              // dwdot[H2O]/d[H]
J[120] -= dqdci;              // dwdot[H2O2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[9];
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[7];
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[205] += dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[208] -= dqdci;              // dwdot[H2O2]/d[H2O]
// d()/d[H2O2]
dqdci =  + k_f*sc[5];
J[225] -= dqdci;              // dwdot[H]/d[H2O2]
J[227] += dqdci;              // dwdot[OH]/d[H2O2]
J[229] += dqdci;              // dwdot[H2O]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 20: H2O2 + OH <=> H2O + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[10];
k_f = 1740000
            * exp(- (721.627795263942) * invT);
dlnkfdT = (721.627795263942) * invT2;
// reverse
phi_r = sc[8]*sc[9];
Kc = exp(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[10]) + (h_RT[8] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[8] += q;// HO2
wdot[9] += q;// H2O
wdot[10] -= q;// H2O2
// d()/d[OH]
dqdci =  + k_f*sc[10];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[9];
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[8];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] += dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[208] -= dqdci;              // dwdot[H2O2]/d[H2O]
// d()/d[H2O2]
dqdci =  + k_f*sc[7];
J[227] -= dqdci;              // dwdot[OH]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[229] += dqdci;              // dwdot[H2O]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 21: H2O2 + OH <=> H2O + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[10];
k_f = 75900000
            * exp(- (3659.86461739778) * invT);
dlnkfdT = (3659.86461739778) * invT2;
// reverse
phi_r = sc[8]*sc[9];
Kc = exp(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[10]) + (h_RT[8] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[8] += q;// HO2
wdot[9] += q;// H2O
wdot[10] -= q;// H2O2
// d()/d[OH]
dqdci =  + k_f*sc[10];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[9];
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[8];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] += dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[208] -= dqdci;              // dwdot[H2O2]/d[H2O]
// d()/d[H2O2]
dqdci =  + k_f*sc[7];
J[227] -= dqdci;              // dwdot[OH]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[229] += dqdci;              // dwdot[H2O]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 22: H2O2 + O <=> HO2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[10];
k_f = 9.63
            * exp(2 * tc[0] - (2008.53899989296) * invT);
dlnkfdT = 2 * invT + (2008.53899989296) * invT2;
// reverse
phi_r = sc[7]*sc[8];
Kc = exp(g_RT[6] - g_RT[7] - g_RT[8] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[7] + h_RT[8]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[8] += q;// HO2
wdot[10] -= q;// H2O2
// d()/d[O]
dqdci =  + k_f*sc[10];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[140] += dqdci;              // dwdot[HO2]/d[O]
J[142] -= dqdci;              // dwdot[H2O2]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[8];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[7];
J[182] -= dqdci;              // dwdot[O]/d[HO2]
J[183] += dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  + k_f*sc[6];
J[226] -= dqdci;              // dwdot[O]/d[H2O2]
J[227] += dqdci;              // dwdot[OH]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 24: H + NH3 <=> H2 + NH2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[12];
k_f = 0.64
            * exp(2.39 * tc[0] - (5123.57093322397) * invT);
dlnkfdT = 2.39 * invT + (5123.57093322397) * invT2;
// reverse
phi_r = sc[3]*sc[16];
Kc = exp(-g_RT[3] + g_RT[5] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[12]) + (h_RT[3] + h_RT[16]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// d()/d[H2]
dqdci =  - k_r*sc[16];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[78] -= dqdci;               // dwdot[NH3]/d[H2]
J[82] += dqdci;               // dwdot[NH2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[12];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[122] -= dqdci;              // dwdot[NH3]/d[H]
J[126] += dqdci;              // dwdot[NH2]/d[H]
// d()/d[NH3]
dqdci =  + k_f*sc[5];
J[267] += dqdci;              // dwdot[H2]/d[NH3]
J[269] -= dqdci;              // dwdot[H]/d[NH3]
J[276] -= dqdci;              // dwdot[NH3]/d[NH3]
J[280] += dqdci;              // dwdot[NH2]/d[NH3]
// d()/d[NH2]
dqdci =  - k_r*sc[3];
J[355] += dqdci;              // dwdot[H2]/d[NH2]
J[357] -= dqdci;              // dwdot[H]/d[NH2]
J[364] -= dqdci;              // dwdot[NH3]/d[NH2]
J[368] += dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[474] -= dqdT;               // dwdot[NH3]/dT
J[478] += dqdT;               // dwdot[NH2]/dT

// reaction 25: NH3 + O <=> NH2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[12];
k_f = 9.4
            * exp(1.94 * tc[0] - (3253.35109826075) * invT);
dlnkfdT = 1.94 * invT + (3253.35109826075) * invT2;
// reverse
phi_r = sc[7]*sc[16];
Kc = exp(g_RT[6] - g_RT[7] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[7] + h_RT[16]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// d()/d[O]
dqdci =  + k_f*sc[12];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[144] -= dqdci;              // dwdot[NH3]/d[O]
J[148] += dqdci;              // dwdot[NH2]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[16];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[166] -= dqdci;              // dwdot[NH3]/d[OH]
J[170] += dqdci;              // dwdot[NH2]/d[OH]
// d()/d[NH3]
dqdci =  + k_f*sc[6];
J[270] -= dqdci;              // dwdot[O]/d[NH3]
J[271] += dqdci;              // dwdot[OH]/d[NH3]
J[276] -= dqdci;              // dwdot[NH3]/d[NH3]
J[280] += dqdci;              // dwdot[NH2]/d[NH3]
// d()/d[NH2]
dqdci =  - k_r*sc[7];
J[358] -= dqdci;              // dwdot[O]/d[NH2]
J[359] += dqdci;              // dwdot[OH]/d[NH2]
J[364] -= dqdci;              // dwdot[NH3]/d[NH2]
J[368] += dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[474] -= dqdT;               // dwdot[NH3]/dT
J[478] += dqdT;               // dwdot[NH2]/dT

// reaction 26: NH3 + OH <=> H2O + NH2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[12];
k_f = 2.04
            * exp(2.04 * tc[0] - (285.042048178425) * invT);
dlnkfdT = 2.04 * invT + (285.042048178425) * invT2;
// reverse
phi_r = sc[9]*sc[16];
Kc = exp(g_RT[7] - g_RT[9] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[12]) + (h_RT[9] + h_RT[16]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// d()/d[OH]
dqdci =  + k_f*sc[12];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[166] -= dqdci;              // dwdot[NH3]/d[OH]
J[170] += dqdci;              // dwdot[NH2]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[16];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[210] -= dqdci;              // dwdot[NH3]/d[H2O]
J[214] += dqdci;              // dwdot[NH2]/d[H2O]
// d()/d[NH3]
dqdci =  + k_f*sc[7];
J[271] -= dqdci;              // dwdot[OH]/d[NH3]
J[273] += dqdci;              // dwdot[H2O]/d[NH3]
J[276] -= dqdci;              // dwdot[NH3]/d[NH3]
J[280] += dqdci;              // dwdot[NH2]/d[NH3]
// d()/d[NH2]
dqdci =  - k_r*sc[9];
J[359] -= dqdci;              // dwdot[OH]/d[NH2]
J[361] += dqdci;              // dwdot[H2O]/d[NH2]
J[364] -= dqdci;              // dwdot[NH3]/d[NH2]
J[368] += dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[474] -= dqdT;               // dwdot[NH3]/dT
J[478] += dqdT;               // dwdot[NH2]/dT

// reaction 27: H + NH2 <=> H2 + NH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[16];
k_f = 40000000
            * exp(- (1837.75229568549) * invT);
dlnkfdT = (1837.75229568549) * invT2;
// reverse
phi_r = sc[3]*sc[17];
Kc = exp(-g_RT[3] + g_RT[5] + g_RT[16] - g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[16]) + (h_RT[3] + h_RT[17]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[16] -= q;// NH2
wdot[17] += q;// NH
// d()/d[H2]
dqdci =  - k_r*sc[17];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[82] -= dqdci;               // dwdot[NH2]/d[H2]
J[83] += dqdci;               // dwdot[NH]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[16];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[126] -= dqdci;              // dwdot[NH2]/d[H]
J[127] += dqdci;              // dwdot[NH]/d[H]
// d()/d[NH2]
dqdci =  + k_f*sc[5];
J[355] += dqdci;              // dwdot[H2]/d[NH2]
J[357] -= dqdci;              // dwdot[H]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[369] += dqdci;              // dwdot[NH]/d[NH2]
// d()/d[NH]
dqdci =  - k_r*sc[3];
J[377] += dqdci;              // dwdot[H2]/d[NH]
J[379] -= dqdci;              // dwdot[H]/d[NH]
J[390] -= dqdci;              // dwdot[NH2]/d[NH]
J[391] += dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[479] += dqdT;               // dwdot[NH]/dT

// reaction 28: N + NH2 <=> 2 H + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[14]*sc[16];
k_f = 70000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = (sc[5] * sc[5])*sc[19];
Kc = refC * exp(-2.000000*g_RT[5] + g_RT[14] + g_RT[16] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[14] + h_RT[16]) + (2.000000*h_RT[5] + h_RT[19]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += 2 * q;// H
wdot[14] -= q;// N
wdot[16] -= q;// NH2
wdot[19] += q;// N2
// d()/d[H]
dqdci =  - k_r*2.000000*sc[5]*sc[19];
J[115] += 2 * dqdci;          // dwdot[H]/d[H]
J[124] -= dqdci;              // dwdot[N]/d[H]
J[126] -= dqdci;              // dwdot[NH2]/d[H]
J[129] += dqdci;              // dwdot[N2]/d[H]
// d()/d[N]
dqdci =  + k_f*sc[16];
J[313] += 2 * dqdci;          // dwdot[H]/d[N]
J[322] -= dqdci;              // dwdot[N]/d[N]
J[324] -= dqdci;              // dwdot[NH2]/d[N]
J[327] += dqdci;              // dwdot[N2]/d[N]
// d()/d[NH2]
dqdci =  + k_f*sc[14];
J[357] += 2 * dqdci;          // dwdot[H]/d[NH2]
J[366] -= dqdci;              // dwdot[N]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[371] += dqdci;              // dwdot[N2]/d[NH2]
// d()/d[N2]
dqdci =  - k_r*sc[5]*sc[5];
J[423] += 2 * dqdci;          // dwdot[H]/d[N2]
J[432] -= dqdci;              // dwdot[N]/d[N2]
J[434] -= dqdci;              // dwdot[NH2]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[467] += 2 * dqdT;           // dwdot[H]/dT
J[476] -= dqdT;               // dwdot[N]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 29: NH2 + O <=> H + HNO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[16];
k_f = 660000000
            * exp(-0.5 * tc[0]);
dlnkfdT = -0.5 * invT;
// reverse
phi_r = sc[5]*sc[13];
Kc = exp(-g_RT[5] + g_RT[6] - g_RT[13] + g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[16]) + (h_RT[5] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[13] += q;// HNO
wdot[16] -= q;// NH2
// d()/d[H]
dqdci =  - k_r*sc[13];
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[123] += dqdci;              // dwdot[HNO]/d[H]
J[126] -= dqdci;              // dwdot[NH2]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[16];
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[145] += dqdci;              // dwdot[HNO]/d[O]
J[148] -= dqdci;              // dwdot[NH2]/d[O]
// d()/d[HNO]
dqdci =  - k_r*sc[5];
J[291] += dqdci;              // dwdot[H]/d[HNO]
J[292] -= dqdci;              // dwdot[O]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[302] -= dqdci;              // dwdot[NH2]/d[HNO]
// d()/d[NH2]
dqdci =  + k_f*sc[6];
J[357] += dqdci;              // dwdot[H]/d[NH2]
J[358] -= dqdci;              // dwdot[O]/d[NH2]
J[365] += dqdci;              // dwdot[HNO]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT

// reaction 30: NH2 + OH <=> H2O + NH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[16];
k_f = 4
            * exp(2 * tc[0] - (503.93626563682) * invT);
dlnkfdT = 2 * invT + (503.93626563682) * invT2;
// reverse
phi_r = sc[9]*sc[17];
Kc = exp(g_RT[7] - g_RT[9] + g_RT[16] - g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[16]) + (h_RT[9] + h_RT[17]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[16] -= q;// NH2
wdot[17] += q;// NH
// d()/d[OH]
dqdci =  + k_f*sc[16];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[170] -= dqdci;              // dwdot[NH2]/d[OH]
J[171] += dqdci;              // dwdot[NH]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[17];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[214] -= dqdci;              // dwdot[NH2]/d[H2O]
J[215] += dqdci;              // dwdot[NH]/d[H2O]
// d()/d[NH2]
dqdci =  + k_f*sc[7];
J[359] -= dqdci;              // dwdot[OH]/d[NH2]
J[361] += dqdci;              // dwdot[H2O]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[369] += dqdci;              // dwdot[NH]/d[NH2]
// d()/d[NH]
dqdci =  - k_r*sc[9];
J[381] -= dqdci;              // dwdot[OH]/d[NH]
J[383] += dqdci;              // dwdot[H2O]/d[NH]
J[390] -= dqdci;              // dwdot[NH2]/d[NH]
J[391] += dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[479] += dqdT;               // dwdot[NH]/dT

// reaction 31: NH2 + NO <=> H2O + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[16];
k_f = 280000000000000
            * exp(-2.654 * tc[0] - (633.046565582337) * invT);
dlnkfdT = -2.654 * invT + (633.046565582337) * invT2;
// reverse
phi_r = sc[9]*sc[19];
Kc = exp(g_RT[0] - g_RT[9] + g_RT[16] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[16]) + (h_RT[9] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[9] += q;// H2O
wdot[16] -= q;// NH2
wdot[19] += q;// N2
// d()/d[NO]
dqdci =  + k_f*sc[16];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[9] += dqdci;                // dwdot[H2O]/d[NO]
J[16] -= dqdci;               // dwdot[NH2]/d[NO]
J[19] += dqdci;               // dwdot[N2]/d[NO]
// d()/d[H2O]
dqdci =  - k_r*sc[19];
J[198] -= dqdci;              // dwdot[NO]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[214] -= dqdci;              // dwdot[NH2]/d[H2O]
J[217] += dqdci;              // dwdot[N2]/d[H2O]
// d()/d[NH2]
dqdci =  + k_f*sc[0];
J[352] -= dqdci;              // dwdot[NO]/d[NH2]
J[361] += dqdci;              // dwdot[H2O]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[371] += dqdci;              // dwdot[N2]/d[NH2]
// d()/d[N2]
dqdci =  - k_r*sc[9];
J[418] -= dqdci;              // dwdot[NO]/d[N2]
J[427] += dqdci;              // dwdot[H2O]/d[N2]
J[434] -= dqdci;              // dwdot[NH2]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 32: NH2 + NO <=> NNH + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[16];
k_f = 31000000
            * exp(-0.48 * tc[0] - (593.795665649569) * invT);
dlnkfdT = -0.48 * invT + (593.795665649569) * invT2;
// reverse
phi_r = sc[7]*sc[15];
Kc = exp(g_RT[0] - g_RT[7] - g_RT[15] + g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[16]) + (h_RT[7] + h_RT[15]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[7] += q;// OH
wdot[15] += q;// NNH
wdot[16] -= q;// NH2
// d()/d[NO]
dqdci =  + k_f*sc[16];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[15] += dqdci;               // dwdot[NNH]/d[NO]
J[16] -= dqdci;               // dwdot[NH2]/d[NO]
// d()/d[OH]
dqdci =  - k_r*sc[15];
J[154] -= dqdci;              // dwdot[NO]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[169] += dqdci;              // dwdot[NNH]/d[OH]
J[170] -= dqdci;              // dwdot[NH2]/d[OH]
// d()/d[NNH]
dqdci =  - k_r*sc[7];
J[330] -= dqdci;              // dwdot[NO]/d[NNH]
J[337] += dqdci;              // dwdot[OH]/d[NNH]
J[345] += dqdci;              // dwdot[NNH]/d[NNH]
J[346] -= dqdci;              // dwdot[NH2]/d[NNH]
// d()/d[NH2]
dqdci =  + k_f*sc[0];
J[352] -= dqdci;              // dwdot[NO]/d[NH2]
J[359] += dqdci;              // dwdot[OH]/d[NH2]
J[367] += dqdci;              // dwdot[NNH]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[477] += dqdT;               // dwdot[NNH]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT

// reaction 33: NH2 + O2 <=> H2NO + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[16];
k_f = 260000
            * exp(0.4872 * tc[0] - (14618.4441416271) * invT);
dlnkfdT = 0.4872 * invT + (14618.4441416271) * invT2;
// reverse
phi_r = sc[6]*sc[20];
Kc = exp(g_RT[2] - g_RT[6] + g_RT[16] - g_RT[20]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[6] + h_RT[20]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[6] += q;// O
wdot[16] -= q;// NH2
wdot[20] += q;// H2NO
// d()/d[O2]
dqdci =  + k_f*sc[16];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[60] -= dqdci;               // dwdot[NH2]/d[O2]
J[64] += dqdci;               // dwdot[H2NO]/d[O2]
// d()/d[O]
dqdci =  - k_r*sc[20];
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[148] -= dqdci;              // dwdot[NH2]/d[O]
J[152] += dqdci;              // dwdot[H2NO]/d[O]
// d()/d[NH2]
dqdci =  + k_f*sc[2];
J[354] -= dqdci;              // dwdot[O2]/d[NH2]
J[358] += dqdci;              // dwdot[O]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[372] += dqdci;              // dwdot[H2NO]/d[NH2]
// d()/d[H2NO]
dqdci =  - k_r*sc[6];
J[442] -= dqdci;              // dwdot[O2]/d[H2NO]
J[446] += dqdci;              // dwdot[O]/d[H2NO]
J[456] -= dqdci;              // dwdot[NH2]/d[H2NO]
J[460] += dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[482] += dqdT;               // dwdot[H2NO]/dT

// reaction 34: H + NH <=> H2 + N
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[17];
k_f = 100000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[3]*sc[14];
Kc = exp(-g_RT[3] + g_RT[5] - g_RT[14] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[17]) + (h_RT[3] + h_RT[14]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[14] += q;// N
wdot[17] -= q;// NH
// d()/d[H2]
dqdci =  - k_r*sc[14];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[80] += dqdci;               // dwdot[N]/d[H2]
J[83] -= dqdci;               // dwdot[NH]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[17];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[124] += dqdci;              // dwdot[N]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[N]
dqdci =  - k_r*sc[3];
J[311] += dqdci;              // dwdot[H2]/d[N]
J[313] -= dqdci;              // dwdot[H]/d[N]
J[322] += dqdci;              // dwdot[N]/d[N]
J[325] -= dqdci;              // dwdot[NH]/d[N]
// d()/d[NH]
dqdci =  + k_f*sc[5];
J[377] += dqdci;              // dwdot[H2]/d[NH]
J[379] -= dqdci;              // dwdot[H]/d[NH]
J[388] += dqdci;              // dwdot[N]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[476] += dqdT;               // dwdot[N]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 35: NH + O <=> H + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[17];
k_f = 92000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[0]*sc[5];
Kc = exp(-g_RT[0] - g_RT[5] + g_RT[6] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[0] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[17] -= q;// NH
// d()/d[NO]
dqdci =  - k_r*sc[5];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[5] += dqdci;                // dwdot[H]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
J[17] -= dqdci;               // dwdot[NH]/d[NO]
// d()/d[H]
dqdci =  - k_r*sc[0];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[17];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[149] -= dqdci;              // dwdot[NH]/d[O]
// d()/d[NH]
dqdci =  + k_f*sc[6];
J[374] += dqdci;              // dwdot[NO]/d[NH]
J[379] += dqdci;              // dwdot[H]/d[NH]
J[380] -= dqdci;              // dwdot[O]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 36: NH + OH <=> H + HNO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[17];
k_f = 40000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[5]*sc[13];
Kc = exp(-g_RT[5] + g_RT[7] - g_RT[13] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[17]) + (h_RT[5] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += q;// H
wdot[7] -= q;// OH
wdot[13] += q;// HNO
wdot[17] -= q;// NH
// d()/d[H]
dqdci =  - k_r*sc[13];
J[115] += dqdci;              // dwdot[H]/d[H]
J[117] -= dqdci;              // dwdot[OH]/d[H]
J[123] += dqdci;              // dwdot[HNO]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[OH]
dqdci =  + k_f*sc[17];
J[159] += dqdci;              // dwdot[H]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[167] += dqdci;              // dwdot[HNO]/d[OH]
J[171] -= dqdci;              // dwdot[NH]/d[OH]
// d()/d[HNO]
dqdci =  - k_r*sc[5];
J[291] += dqdci;              // dwdot[H]/d[HNO]
J[293] -= dqdci;              // dwdot[OH]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[303] -= dqdci;              // dwdot[NH]/d[HNO]
// d()/d[NH]
dqdci =  + k_f*sc[7];
J[379] += dqdci;              // dwdot[H]/d[NH]
J[381] -= dqdci;              // dwdot[OH]/d[NH]
J[387] += dqdci;              // dwdot[HNO]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[467] += dqdT;               // dwdot[H]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 37: NH + OH <=> H2O + N
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[17];
k_f = 500000
            * exp(0.5 * tc[0] - (1006.67487560903) * invT);
dlnkfdT = 0.5 * invT + (1006.67487560903) * invT2;
// reverse
phi_r = sc[9]*sc[14];
Kc = exp(g_RT[7] - g_RT[9] - g_RT[14] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[17]) + (h_RT[9] + h_RT[14]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[14] += q;// N
wdot[17] -= q;// NH
// d()/d[OH]
dqdci =  + k_f*sc[17];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[168] += dqdci;              // dwdot[N]/d[OH]
J[171] -= dqdci;              // dwdot[NH]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[14];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[212] += dqdci;              // dwdot[N]/d[H2O]
J[215] -= dqdci;              // dwdot[NH]/d[H2O]
// d()/d[N]
dqdci =  - k_r*sc[9];
J[315] -= dqdci;              // dwdot[OH]/d[N]
J[317] += dqdci;              // dwdot[H2O]/d[N]
J[322] += dqdci;              // dwdot[N]/d[N]
J[325] -= dqdci;              // dwdot[NH]/d[N]
// d()/d[NH]
dqdci =  + k_f*sc[7];
J[381] -= dqdci;              // dwdot[OH]/d[NH]
J[383] += dqdci;              // dwdot[H2O]/d[NH]
J[388] += dqdci;              // dwdot[N]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[476] += dqdT;               // dwdot[N]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 38: NH + O2 <=> HNO + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[17];
k_f = 0.46
            * exp(2 * tc[0] - (3271.39141572985) * invT);
dlnkfdT = 2 * invT + (3271.39141572985) * invT2;
// reverse
phi_r = sc[6]*sc[13];
Kc = exp(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[6] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[6] += q;// O
wdot[13] += q;// HNO
wdot[17] -= q;// NH
// d()/d[O2]
dqdci =  + k_f*sc[17];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[57] += dqdci;               // dwdot[HNO]/d[O2]
J[61] -= dqdci;               // dwdot[NH]/d[O2]
// d()/d[O]
dqdci =  - k_r*sc[13];
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[145] += dqdci;              // dwdot[HNO]/d[O]
J[149] -= dqdci;              // dwdot[NH]/d[O]
// d()/d[HNO]
dqdci =  - k_r*sc[6];
J[288] -= dqdci;              // dwdot[O2]/d[HNO]
J[292] += dqdci;              // dwdot[O]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[303] -= dqdci;              // dwdot[NH]/d[HNO]
// d()/d[NH]
dqdci =  + k_f*sc[2];
J[376] -= dqdci;              // dwdot[O2]/d[NH]
J[380] += dqdci;              // dwdot[O]/d[NH]
J[387] += dqdci;              // dwdot[HNO]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 39: NH + NO <=> H + N2O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[17];
k_f = 180000000
            * exp(-0.351 * tc[0] - (-122.784866456352) * invT);
dlnkfdT = -0.351 * invT + (-122.784866456352) * invT2;
// reverse
phi_r = sc[1]*sc[5];
Kc = exp(g_RT[0] - g_RT[1] - g_RT[5] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[17]) + (h_RT[1] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[1] += q;// N2O
wdot[5] += q;// H
wdot[17] -= q;// NH
// d()/d[NO]
dqdci =  + k_f*sc[17];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[1] += dqdci;                // dwdot[N2O]/d[NO]
J[5] += dqdci;                // dwdot[H]/d[NO]
J[17] -= dqdci;               // dwdot[NH]/d[NO]
// d()/d[N2O]
dqdci =  - k_r*sc[5];
J[22] -= dqdci;               // dwdot[NO]/d[N2O]
J[23] += dqdci;               // dwdot[N2O]/d[N2O]
J[27] += dqdci;               // dwdot[H]/d[N2O]
J[39] -= dqdci;               // dwdot[NH]/d[N2O]
// d()/d[H]
dqdci =  - k_r*sc[1];
J[110] -= dqdci;              // dwdot[NO]/d[H]
J[111] += dqdci;              // dwdot[N2O]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[NH]
dqdci =  + k_f*sc[0];
J[374] -= dqdci;              // dwdot[NO]/d[NH]
J[375] += dqdci;              // dwdot[N2O]/d[NH]
J[379] += dqdci;              // dwdot[H]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[463] += dqdT;               // dwdot[N2O]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 40: NH + NO <=> N2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[17];
k_f = 22000000
            * exp(-0.23 * tc[0]);
dlnkfdT = -0.23 * invT;
// reverse
phi_r = sc[7]*sc[19];
Kc = exp(g_RT[0] - g_RT[7] + g_RT[17] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[17]) + (h_RT[7] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[7] += q;// OH
wdot[17] -= q;// NH
wdot[19] += q;// N2
// d()/d[NO]
dqdci =  + k_f*sc[17];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[17] -= dqdci;               // dwdot[NH]/d[NO]
J[19] += dqdci;               // dwdot[N2]/d[NO]
// d()/d[OH]
dqdci =  - k_r*sc[19];
J[154] -= dqdci;              // dwdot[NO]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[171] -= dqdci;              // dwdot[NH]/d[OH]
J[173] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[NH]
dqdci =  + k_f*sc[0];
J[374] -= dqdci;              // dwdot[NO]/d[NH]
J[381] += dqdci;              // dwdot[OH]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
J[393] += dqdci;              // dwdot[N2]/d[NH]
// d()/d[N2]
dqdci =  - k_r*sc[7];
J[418] -= dqdci;              // dwdot[NO]/d[N2]
J[425] += dqdci;              // dwdot[OH]/d[N2]
J[435] -= dqdci;              // dwdot[NH]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[479] -= dqdT;               // dwdot[NH]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 42: H + NNH <=> H2 + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[15];
k_f = 100000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[3]*sc[19];
Kc = exp(-g_RT[3] + g_RT[5] + g_RT[15] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[15]) + (h_RT[3] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[15] -= q;// NNH
wdot[19] += q;// N2
// d()/d[H2]
dqdci =  - k_r*sc[19];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[81] -= dqdci;               // dwdot[NNH]/d[H2]
J[85] += dqdci;               // dwdot[N2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[15];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[125] -= dqdci;              // dwdot[NNH]/d[H]
J[129] += dqdci;              // dwdot[N2]/d[H]
// d()/d[NNH]
dqdci =  + k_f*sc[5];
J[333] += dqdci;              // dwdot[H2]/d[NNH]
J[335] -= dqdci;              // dwdot[H]/d[NNH]
J[345] -= dqdci;              // dwdot[NNH]/d[NNH]
J[349] += dqdci;              // dwdot[N2]/d[NNH]
// d()/d[N2]
dqdci =  - k_r*sc[3];
J[421] += dqdci;              // dwdot[H2]/d[N2]
J[423] -= dqdci;              // dwdot[H]/d[N2]
J[433] -= dqdci;              // dwdot[NNH]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[477] -= dqdT;               // dwdot[NNH]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 43: NNH + O <=> H + N2O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[15];
k_f = 100000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[1]*sc[5];
Kc = exp(-g_RT[1] - g_RT[5] + g_RT[6] + g_RT[15]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[15]) + (h_RT[1] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] += q;// N2O
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[15] -= q;// NNH
// d()/d[N2O]
dqdci =  - k_r*sc[5];
J[23] += dqdci;               // dwdot[N2O]/d[N2O]
J[27] += dqdci;               // dwdot[H]/d[N2O]
J[28] -= dqdci;               // dwdot[O]/d[N2O]
J[37] -= dqdci;               // dwdot[NNH]/d[N2O]
// d()/d[H]
dqdci =  - k_r*sc[1];
J[111] += dqdci;              // dwdot[N2O]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[125] -= dqdci;              // dwdot[NNH]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[15];
J[133] += dqdci;              // dwdot[N2O]/d[O]
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[147] -= dqdci;              // dwdot[NNH]/d[O]
// d()/d[NNH]
dqdci =  + k_f*sc[6];
J[331] += dqdci;              // dwdot[N2O]/d[NNH]
J[335] += dqdci;              // dwdot[H]/d[NNH]
J[336] -= dqdci;              // dwdot[O]/d[NNH]
J[345] -= dqdci;              // dwdot[NNH]/d[NNH]
// d()/dT
J[463] += dqdT;               // dwdot[N2O]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[477] -= dqdT;               // dwdot[NNH]/dT

// reaction 44: NNH + OH <=> H2O + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[15];
k_f = 50000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[9]*sc[19];
Kc = exp(g_RT[7] - g_RT[9] + g_RT[15] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[15]) + (h_RT[9] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[15] -= q;// NNH
wdot[19] += q;// N2
// d()/d[OH]
dqdci =  + k_f*sc[15];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[169] -= dqdci;              // dwdot[NNH]/d[OH]
J[173] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[19];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[213] -= dqdci;              // dwdot[NNH]/d[H2O]
J[217] += dqdci;              // dwdot[N2]/d[H2O]
// d()/d[NNH]
dqdci =  + k_f*sc[7];
J[337] -= dqdci;              // dwdot[OH]/d[NNH]
J[339] += dqdci;              // dwdot[H2O]/d[NNH]
J[345] -= dqdci;              // dwdot[NNH]/d[NNH]
J[349] += dqdci;              // dwdot[N2]/d[NNH]
// d()/d[N2]
dqdci =  - k_r*sc[9];
J[425] -= dqdci;              // dwdot[OH]/d[N2]
J[427] += dqdci;              // dwdot[H2O]/d[N2]
J[433] -= dqdci;              // dwdot[NNH]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[477] -= dqdT;               // dwdot[NNH]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 45: NNH + O2 <=> HO2 + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[15];
k_f = 200000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[8]*sc[19];
Kc = exp(g_RT[2] - g_RT[8] + g_RT[15] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[8] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[8] += q;// HO2
wdot[15] -= q;// NNH
wdot[19] += q;// N2
// d()/d[O2]
dqdci =  + k_f*sc[15];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[52] += dqdci;               // dwdot[HO2]/d[O2]
J[59] -= dqdci;               // dwdot[NNH]/d[O2]
J[63] += dqdci;               // dwdot[N2]/d[O2]
// d()/d[HO2]
dqdci =  - k_r*sc[19];
J[178] -= dqdci;              // dwdot[O2]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[191] -= dqdci;              // dwdot[NNH]/d[HO2]
J[195] += dqdci;              // dwdot[N2]/d[HO2]
// d()/d[NNH]
dqdci =  + k_f*sc[2];
J[332] -= dqdci;              // dwdot[O2]/d[NNH]
J[338] += dqdci;              // dwdot[HO2]/d[NNH]
J[345] -= dqdci;              // dwdot[NNH]/d[NNH]
J[349] += dqdci;              // dwdot[N2]/d[NNH]
// d()/d[N2]
dqdci =  - k_r*sc[8];
J[420] -= dqdci;              // dwdot[O2]/d[N2]
J[426] += dqdci;              // dwdot[HO2]/d[N2]
J[433] -= dqdci;              // dwdot[NNH]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[477] -= dqdT;               // dwdot[NNH]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 46: N2 + O <=> N + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[19];
k_f = 14700000
            * exp(0.3 * tc[0] - (37885.5775072734) * invT);
dlnkfdT = 0.3 * invT + (37885.5775072734) * invT2;
// reverse
phi_r = sc[0]*sc[14];
Kc = exp(-g_RT[0] + g_RT[6] - g_RT[14] + g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[19]) + (h_RT[0] + h_RT[14]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[6] -= q;// O
wdot[14] += q;// N
wdot[19] -= q;// N2
// d()/d[NO]
dqdci =  - k_r*sc[14];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
J[14] += dqdci;               // dwdot[N]/d[NO]
J[19] -= dqdci;               // dwdot[N2]/d[NO]
// d()/d[O]
dqdci =  + k_f*sc[19];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[146] += dqdci;              // dwdot[N]/d[O]
J[151] -= dqdci;              // dwdot[N2]/d[O]
// d()/d[N]
dqdci =  - k_r*sc[0];
J[308] += dqdci;              // dwdot[NO]/d[N]
J[314] -= dqdci;              // dwdot[O]/d[N]
J[322] += dqdci;              // dwdot[N]/d[N]
J[327] -= dqdci;              // dwdot[N2]/d[N]
// d()/d[N2]
dqdci =  + k_f*sc[6];
J[418] += dqdci;              // dwdot[NO]/d[N2]
J[424] -= dqdci;              // dwdot[O]/d[N2]
J[432] += dqdci;              // dwdot[N]/d[N2]
J[437] -= dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[476] += dqdT;               // dwdot[N]/dT
J[481] -= dqdT;               // dwdot[N2]/dT

// reaction 47: HO2 + NO <=> NO2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[8];
k_f = 2100000
            * exp(- (-241.745286252587) * invT);
dlnkfdT = (-241.745286252587) * invT2;
// reverse
phi_r = sc[7]*sc[11];
Kc = exp(g_RT[0] - g_RT[7] + g_RT[8] - g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[8]) + (h_RT[7] + h_RT[11]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[7] += q;// OH
wdot[8] -= q;// HO2
wdot[11] += q;// NO2
// d()/d[NO]
dqdci =  + k_f*sc[8];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[8] -= dqdci;                // dwdot[HO2]/d[NO]
J[11] += dqdci;               // dwdot[NO2]/d[NO]
// d()/d[OH]
dqdci =  - k_r*sc[11];
J[154] -= dqdci;              // dwdot[NO]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
J[165] += dqdci;              // dwdot[NO2]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[0];
J[176] -= dqdci;              // dwdot[NO]/d[HO2]
J[183] += dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[187] += dqdci;              // dwdot[NO2]/d[HO2]
// d()/d[NO2]
dqdci =  - k_r*sc[7];
J[242] -= dqdci;              // dwdot[NO]/d[NO2]
J[249] += dqdci;              // dwdot[OH]/d[NO2]
J[250] -= dqdci;              // dwdot[HO2]/d[NO2]
J[253] += dqdci;              // dwdot[NO2]/d[NO2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[473] += dqdT;               // dwdot[NO2]/dT

// reaction 49: H + NO2 <=> NO + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[11];
k_f = 350000000
            * exp(- (755.308086706252) * invT);
dlnkfdT = (755.308086706252) * invT2;
// reverse
phi_r = sc[0]*sc[7];
Kc = exp(-g_RT[0] + g_RT[5] - g_RT[7] + g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[11]) + (h_RT[0] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[11] -= q;// NO2
// d()/d[NO]
dqdci =  - k_r*sc[7];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[5] -= dqdci;                // dwdot[H]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[11] -= dqdci;               // dwdot[NO2]/d[NO]
// d()/d[H]
dqdci =  + k_f*sc[11];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[121] -= dqdci;              // dwdot[NO2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[0];
J[154] += dqdci;              // dwdot[NO]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[165] -= dqdci;              // dwdot[NO2]/d[OH]
// d()/d[NO2]
dqdci =  + k_f*sc[5];
J[242] += dqdci;              // dwdot[NO]/d[NO2]
J[247] -= dqdci;              // dwdot[H]/d[NO2]
J[249] += dqdci;              // dwdot[OH]/d[NO2]
J[253] -= dqdci;              // dwdot[NO2]/d[NO2]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[473] -= dqdT;               // dwdot[NO2]/dT

// reaction 50: NO2 + O <=> NO + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[11];
k_f = 10000000
            * exp(- (301.879677816251) * invT);
dlnkfdT = (301.879677816251) * invT2;
// reverse
phi_r = sc[0]*sc[2];
Kc = exp(-g_RT[0] - g_RT[2] + g_RT[6] + g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[11]) + (h_RT[0] + h_RT[2]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[2] += q;// O2
wdot[6] -= q;// O
wdot[11] -= q;// NO2
// d()/d[NO]
dqdci =  - k_r*sc[2];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[2] += dqdci;                // dwdot[O2]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
J[11] -= dqdci;               // dwdot[NO2]/d[NO]
// d()/d[O2]
dqdci =  - k_r*sc[0];
J[44] += dqdci;               // dwdot[NO]/d[O2]
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[50] -= dqdci;               // dwdot[O]/d[O2]
J[55] -= dqdci;               // dwdot[NO2]/d[O2]
// d()/d[O]
dqdci =  + k_f*sc[11];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[134] += dqdci;              // dwdot[O2]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[143] -= dqdci;              // dwdot[NO2]/d[O]
// d()/d[NO2]
dqdci =  + k_f*sc[6];
J[242] += dqdci;              // dwdot[NO]/d[NO2]
J[244] += dqdci;              // dwdot[O2]/d[NO2]
J[248] -= dqdci;              // dwdot[O]/d[NO2]
J[253] -= dqdci;              // dwdot[NO2]/d[NO2]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[473] -= dqdT;               // dwdot[NO2]/dT

// reaction 52: HNO + OH <=> H2O + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[13];
k_f = 36000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[0]*sc[9];
Kc = exp(-g_RT[0] + g_RT[7] - g_RT[9] + g_RT[13]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[13]) + (h_RT[0] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[13] -= q;// HNO
// d()/d[NO]
dqdci =  - k_r*sc[9];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[7] -= dqdci;                // dwdot[OH]/d[NO]
J[9] += dqdci;                // dwdot[H2O]/d[NO]
J[13] -= dqdci;               // dwdot[HNO]/d[NO]
// d()/d[OH]
dqdci =  + k_f*sc[13];
J[154] += dqdci;              // dwdot[NO]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[167] -= dqdci;              // dwdot[HNO]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[0];
J[198] += dqdci;              // dwdot[NO]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[211] -= dqdci;              // dwdot[HNO]/d[H2O]
// d()/d[HNO]
dqdci =  + k_f*sc[7];
J[286] += dqdci;              // dwdot[NO]/d[HNO]
J[293] -= dqdci;              // dwdot[OH]/d[HNO]
J[295] += dqdci;              // dwdot[H2O]/d[HNO]
J[299] -= dqdci;              // dwdot[HNO]/d[HNO]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[475] -= dqdT;               // dwdot[HNO]/dT

// reaction 53: H + HNO <=> H2 + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[13];
k_f = 440000
            * exp(0.72 * tc[0] - (327.141154439648) * invT);
dlnkfdT = 0.72 * invT + (327.141154439648) * invT2;
// reverse
phi_r = sc[0]*sc[3];
Kc = exp(-g_RT[0] - g_RT[3] + g_RT[5] + g_RT[13]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[13]) + (h_RT[0] + h_RT[3]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[13] -= q;// HNO
// d()/d[NO]
dqdci =  - k_r*sc[3];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[3] += dqdci;                // dwdot[H2]/d[NO]
J[5] -= dqdci;                // dwdot[H]/d[NO]
J[13] -= dqdci;               // dwdot[HNO]/d[NO]
// d()/d[H2]
dqdci =  - k_r*sc[0];
J[66] += dqdci;               // dwdot[NO]/d[H2]
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[79] -= dqdci;               // dwdot[HNO]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[13];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[123] -= dqdci;              // dwdot[HNO]/d[H]
// d()/d[HNO]
dqdci =  + k_f*sc[5];
J[286] += dqdci;              // dwdot[NO]/d[HNO]
J[289] += dqdci;              // dwdot[H2]/d[HNO]
J[291] -= dqdci;              // dwdot[H]/d[HNO]
J[299] -= dqdci;              // dwdot[HNO]/d[HNO]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[475] -= dqdT;               // dwdot[HNO]/dT

// reaction 54: N + O2 <=> NO + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[14];
k_f = 6400
            * exp(1 * tc[0] - (3163.1444787486) * invT);
dlnkfdT = 1 * invT + (3163.1444787486) * invT2;
// reverse
phi_r = sc[0]*sc[6];
Kc = exp(-g_RT[0] + g_RT[2] - g_RT[6] + g_RT[14]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[0] + h_RT[6]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[2] -= q;// O2
wdot[6] += q;// O
wdot[14] -= q;// N
// d()/d[NO]
dqdci =  - k_r*sc[6];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[2] -= dqdci;                // dwdot[O2]/d[NO]
J[6] += dqdci;                // dwdot[O]/d[NO]
J[14] -= dqdci;               // dwdot[N]/d[NO]
// d()/d[O2]
dqdci =  + k_f*sc[14];
J[44] += dqdci;               // dwdot[NO]/d[O2]
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[58] -= dqdci;               // dwdot[N]/d[O2]
// d()/d[O]
dqdci =  - k_r*sc[0];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[146] -= dqdci;              // dwdot[N]/d[O]
// d()/d[N]
dqdci =  + k_f*sc[2];
J[308] += dqdci;              // dwdot[NO]/d[N]
J[310] -= dqdci;              // dwdot[O2]/d[N]
J[314] += dqdci;              // dwdot[O]/d[N]
J[322] -= dqdci;              // dwdot[N]/d[N]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[476] -= dqdT;               // dwdot[N]/dT

// reaction 55: N + OH <=> H + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[14];
k_f = 38000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[0]*sc[5];
Kc = exp(-g_RT[0] - g_RT[5] + g_RT[7] + g_RT[14]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[14]) + (h_RT[0] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[5] += q;// H
wdot[7] -= q;// OH
wdot[14] -= q;// N
// d()/d[NO]
dqdci =  - k_r*sc[5];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[5] += dqdci;                // dwdot[H]/d[NO]
J[7] -= dqdci;                // dwdot[OH]/d[NO]
J[14] -= dqdci;               // dwdot[N]/d[NO]
// d()/d[H]
dqdci =  - k_r*sc[0];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[117] -= dqdci;              // dwdot[OH]/d[H]
J[124] -= dqdci;              // dwdot[N]/d[H]
// d()/d[OH]
dqdci =  + k_f*sc[14];
J[154] += dqdci;              // dwdot[NO]/d[OH]
J[159] += dqdci;              // dwdot[H]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[168] -= dqdci;              // dwdot[N]/d[OH]
// d()/d[N]
dqdci =  + k_f*sc[7];
J[308] += dqdci;              // dwdot[NO]/d[N]
J[313] += dqdci;              // dwdot[H]/d[N]
J[315] -= dqdci;              // dwdot[OH]/d[N]
J[322] -= dqdci;              // dwdot[N]/d[N]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[476] -= dqdT;               // dwdot[N]/dT

// reaction 56: H2NO + O <=> HNO + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[20];
k_f = 30
            * exp(2 * tc[0] - (1006.43333160944) * invT);
dlnkfdT = 2 * invT + (1006.43333160944) * invT2;
// reverse
phi_r = sc[7]*sc[13];
Kc = exp(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[20]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[20]) + (h_RT[7] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[13] += q;// HNO
wdot[20] -= q;// H2NO
// d()/d[O]
dqdci =  + k_f*sc[20];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[145] += dqdci;              // dwdot[HNO]/d[O]
J[152] -= dqdci;              // dwdot[H2NO]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[13];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[167] += dqdci;              // dwdot[HNO]/d[OH]
J[174] -= dqdci;              // dwdot[H2NO]/d[OH]
// d()/d[HNO]
dqdci =  - k_r*sc[7];
J[292] -= dqdci;              // dwdot[O]/d[HNO]
J[293] += dqdci;              // dwdot[OH]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[306] -= dqdci;              // dwdot[H2NO]/d[HNO]
// d()/d[H2NO]
dqdci =  + k_f*sc[6];
J[446] -= dqdci;              // dwdot[O]/d[H2NO]
J[447] += dqdci;              // dwdot[OH]/d[H2NO]
J[453] += dqdci;              // dwdot[HNO]/d[H2NO]
J[460] -= dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[482] -= dqdT;               // dwdot[H2NO]/dT

// reaction 57: H2NO + O2 <=> HNO + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[20];
k_f = 3000000
            * exp(- (12580.416645118) * invT);
dlnkfdT = (12580.416645118) * invT2;
// reverse
phi_r = sc[8]*sc[13];
Kc = exp(g_RT[2] - g_RT[8] - g_RT[13] + g_RT[20]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[8] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[8] += q;// HO2
wdot[13] += q;// HNO
wdot[20] -= q;// H2NO
// d()/d[O2]
dqdci =  + k_f*sc[20];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[52] += dqdci;               // dwdot[HO2]/d[O2]
J[57] += dqdci;               // dwdot[HNO]/d[O2]
J[64] -= dqdci;               // dwdot[H2NO]/d[O2]
// d()/d[HO2]
dqdci =  - k_r*sc[13];
J[178] -= dqdci;              // dwdot[O2]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[189] += dqdci;              // dwdot[HNO]/d[HO2]
J[196] -= dqdci;              // dwdot[H2NO]/d[HO2]
// d()/d[HNO]
dqdci =  - k_r*sc[8];
J[288] -= dqdci;              // dwdot[O2]/d[HNO]
J[294] += dqdci;              // dwdot[HO2]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[306] -= dqdci;              // dwdot[H2NO]/d[HNO]
// d()/d[H2NO]
dqdci =  + k_f*sc[2];
J[442] -= dqdci;              // dwdot[O2]/d[H2NO]
J[448] += dqdci;              // dwdot[HO2]/d[H2NO]
J[453] += dqdci;              // dwdot[HNO]/d[H2NO]
J[460] -= dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[482] -= dqdT;               // dwdot[H2NO]/dT

// reaction 58: H2NO + HO2 <=> H2O2 + HNO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[8]*sc[20];
k_f = 0.029
            * exp(2.69 * tc[0] - (-805.146665287552) * invT);
dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
// reverse
phi_r = sc[10]*sc[13];
Kc = exp(g_RT[8] - g_RT[10] - g_RT[13] + g_RT[20]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[8] + h_RT[20]) + (h_RT[10] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[8] -= q;// HO2
wdot[10] += q;// H2O2
wdot[13] += q;// HNO
wdot[20] -= q;// H2NO
// d()/d[HO2]
dqdci =  + k_f*sc[20];
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[186] += dqdci;              // dwdot[H2O2]/d[HO2]
J[189] += dqdci;              // dwdot[HNO]/d[HO2]
J[196] -= dqdci;              // dwdot[H2NO]/d[HO2]
// d()/d[H2O2]
dqdci =  - k_r*sc[13];
J[228] -= dqdci;              // dwdot[HO2]/d[H2O2]
J[230] += dqdci;              // dwdot[H2O2]/d[H2O2]
J[233] += dqdci;              // dwdot[HNO]/d[H2O2]
J[240] -= dqdci;              // dwdot[H2NO]/d[H2O2]
// d()/d[HNO]
dqdci =  - k_r*sc[10];
J[294] -= dqdci;              // dwdot[HO2]/d[HNO]
J[296] += dqdci;              // dwdot[H2O2]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[306] -= dqdci;              // dwdot[H2NO]/d[HNO]
// d()/d[H2NO]
dqdci =  + k_f*sc[8];
J[448] -= dqdci;              // dwdot[HO2]/d[H2NO]
J[450] += dqdci;              // dwdot[H2O2]/d[H2NO]
J[453] += dqdci;              // dwdot[HNO]/d[H2NO]
J[460] -= dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[472] += dqdT;               // dwdot[H2O2]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[482] -= dqdT;               // dwdot[H2NO]/dT

// reaction 60: N2O + O <=> 2 NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[6];
k_f = 91500000
            * exp(- (13935.5791261301) * invT);
dlnkfdT = (13935.5791261301) * invT2;
// reverse
phi_r = (sc[0] * sc[0]);
Kc = exp(-2.000000*g_RT[0] + g_RT[1] + g_RT[6]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (2.000000*h_RT[0]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += 2 * q;// NO
wdot[1] -= q;// N2O
wdot[6] -= q;// O
// d()/d[NO]
dqdci =  - k_r*2.000000*sc[0];
J[0] += 2 * dqdci;            // dwdot[NO]/d[NO]
J[1] -= dqdci;                // dwdot[N2O]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
// d()/d[N2O]
dqdci =  + k_f*sc[6];
J[22] += 2 * dqdci;           // dwdot[NO]/d[N2O]
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[28] -= dqdci;               // dwdot[O]/d[N2O]
// d()/d[O]
dqdci =  + k_f*sc[1];
J[132] += 2 * dqdci;          // dwdot[NO]/d[O]
J[133] -= dqdci;              // dwdot[N2O]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
// d()/dT
J[462] += 2 * dqdT;           // dwdot[NO]/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[468] -= dqdT;               // dwdot[O]/dT

// reaction 61: H + N2O <=> N2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[5];
k_f = 33100
            * exp(- (2561.37282894602) * invT);
dlnkfdT = (2561.37282894602) * invT2;
// reverse
phi_r = sc[7]*sc[19];
Kc = exp(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[5]) + (h_RT[7] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] -= q;// N2O
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[19] += q;// N2
// d()/d[N2O]
dqdci =  + k_f*sc[5];
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[27] -= dqdci;               // dwdot[H]/d[N2O]
J[29] += dqdci;               // dwdot[OH]/d[N2O]
J[41] += dqdci;               // dwdot[N2]/d[N2O]
// d()/d[H]
dqdci =  + k_f*sc[1];
J[111] -= dqdci;              // dwdot[N2O]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[129] += dqdci;              // dwdot[N2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[19];
J[155] -= dqdci;              // dwdot[N2O]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[173] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[N2]
dqdci =  - k_r*sc[7];
J[419] -= dqdci;              // dwdot[N2O]/d[N2]
J[423] -= dqdci;              // dwdot[H]/d[N2]
J[425] += dqdci;              // dwdot[OH]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 62: H + N2O <=> N2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[5];
k_f = 783000000
            * exp(- (9757.37114995351) * invT);
dlnkfdT = (9757.37114995351) * invT2;
// reverse
phi_r = sc[7]*sc[19];
Kc = exp(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[5]) + (h_RT[7] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] -= q;// N2O
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[19] += q;// N2
// d()/d[N2O]
dqdci =  + k_f*sc[5];
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[27] -= dqdci;               // dwdot[H]/d[N2O]
J[29] += dqdci;               // dwdot[OH]/d[N2O]
J[41] += dqdci;               // dwdot[N2]/d[N2O]
// d()/d[H]
dqdci =  + k_f*sc[1];
J[111] -= dqdci;              // dwdot[N2O]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[129] += dqdci;              // dwdot[N2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[19];
J[155] -= dqdci;              // dwdot[N2O]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[173] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[N2]
dqdci =  - k_r*sc[7];
J[419] -= dqdci;              // dwdot[N2O]/d[N2]
J[423] -= dqdci;              // dwdot[H]/d[N2]
J[425] += dqdci;              // dwdot[OH]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 63: N2O + OH <=> HO2 + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[7];
k_f = 2000000
            * exp(- (20128.6666321888) * invT);
dlnkfdT = (20128.6666321888) * invT2;
// reverse
phi_r = sc[8]*sc[19];
Kc = exp(g_RT[1] + g_RT[7] - g_RT[8] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[8] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] -= q;// N2O
wdot[7] -= q;// OH
wdot[8] += q;// HO2
wdot[19] += q;// N2
// d()/d[N2O]
dqdci =  + k_f*sc[7];
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[29] -= dqdci;               // dwdot[OH]/d[N2O]
J[30] += dqdci;               // dwdot[HO2]/d[N2O]
J[41] += dqdci;               // dwdot[N2]/d[N2O]
// d()/d[OH]
dqdci =  + k_f*sc[1];
J[155] -= dqdci;              // dwdot[N2O]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[173] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[19];
J[177] -= dqdci;              // dwdot[N2O]/d[HO2]
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[195] += dqdci;              // dwdot[N2]/d[HO2]
// d()/d[N2]
dqdci =  - k_r*sc[8];
J[419] -= dqdci;              // dwdot[N2O]/d[N2]
J[425] -= dqdci;              // dwdot[OH]/d[N2]
J[426] += dqdci;              // dwdot[HO2]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[481] += dqdT;               // dwdot[N2]/dT

amrex::Real c_R[21], dcRdT[21], e_RT[21];
amrex::Real * eh_RT;
if (HP) {
cp_R(c_R, tc);
dcvpRdT(dcRdT, tc);
eh_RT = &h_RT[0];
}
else {
cv_R(c_R, tc);
dcvpRdT(dcRdT, tc);
speciesInternalEnergy(e_RT, tc);
eh_RT = &e_RT[0];
}

amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT=0.0, dehmixdT=0.0;
for (int k = 0; k < 21; ++k) {
cmix += c_R[k]*sc[k];
dcmixdT += dcRdT[k]*sc[k];
ehmix += eh_RT[k]*wdot[k];
dehmixdT += invT*(c_R[k]-eh_RT[k])*wdot[k] + eh_RT[k]*J[462+k];
}

amrex::Real cmixinv = 1.0/cmix;
amrex::Real tmp1 = ehmix*cmixinv;
amrex::Real tmp3 = cmixinv*T;
amrex::Real tmp2 = tmp1*tmp3;
amrex::Real dehmixdc;
// dTdot/d[X]
for (int k = 0; k < 21; ++k) {
dehmixdc = 0.0;
for (int m = 0; m < 21; ++m) {
dehmixdc += eh_RT[m]*J[k*22+m];
}
J[k*22+21] = tmp2*c_R[k] - tmp3*dehmixdc;
}
// dTdot/dT
J[483] = -tmp1 + tmp2*dcmixdT - tmp3*dehmixdT;
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void DWDOT_SIMPLIFIED(amrex::Real *  J, amrex::Real *  sc, amrex::Real *  Tp, const int * HP)
{
amrex::Real c[21];

for (int k=0; k<21; k++) {
c[k] = 1.e6 * sc[k];
}

aJacobian_precond(J, c, *Tp, *HP);

// dwdot[k]/dT
// dTdot/d[X]
for (int k=0; k<21; k++) {
J[462+k] *= 1.e-6;
J[k*22+21] *= 1.e6;
}

return;
}


// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void aJacobian(amrex::Real * J, amrex::Real * sc, amrex::Real T, const int consP)
{

for (int i=0; i<484; i++) {
J[i] = 0.0;
}

amrex::Real wdot[21];
for (int k=0; k<21; k++) {
wdot[k] = 0.0;
}

const amrex::Real tc[5] = { log(T), T, T*T, T*T*T, T*T*T*T };// temperature cache
amrex::Real invT = 1.0 / tc[1];
amrex::Real invT2 = invT * invT;

// reference concentration: P_atm / (RT) in inverse mol/m^3
amrex::Real refC = 101325 / 8.31446 / T;
amrex::Real refCinv = 1.0 / refC;

// compute the mixture concentration
amrex::Real mixture = 0.0;
for (int k = 0; k < 21; ++k) {
mixture += sc[k];
}

// compute the Gibbs free energy
amrex::Real g_RT[21];
gibbs(g_RT, tc);

// compute the species enthalpy
amrex::Real h_RT[21];
speciesEnthalpy(h_RT, tc);

amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
amrex::Real dqdci, dcdc_fac, dqdc[21];
amrex::Real Pr, fPr, F, k_0, logPr;
amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
const amrex::Real ln10 = log(10.0);
const amrex::Real log10e = 1.0/log(10.0);
// reaction 8: H + O2 (+M) <=> HO2 (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.7 - 1)*sc[4] + ( 16 - 1)*sc[9] + ( 0.7 - 1)*sc[18];
// forward
phi_f = sc[2]*sc[5];
k_f = 4650000
            * exp(0.44 * tc[0]);
dlnkfdT = 0.44 * invT;
// pressure-fall-off
k_0 = 5.75e+19 * exp(-1.4 * tc[0]);
Pr = 1e-12 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = -1.4 * invT;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Troe form
logPr = log10(Pr);
Fcent1 = (1.-0.5)*exp(-T/1e-30);
Fcent2 = 0.5 * exp(-T/1e+30);
Fcent3 = 0.;
Fcent = Fcent1 + Fcent2 + Fcent3;
logFcent = log10(Fcent);
troe_c = -.4 - .67 * logFcent;
troe_n = .75 - 1.27 * logFcent;
troePr_den = 1.0 / (troe_n - .14*(troe_c + logPr));
troePr = (troe_c + logPr) * troePr_den;
troe = 1.0 / (1.0 + troePr*troePr);
F = exp(M_LN10 * logFcent * troe);
dlogFcentdT = log10e/Fcent*( 
    -Fcent1/1e-30
    -Fcent2/1e+30
);
dlogFdcn_fac = 2.0 * logFcent * troe*troe * troePr * troePr_den;
dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
dlogFdn = dlogFdcn_fac * troePr;
dlogFdlogPr = dlogFdc;
dlogFdT = dlogFcentdT*(troe - 0.67*dlogFdc - 1.27*dlogFdn) + dlogFdlogPr * dlogPrdT;
// reverse
phi_r = sc[8];
Kc = refCinv * exp(g_RT[2] + g_RT[5] - g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[8]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[2] -= q;// O2
wdot[5] -= q;// H
wdot[8] += q;// HO2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = q/alpha*(1.0/(Pr+1.0) + dlogFdlogPr);
if (consP) {
// d()/d[O2]
dqdci =  + k_f*sc[5];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[49] -= dqdci;               // dwdot[H]/d[O2]
J[52] += dqdci;               // dwdot[HO2]/d[O2]
// d()/d[H2]
dqdci = (2.5 - 1)*dcdc_fac;
J[68] -= dqdci;               // dwdot[O2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[74] += dqdci;               // dwdot[HO2]/d[H2]
// d()/d[AR]
dqdci = (0.7 - 1)*dcdc_fac;
J[90] -= dqdci;               // dwdot[O2]/d[AR]
J[93] -= dqdci;               // dwdot[H]/d[AR]
J[96] += dqdci;               // dwdot[HO2]/d[AR]
// d()/d[H]
dqdci =  + k_f*sc[2];
J[112] -= dqdci;              // dwdot[O2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[118] += dqdci;              // dwdot[HO2]/d[H]
// d()/d[HO2]
dqdci =  - k_r;
J[178] -= dqdci;              // dwdot[O2]/d[HO2]
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
// d()/d[H2O]
dqdci = (16 - 1)*dcdc_fac;
J[200] -= dqdci;              // dwdot[O2]/d[H2O]
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[206] += dqdci;              // dwdot[HO2]/d[H2O]
// d()/d[HE]
dqdci = (0.7 - 1)*dcdc_fac;
J[398] -= dqdci;              // dwdot[O2]/d[HE]
J[401] -= dqdci;              // dwdot[H]/d[HE]
J[404] += dqdci;              // dwdot[HO2]/d[HE]
}
else {
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac;
dqdc[2] = dcdc_fac + k_f*sc[5];
dqdc[3] = 2.5*dcdc_fac;
dqdc[4] = 0.7*dcdc_fac;
dqdc[5] = dcdc_fac + k_f*sc[2];
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac - k_r;
dqdc[9] = 16*dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = 0.7*dcdc_fac;
dqdc[19] = dcdc_fac;
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+2] -= dqdc[k];
J[22*k+5] -= dqdc[k];
J[22*k+8] += dqdc[k];
}
}
J[464] -= dqdT;// dwdot[O2]/dT
J[467] -= dqdT;// dwdot[H]/dT
J[470] += dqdT;// dwdot[HO2]/dT

// reaction 15: 2 OH (+M) <=> H2O2 (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.7 - 1)*sc[4] + ( 6 - 1)*sc[9] + ( 6 - 1)*sc[10] + ( 0.4 - 1)*sc[18];
// forward
phi_f = (sc[7] * sc[7]);
k_f = 95500000
            * exp(-0.27 * tc[0]);
dlnkfdT = -0.27 * invT;
// pressure-fall-off
k_0 = 2.76e+25 * exp(-3.2 * tc[0]);
Pr = 1e-12 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = -3.2 * invT;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Troe form
logPr = log10(Pr);
Fcent1 = (1.-0.57)*exp(-T/1e+30);
Fcent2 = 0.57 * exp(-T/1e-30);
Fcent3 = 0.;
Fcent = Fcent1 + Fcent2 + Fcent3;
logFcent = log10(Fcent);
troe_c = -.4 - .67 * logFcent;
troe_n = .75 - 1.27 * logFcent;
troePr_den = 1.0 / (troe_n - .14*(troe_c + logPr));
troePr = (troe_c + logPr) * troePr_den;
troe = 1.0 / (1.0 + troePr*troePr);
F = exp(M_LN10 * logFcent * troe);
dlogFcentdT = log10e/Fcent*( 
    -Fcent1/1e+30
    -Fcent2/1e-30
);
dlogFdcn_fac = 2.0 * logFcent * troe*troe * troePr * troePr_den;
dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
dlogFdn = dlogFdcn_fac * troePr;
dlogFdlogPr = dlogFdc;
dlogFdT = dlogFcentdT*(troe - 0.67*dlogFdc - 1.27*dlogFdn) + dlogFdlogPr * dlogPrdT;
// reverse
phi_r = sc[10];
Kc = refCinv * exp(2.000000*g_RT[7] - g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[7]) + (h_RT[10]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[7] -= 2 * q;// OH
wdot[10] += q;// H2O2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = q/alpha*(1.0/(Pr+1.0) + dlogFdlogPr);
if (consP) {
// d()/d[H2]
dqdci = (2.5 - 1)*dcdc_fac;
J[73] += -2 * dqdci;          // dwdot[OH]/d[H2]
J[76] += dqdci;               // dwdot[H2O2]/d[H2]
// d()/d[AR]
dqdci = (0.7 - 1)*dcdc_fac;
J[95] += -2 * dqdci;          // dwdot[OH]/d[AR]
J[98] += dqdci;               // dwdot[H2O2]/d[AR]
// d()/d[OH]
dqdci =  + k_f*2.000000*sc[7];
J[161] += -2 * dqdci;         // dwdot[OH]/d[OH]
J[164] += dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[H2O]
dqdci = (6 - 1)*dcdc_fac;
J[205] += -2 * dqdci;         // dwdot[OH]/d[H2O]
J[208] += dqdci;              // dwdot[H2O2]/d[H2O]
// d()/d[H2O2]
dqdci = (6 - 1)*dcdc_fac - k_r;
J[227] += -2 * dqdci;         // dwdot[OH]/d[H2O2]
J[230] += dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/d[HE]
dqdci = (0.4 - 1)*dcdc_fac;
J[403] += -2 * dqdci;         // dwdot[OH]/d[HE]
J[406] += dqdci;              // dwdot[H2O2]/d[HE]
}
else {
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac;
dqdc[2] = dcdc_fac;
dqdc[3] = 2.5*dcdc_fac;
dqdc[4] = 0.7*dcdc_fac;
dqdc[5] = dcdc_fac;
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac + k_f*2.000000*sc[7];
dqdc[8] = dcdc_fac;
dqdc[9] = 6*dcdc_fac;
dqdc[10] = 6*dcdc_fac - k_r;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = 0.4*dcdc_fac;
dqdc[19] = dcdc_fac;
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+7] += -2 * dqdc[k];
J[22*k+10] += dqdc[k];
}
}
J[469] += -2 * dqdT;// dwdot[OH]/dT
J[472] += dqdT;// dwdot[H2O2]/dT

// reaction 41: NNH (+M) <=> H + N2 (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture;
// forward
phi_f = sc[15];
k_f = 65000000
           ;
dlnkfdT = 0.0;
// pressure-fall-off
k_0 = 50000000000000;
Pr = 1e-6 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = 0.0;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Lindemann form
F = 1.0;
dlogFdlogPr = 0.0;
dlogFdT = 0.0;
// reverse
phi_r = sc[5]*sc[19];
Kc = refC * exp(-g_RT[5] + g_RT[15] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[15]) + (h_RT[5] + h_RT[19]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[5] += q;// H
wdot[15] -= q;// NNH
wdot[19] += q;// N2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = q/alpha*(1.0/(Pr+1.0) + dlogFdlogPr);
if (consP) {
// d()/d[H]
dqdci =  - k_r*sc[19];
J[115] += dqdci;              // dwdot[H]/d[H]
J[125] -= dqdci;              // dwdot[NNH]/d[H]
J[129] += dqdci;              // dwdot[N2]/d[H]
// d()/d[NNH]
dqdci =  + k_f;
J[335] += dqdci;              // dwdot[H]/d[NNH]
J[345] -= dqdci;              // dwdot[NNH]/d[NNH]
J[349] += dqdci;              // dwdot[N2]/d[NNH]
// d()/d[N2]
dqdci =  - k_r*sc[5];
J[423] += dqdci;              // dwdot[H]/d[N2]
J[433] -= dqdci;              // dwdot[NNH]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
}
else {
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac;
dqdc[2] = dcdc_fac;
dqdc[3] = dcdc_fac;
dqdc[4] = dcdc_fac;
dqdc[5] = dcdc_fac - k_r*sc[19];
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac;
dqdc[9] = dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac + k_f;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac;
dqdc[19] = dcdc_fac - k_r*sc[5];
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+5] += dqdc[k];
J[22*k+15] -= dqdc[k];
J[22*k+19] += dqdc[k];
}
}
J[467] += dqdT;// dwdot[H]/dT
J[477] -= dqdT;// dwdot[NNH]/dT
J[481] += dqdT;// dwdot[N2]/dT

// reaction 48: H + NO (+M) <=> HNO (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 1.5 - 1)*sc[2] + sc[3] + ( 10 - 1)*sc[9];
// forward
phi_f = sc[0]*sc[5];
k_f = 1500000000
            * exp(-0.4 * tc[0]);
dlnkfdT = -0.4 * invT;
// pressure-fall-off
k_0 = 230000000000000 * exp(0.206 * tc[0] - (-782.486818826365) * invT);
Pr = 1e-12 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = 0.206 * invT + (-782.486818826365) * invT2;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Lindemann form
F = 1.0;
dlogFdlogPr = 0.0;
dlogFdT = 0.0;
// reverse
phi_r = sc[13];
Kc = refCinv * exp(g_RT[0] + g_RT[5] - g_RT[13]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[5]) + (h_RT[13]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[0] -= q;// NO
wdot[5] -= q;// H
wdot[13] += q;// HNO
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = q/alpha*(1.0/(Pr+1.0) + dlogFdlogPr);
if (consP) {
// d()/d[NO]
dqdci =  + k_f*sc[5];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[5] -= dqdci;                // dwdot[H]/d[NO]
J[13] += dqdci;               // dwdot[HNO]/d[NO]
// d()/d[O2]
dqdci = (1.5 - 1)*dcdc_fac;
J[44] -= dqdci;               // dwdot[NO]/d[O2]
J[49] -= dqdci;               // dwdot[H]/d[O2]
J[57] += dqdci;               // dwdot[HNO]/d[O2]
// d()/d[H2]
dqdci = (2 - 1)*dcdc_fac;
J[66] -= dqdci;               // dwdot[NO]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[79] += dqdci;               // dwdot[HNO]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[0];
J[110] -= dqdci;              // dwdot[NO]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[123] += dqdci;              // dwdot[HNO]/d[H]
// d()/d[H2O]
dqdci = (10 - 1)*dcdc_fac;
J[198] -= dqdci;              // dwdot[NO]/d[H2O]
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[211] += dqdci;              // dwdot[HNO]/d[H2O]
// d()/d[HNO]
dqdci =  - k_r;
J[286] -= dqdci;              // dwdot[NO]/d[HNO]
J[291] -= dqdci;              // dwdot[H]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
}
else {
dqdc[0] = dcdc_fac + k_f*sc[5];
dqdc[1] = dcdc_fac;
dqdc[2] = 1.5*dcdc_fac;
dqdc[3] = 2*dcdc_fac;
dqdc[4] = dcdc_fac;
dqdc[5] = dcdc_fac + k_f*sc[0];
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac;
dqdc[9] = 10*dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac - k_r;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac;
dqdc[19] = dcdc_fac;
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+0] -= dqdc[k];
J[22*k+5] -= dqdc[k];
J[22*k+13] += dqdc[k];
}
}
J[462] -= dqdT;// dwdot[NO]/dT
J[467] -= dqdT;// dwdot[H]/dT
J[475] += dqdT;// dwdot[HNO]/dT

// reaction 59: N2O (+M) <=> N2 + O (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture;
// forward
phi_f = sc[1];
k_f = 800000000000
            * exp(- (31511.1760043586) * invT);
dlnkfdT = (31511.1760043586) * invT2;
// pressure-fall-off
k_0 = 200000000000000 * exp(-(28504.3859758422) * invT);
Pr = 1e-6 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = (28504.3859758422) * invT2;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Lindemann form
F = 1.0;
dlogFdlogPr = 0.0;
dlogFdT = 0.0;
// reverse
phi_r = sc[6]*sc[19];
Kc = refC * exp(g_RT[1] - g_RT[6] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1]) + (h_RT[6] + h_RT[19]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[1] -= q;// N2O
wdot[6] += q;// O
wdot[19] += q;// N2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = q/alpha*(1.0/(Pr+1.0) + dlogFdlogPr);
if (consP) {
// d()/d[N2O]
dqdci =  + k_f;
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[28] += dqdci;               // dwdot[O]/d[N2O]
J[41] += dqdci;               // dwdot[N2]/d[N2O]
// d()/d[O]
dqdci =  - k_r*sc[19];
J[133] -= dqdci;              // dwdot[N2O]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[151] += dqdci;              // dwdot[N2]/d[O]
// d()/d[N2]
dqdci =  - k_r*sc[6];
J[419] -= dqdci;              // dwdot[N2O]/d[N2]
J[424] += dqdci;              // dwdot[O]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
}
else {
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac + k_f;
dqdc[2] = dcdc_fac;
dqdc[3] = dcdc_fac;
dqdc[4] = dcdc_fac;
dqdc[5] = dcdc_fac;
dqdc[6] = dcdc_fac - k_r*sc[19];
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac;
dqdc[9] = dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac;
dqdc[19] = dcdc_fac - k_r*sc[6];
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+1] -= dqdc[k];
J[22*k+6] += dqdc[k];
J[22*k+19] += dqdc[k];
}
}
J[463] -= dqdT;// dwdot[N2O]/dT
J[468] += dqdT;// dwdot[O]/dT
J[481] += dqdT;// dwdot[N2]/dT

// reaction 4: 2 H + M <=> H2 + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.5 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.5 - 1)*sc[18];
// forward
phi_f = (sc[5] * sc[5]);
k_f = 1300000
            * exp(-1 * tc[0]);
dlnkfdT = -1 * invT;
// reverse
phi_r = sc[3];
Kc = refCinv * exp(-g_RT[3] + 2.000000*g_RT[5]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[5]) + (h_RT[3]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= 2 * q;// H
// for convenience
k_f *= alpha;
k_r *= alpha;
if (consP) {
// d()/d[H2]
dqdci = (2.5 - 1)*q_nocor - k_r;
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] += -2 * dqdci;          // dwdot[H]/d[H2]
// d()/d[AR]
dqdci = (0.5 - 1)*q_nocor;
J[91] += dqdci;               // dwdot[H2]/d[AR]
J[93] += -2 * dqdci;          // dwdot[H]/d[AR]
// d()/d[H]
dqdci =  + k_f*2.000000*sc[5];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] += -2 * dqdci;         // dwdot[H]/d[H]
// d()/d[H2O]
dqdci = (12 - 1)*q_nocor;
J[201] += dqdci;              // dwdot[H2]/d[H2O]
J[203] += -2 * dqdci;         // dwdot[H]/d[H2O]
// d()/d[HE]
dqdci = (0.5 - 1)*q_nocor;
J[399] += dqdci;              // dwdot[H2]/d[HE]
J[401] += -2 * dqdci;         // dwdot[H]/d[HE]
}
else {
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = 2.5*q_nocor - k_r;
dqdc[4] = 0.5*q_nocor;
dqdc[5] = q_nocor + k_f*2.000000*sc[5];
dqdc[6] = q_nocor;
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = 0.5*q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+3] += dqdc[k];
J[22*k+5] += -2 * dqdc[k];
}
}
J[465] += dqdT;// dwdot[H2]/dT
J[467] += -2 * dqdT;// dwdot[H]/dT

// reaction 5: H + OH + M <=> H2O + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.38 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.38 - 1)*sc[18];
// forward
phi_f = sc[5]*sc[7];
k_f = 40000000000
            * exp(-2 * tc[0]);
dlnkfdT = -2 * invT;
// reverse
phi_r = sc[9];
Kc = refCinv * exp(g_RT[5] + g_RT[7] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[7]) + (h_RT[9]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[7] -= q;// OH
wdot[9] += q;// H2O
// for convenience
k_f *= alpha;
k_r *= alpha;
if (consP) {
// d()/d[H2]
dqdci = (2.5 - 1)*q_nocor;
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[73] -= dqdci;               // dwdot[OH]/d[H2]
J[75] += dqdci;               // dwdot[H2O]/d[H2]
// d()/d[AR]
dqdci = (0.38 - 1)*q_nocor;
J[93] -= dqdci;               // dwdot[H]/d[AR]
J[95] -= dqdci;               // dwdot[OH]/d[AR]
J[97] += dqdci;               // dwdot[H2O]/d[AR]
// d()/d[H]
dqdci =  + k_f*sc[7];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] -= dqdci;              // dwdot[OH]/d[H]
J[119] += dqdci;              // dwdot[H2O]/d[H]
// d()/d[OH]
dqdci =  + k_f*sc[5];
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
// d()/d[H2O]
dqdci = (12 - 1)*q_nocor - k_r;
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/d[HE]
dqdci = (0.38 - 1)*q_nocor;
J[401] -= dqdci;              // dwdot[H]/d[HE]
J[403] -= dqdci;              // dwdot[OH]/d[HE]
J[405] += dqdci;              // dwdot[H2O]/d[HE]
}
else {
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = 2.5*q_nocor;
dqdc[4] = 0.38*q_nocor;
dqdc[5] = q_nocor + k_f*sc[7];
dqdc[6] = q_nocor;
dqdc[7] = q_nocor + k_f*sc[5];
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor - k_r;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = 0.38*q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+5] -= dqdc[k];
J[22*k+7] -= dqdc[k];
J[22*k+9] += dqdc[k];
}
}
J[467] -= dqdT;// dwdot[H]/dT
J[469] -= dqdT;// dwdot[OH]/dT
J[471] += dqdT;// dwdot[H2O]/dT

// reaction 6: 2 O + M <=> O2 + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.2 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.2 - 1)*sc[18];
// forward
phi_f = (sc[6] * sc[6]);
k_f = 6170
            * exp(-0.5 * tc[0]);
dlnkfdT = -0.5 * invT;
// reverse
phi_r = sc[2];
Kc = refCinv * exp(-g_RT[2] + 2.000000*g_RT[6]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[6]) + (h_RT[2]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[6] -= 2 * q;// O
// for convenience
k_f *= alpha;
k_r *= alpha;
if (consP) {
// d()/d[O2]
dqdci =  - k_r;
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[50] += -2 * dqdci;          // dwdot[O]/d[O2]
// d()/d[H2]
dqdci = (2.5 - 1)*q_nocor;
J[68] += dqdci;               // dwdot[O2]/d[H2]
J[72] += -2 * dqdci;          // dwdot[O]/d[H2]
// d()/d[AR]
dqdci = (0.2 - 1)*q_nocor;
J[90] += dqdci;               // dwdot[O2]/d[AR]
J[94] += -2 * dqdci;          // dwdot[O]/d[AR]
// d()/d[O]
dqdci =  + k_f*2.000000*sc[6];
J[134] += dqdci;              // dwdot[O2]/d[O]
J[138] += -2 * dqdci;         // dwdot[O]/d[O]
// d()/d[H2O]
dqdci = (12 - 1)*q_nocor;
J[200] += dqdci;              // dwdot[O2]/d[H2O]
J[204] += -2 * dqdci;         // dwdot[O]/d[H2O]
// d()/d[HE]
dqdci = (0.2 - 1)*q_nocor;
J[398] += dqdci;              // dwdot[O2]/d[HE]
J[402] += -2 * dqdci;         // dwdot[O]/d[HE]
}
else {
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor - k_r;
dqdc[3] = 2.5*q_nocor;
dqdc[4] = 0.2*q_nocor;
dqdc[5] = q_nocor;
dqdc[6] = q_nocor + k_f*2.000000*sc[6];
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = 0.2*q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+2] += dqdc[k];
J[22*k+6] += -2 * dqdc[k];
}
}
J[464] += dqdT;// dwdot[O2]/dT
J[468] += -2 * dqdT;// dwdot[O]/dT

// reaction 7: H + O + M <=> OH + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.75 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.75 - 1)*sc[18];
// forward
phi_f = sc[5]*sc[6];
k_f = 4710000
            * exp(-1 * tc[0]);
dlnkfdT = -1 * invT;
// reverse
phi_r = sc[7];
Kc = refCinv * exp(g_RT[5] + g_RT[6] - g_RT[7]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[6]) + (h_RT[7]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[6] -= q;// O
wdot[7] += q;// OH
// for convenience
k_f *= alpha;
k_r *= alpha;
if (consP) {
// d()/d[H2]
dqdci = (2.5 - 1)*q_nocor;
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[72] -= dqdci;               // dwdot[O]/d[H2]
J[73] += dqdci;               // dwdot[OH]/d[H2]
// d()/d[AR]
dqdci = (0.75 - 1)*q_nocor;
J[93] -= dqdci;               // dwdot[H]/d[AR]
J[94] -= dqdci;               // dwdot[O]/d[AR]
J[95] += dqdci;               // dwdot[OH]/d[AR]
// d()/d[H]
dqdci =  + k_f*sc[6];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[5];
J[137] -= dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
// d()/d[OH]
dqdci =  - k_r;
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
// d()/d[H2O]
dqdci = (12 - 1)*q_nocor;
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[204] -= dqdci;              // dwdot[O]/d[H2O]
J[205] += dqdci;              // dwdot[OH]/d[H2O]
// d()/d[HE]
dqdci = (0.75 - 1)*q_nocor;
J[401] -= dqdci;              // dwdot[H]/d[HE]
J[402] -= dqdci;              // dwdot[O]/d[HE]
J[403] += dqdci;              // dwdot[OH]/d[HE]
}
else {
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = 2.5*q_nocor;
dqdc[4] = 0.75*q_nocor;
dqdc[5] = q_nocor + k_f*sc[6];
dqdc[6] = q_nocor + k_f*sc[5];
dqdc[7] = q_nocor - k_r;
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = 0.75*q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+5] -= dqdc[k];
J[22*k+6] -= dqdc[k];
J[22*k+7] += dqdc[k];
}
}
J[467] -= dqdT;// dwdot[H]/dT
J[468] -= dqdT;// dwdot[O]/dT
J[469] += dqdT;// dwdot[OH]/dT

// reaction 23: NH3 + M <=> H + NH2 + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture;
// forward
phi_f = sc[12];
k_f = 22000000000
            * exp(- (47026.2214081167) * invT);
dlnkfdT = (47026.2214081167) * invT2;
// reverse
phi_r = sc[5]*sc[16];
Kc = refC * exp(-g_RT[5] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[12]) + (h_RT[5] + h_RT[16]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += q;// H
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// for convenience
k_f *= alpha;
k_r *= alpha;
if (consP) {
// d()/d[H]
dqdci =  - k_r*sc[16];
J[115] += dqdci;              // dwdot[H]/d[H]
J[122] -= dqdci;              // dwdot[NH3]/d[H]
J[126] += dqdci;              // dwdot[NH2]/d[H]
// d()/d[NH3]
dqdci =  + k_f;
J[269] += dqdci;              // dwdot[H]/d[NH3]
J[276] -= dqdci;              // dwdot[NH3]/d[NH3]
J[280] += dqdci;              // dwdot[NH2]/d[NH3]
// d()/d[NH2]
dqdci =  - k_r*sc[5];
J[357] += dqdci;              // dwdot[H]/d[NH2]
J[364] -= dqdci;              // dwdot[NH3]/d[NH2]
J[368] += dqdci;              // dwdot[NH2]/d[NH2]
}
else {
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = q_nocor;
dqdc[4] = q_nocor;
dqdc[5] = q_nocor - k_r*sc[16];
dqdc[6] = q_nocor;
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor + k_f;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor - k_r*sc[5];
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+5] += dqdc[k];
J[22*k+12] -= dqdc[k];
J[22*k+16] += dqdc[k];
}
}
J[467] += dqdT;// dwdot[H]/dT
J[474] -= dqdT;// dwdot[NH3]/dT
J[478] += dqdT;// dwdot[NH2]/dT

// reaction 51: NO2 + M <=> NO + O + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 16.25 - 1)*sc[9];
// forward
phi_f = sc[11];
k_f = 11000000000
            * exp(- (33194.9792254745) * invT);
dlnkfdT = (33194.9792254745) * invT2;
// reverse
phi_r = sc[0]*sc[6];
Kc = refC * exp(-g_RT[0] - g_RT[6] + g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[11]) + (h_RT[0] + h_RT[6]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[6] += q;// O
wdot[11] -= q;// NO2
// for convenience
k_f *= alpha;
k_r *= alpha;
if (consP) {
// d()/d[NO]
dqdci =  - k_r*sc[6];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[6] += dqdci;                // dwdot[O]/d[NO]
J[11] -= dqdci;               // dwdot[NO2]/d[NO]
// d()/d[O]
dqdci =  - k_r*sc[0];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[143] -= dqdci;              // dwdot[NO2]/d[O]
// d()/d[H2O]
dqdci = (16.25 - 1)*q_nocor;
J[198] += dqdci;              // dwdot[NO]/d[H2O]
J[204] += dqdci;              // dwdot[O]/d[H2O]
J[209] -= dqdci;              // dwdot[NO2]/d[H2O]
// d()/d[NO2]
dqdci =  + k_f;
J[242] += dqdci;              // dwdot[NO]/d[NO2]
J[248] += dqdci;              // dwdot[O]/d[NO2]
J[253] -= dqdci;              // dwdot[NO2]/d[NO2]
}
else {
dqdc[0] = q_nocor - k_r*sc[6];
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = q_nocor;
dqdc[4] = q_nocor;
dqdc[5] = q_nocor;
dqdc[6] = q_nocor - k_r*sc[0];
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = 16.25*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor + k_f;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+0] += dqdc[k];
J[22*k+6] += dqdc[k];
J[22*k+11] -= dqdc[k];
}
}
J[462] += dqdT;// dwdot[NO]/dT
J[468] += dqdT;// dwdot[O]/dT
J[473] -= dqdT;// dwdot[NO2]/dT

// reaction 0: H + O2 <=> O + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[5];
k_f = 35200000000
            * exp(-0.7 * tc[0] - (8589.80280978675) * invT);
dlnkfdT = -0.7 * invT + (8589.80280978675) * invT2;
// reverse
phi_r = sc[6]*sc[7];
Kc = exp(g_RT[2] + g_RT[5] - g_RT[6] - g_RT[7]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[6] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[5] -= q;// H
wdot[6] += q;// O
wdot[7] += q;// OH
// d()/d[O2]
dqdci =  + k_f*sc[5];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[49] -= dqdci;               // dwdot[H]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[51] += dqdci;               // dwdot[OH]/d[O2]
// d()/d[H]
dqdci =  + k_f*sc[2];
J[112] -= dqdci;              // dwdot[O2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[116] += dqdci;              // dwdot[O]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
// d()/d[O]
dqdci =  - k_r*sc[7];
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[137] -= dqdci;              // dwdot[H]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[6];
J[156] -= dqdci;              // dwdot[O2]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[160] += dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT

// reaction 1: H2 + O <=> H + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[3]*sc[6];
k_f = 0.0506
            * exp(2.67 * tc[0] - (3165.54985441114) * invT);
dlnkfdT = 2.67 * invT + (3165.54985441114) * invT2;
// reverse
phi_r = sc[5]*sc[7];
Kc = exp(g_RT[3] - g_RT[5] + g_RT[6] - g_RT[7]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[3] + h_RT[6]) + (h_RT[5] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] -= q;// H2
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[7] += q;// OH
// d()/d[H2]
dqdci =  + k_f*sc[6];
J[69] -= dqdci;               // dwdot[H2]/d[H2]
J[71] += dqdci;               // dwdot[H]/d[H2]
J[72] -= dqdci;               // dwdot[O]/d[H2]
J[73] += dqdci;               // dwdot[OH]/d[H2]
// d()/d[H]
dqdci =  - k_r*sc[7];
J[113] -= dqdci;              // dwdot[H2]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[3];
J[135] -= dqdci;              // dwdot[H2]/d[O]
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[5];
J[157] -= dqdci;              // dwdot[H2]/d[OH]
J[159] += dqdci;              // dwdot[H]/d[OH]
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
// d()/dT
J[465] -= dqdT;               // dwdot[H2]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT

// reaction 2: H2 + OH <=> H + H2O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[3]*sc[7];
k_f = 1170
            * exp(1.3 * tc[0] - (1829.33348086658) * invT);
dlnkfdT = 1.3 * invT + (1829.33348086658) * invT2;
// reverse
phi_r = sc[5]*sc[9];
Kc = exp(g_RT[3] - g_RT[5] + g_RT[7] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[3] + h_RT[7]) + (h_RT[5] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] -= q;// H2
wdot[5] += q;// H
wdot[7] -= q;// OH
wdot[9] += q;// H2O
// d()/d[H2]
dqdci =  + k_f*sc[7];
J[69] -= dqdci;               // dwdot[H2]/d[H2]
J[71] += dqdci;               // dwdot[H]/d[H2]
J[73] -= dqdci;               // dwdot[OH]/d[H2]
J[75] += dqdci;               // dwdot[H2O]/d[H2]
// d()/d[H]
dqdci =  - k_r*sc[9];
J[113] -= dqdci;              // dwdot[H2]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[117] -= dqdci;              // dwdot[OH]/d[H]
J[119] += dqdci;              // dwdot[H2O]/d[H]
// d()/d[OH]
dqdci =  + k_f*sc[3];
J[157] -= dqdci;              // dwdot[H2]/d[OH]
J[159] += dqdci;              // dwdot[H]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[5];
J[201] -= dqdci;              // dwdot[H2]/d[H2O]
J[203] += dqdci;              // dwdot[H]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[465] -= dqdT;               // dwdot[H2]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 3: H2O + O <=> 2 OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[9];
k_f = 0.7
            * exp(2.33 * tc[0] - (7320.93695479349) * invT);
dlnkfdT = 2.33 * invT + (7320.93695479349) * invT2;
// reverse
phi_r = (sc[7] * sc[7]);
Kc = exp(g_RT[6] - 2.000000*g_RT[7] + g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[9]) + (2.000000*h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += 2 * q;// OH
wdot[9] -= q;// H2O
// d()/d[O]
dqdci =  + k_f*sc[9];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += 2 * dqdci;          // dwdot[OH]/d[O]
J[141] -= dqdci;              // dwdot[H2O]/d[O]
// d()/d[OH]
dqdci =  - k_r*2.000000*sc[7];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += 2 * dqdci;          // dwdot[OH]/d[OH]
J[163] -= dqdci;              // dwdot[H2O]/d[OH]
// d()/d[H2O]
dqdci =  + k_f*sc[6];
J[204] -= dqdci;              // dwdot[O]/d[H2O]
J[205] += 2 * dqdci;          // dwdot[OH]/d[H2O]
J[207] -= dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += 2 * dqdT;           // dwdot[OH]/dT
J[471] -= dqdT;               // dwdot[H2O]/dT

// reaction 9: H + HO2 <=> 2 OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[8];
k_f = 70800000
            * exp(- (148.413691245786) * invT);
dlnkfdT = (148.413691245786) * invT2;
// reverse
phi_r = (sc[7] * sc[7]);
Kc = exp(g_RT[5] - 2.000000*g_RT[7] + g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (2.000000*h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[7] += 2 * q;// OH
wdot[8] -= q;// HO2
// d()/d[H]
dqdci =  + k_f*sc[8];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += 2 * dqdci;          // dwdot[OH]/d[H]
J[118] -= dqdci;              // dwdot[HO2]/d[H]
// d()/d[OH]
dqdci =  - k_r*2.000000*sc[7];
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += 2 * dqdci;          // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[5];
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[183] += 2 * dqdci;          // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
// d()/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += 2 * dqdT;           // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT

// reaction 10: H + HO2 <=> H2 + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[8];
k_f = 16600000
            * exp(- (414.096994290704) * invT);
dlnkfdT = (414.096994290704) * invT2;
// reverse
phi_r = sc[2]*sc[3];
Kc = exp(-g_RT[2] - g_RT[3] + g_RT[5] + g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (h_RT[2] + h_RT[3]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[8] -= q;// HO2
// d()/d[O2]
dqdci =  - k_r*sc[3];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[47] += dqdci;               // dwdot[H2]/d[O2]
J[49] -= dqdci;               // dwdot[H]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
// d()/d[H2]
dqdci =  - k_r*sc[2];
J[68] += dqdci;               // dwdot[O2]/d[H2]
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[74] -= dqdci;               // dwdot[HO2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[8];
J[112] += dqdci;              // dwdot[O2]/d[H]
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[118] -= dqdci;              // dwdot[HO2]/d[H]
// d()/d[HO2]
dqdci =  + k_f*sc[5];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[179] += dqdci;              // dwdot[H2]/d[HO2]
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT

// reaction 11: H + HO2 <=> H2O + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[8];
k_f = 31000000
            * exp(- (865.955367183394) * invT);
dlnkfdT = (865.955367183394) * invT2;
// reverse
phi_r = sc[6]*sc[9];
Kc = exp(g_RT[5] - g_RT[6] + g_RT[8] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (h_RT[6] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[6] += q;// O
wdot[8] -= q;// HO2
wdot[9] += q;// H2O
// d()/d[H]
dqdci =  + k_f*sc[8];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[116] += dqdci;              // dwdot[O]/d[H]
J[118] -= dqdci;              // dwdot[HO2]/d[H]
J[119] += dqdci;              // dwdot[H2O]/d[H]
// d()/d[O]
dqdci =  - k_r*sc[9];
J[137] -= dqdci;              // dwdot[H]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[140] -= dqdci;              // dwdot[HO2]/d[O]
J[141] += dqdci;              // dwdot[H2O]/d[O]
// d()/d[HO2]
dqdci =  + k_f*sc[5];
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[182] += dqdci;              // dwdot[O]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[6];
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[204] += dqdci;              // dwdot[O]/d[H2O]
J[206] -= dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 12: HO2 + O <=> O2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[8];
k_f = 20000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[2]*sc[7];
Kc = exp(-g_RT[2] + g_RT[6] - g_RT[7] + g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[8]) + (h_RT[2] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[8] -= q;// HO2
// d()/d[O2]
dqdci =  - k_r*sc[7];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[50] -= dqdci;               // dwdot[O]/d[O2]
J[51] += dqdci;               // dwdot[OH]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
// d()/d[O]
dqdci =  + k_f*sc[8];
J[134] += dqdci;              // dwdot[O2]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[140] -= dqdci;              // dwdot[HO2]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[2];
J[156] += dqdci;              // dwdot[O2]/d[OH]
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[6];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[182] -= dqdci;              // dwdot[O]/d[HO2]
J[183] += dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT

// reaction 13: HO2 + OH <=> H2O + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[8];
k_f = 7000000
            * exp(- (-550.846123223136) * invT);
dlnkfdT = (-550.846123223136) * invT2;
// reverse
phi_r = sc[2]*sc[9];
Kc = exp(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[8]) + (h_RT[2] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[7] -= q;// OH
wdot[8] -= q;// HO2
wdot[9] += q;// H2O
// d()/d[O2]
dqdci =  - k_r*sc[9];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[51] -= dqdci;               // dwdot[OH]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
J[53] += dqdci;               // dwdot[H2O]/d[O2]
// d()/d[OH]
dqdci =  + k_f*sc[8];
J[156] += dqdci;              // dwdot[O2]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[7];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[2];
J[200] += dqdci;              // dwdot[O2]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] -= dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 14: HO2 + OH <=> H2O + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[8];
k_f = 450000000
            * exp(- (5500.02228874582) * invT);
dlnkfdT = (5500.02228874582) * invT2;
// reverse
phi_r = sc[2]*sc[9];
Kc = exp(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[8]) + (h_RT[2] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[7] -= q;// OH
wdot[8] -= q;// HO2
wdot[9] += q;// H2O
// d()/d[O2]
dqdci =  - k_r*sc[9];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[51] -= dqdci;               // dwdot[OH]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
J[53] += dqdci;               // dwdot[H2O]/d[O2]
// d()/d[OH]
dqdci =  + k_f*sc[8];
J[156] += dqdci;              // dwdot[O2]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[7];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[2];
J[200] += dqdci;              // dwdot[O2]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] -= dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 16: 2 HO2 <=> H2O2 + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = (sc[8] * sc[8]);
k_f = 103000000
            * exp(- (5556.55364898232) * invT);
dlnkfdT = (5556.55364898232) * invT2;
// reverse
phi_r = sc[2]*sc[10];
Kc = exp(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[8]) + (h_RT[2] + h_RT[10]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[8] -= 2 * q;// HO2
wdot[10] += q;// H2O2
// d()/d[O2]
dqdci =  - k_r*sc[10];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[52] += -2 * dqdci;          // dwdot[HO2]/d[O2]
J[54] += dqdci;               // dwdot[H2O2]/d[O2]
// d()/d[HO2]
dqdci =  + k_f*2.000000*sc[8];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[184] += -2 * dqdci;         // dwdot[HO2]/d[HO2]
J[186] += dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  - k_r*sc[2];
J[222] += dqdci;              // dwdot[O2]/d[H2O2]
J[228] += -2 * dqdci;         // dwdot[HO2]/d[H2O2]
J[230] += dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[470] += -2 * dqdT;          // dwdot[HO2]/dT
J[472] += dqdT;               // dwdot[H2O2]/dT

// reaction 17: 2 HO2 <=> H2O2 + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = (sc[8] * sc[8]);
k_f = 194000
            * exp(- (-709.002089118902) * invT);
dlnkfdT = (-709.002089118902) * invT2;
// reverse
phi_r = sc[2]*sc[10];
Kc = exp(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[8]) + (h_RT[2] + h_RT[10]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[8] -= 2 * q;// HO2
wdot[10] += q;// H2O2
// d()/d[O2]
dqdci =  - k_r*sc[10];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[52] += -2 * dqdci;          // dwdot[HO2]/d[O2]
J[54] += dqdci;               // dwdot[H2O2]/d[O2]
// d()/d[HO2]
dqdci =  + k_f*2.000000*sc[8];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[184] += -2 * dqdci;         // dwdot[HO2]/d[HO2]
J[186] += dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  - k_r*sc[2];
J[222] += dqdci;              // dwdot[O2]/d[H2O2]
J[228] += -2 * dqdci;         // dwdot[HO2]/d[H2O2]
J[230] += dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[470] += -2 * dqdT;          // dwdot[HO2]/dT
J[472] += dqdT;               // dwdot[H2O2]/dT

// reaction 18: H + H2O2 <=> H2 + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[10];
k_f = 23000000
            * exp(- (4000.59765398081) * invT);
dlnkfdT = (4000.59765398081) * invT2;
// reverse
phi_r = sc[3]*sc[8];
Kc = exp(-g_RT[3] + g_RT[5] - g_RT[8] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[3] + h_RT[8]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[8] += q;// HO2
wdot[10] -= q;// H2O2
// d()/d[H2]
dqdci =  - k_r*sc[8];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[74] += dqdci;               // dwdot[HO2]/d[H2]
J[76] -= dqdci;               // dwdot[H2O2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[10];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[118] += dqdci;              // dwdot[HO2]/d[H]
J[120] -= dqdci;              // dwdot[H2O2]/d[H]
// d()/d[HO2]
dqdci =  - k_r*sc[3];
J[179] += dqdci;              // dwdot[H2]/d[HO2]
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  + k_f*sc[5];
J[223] += dqdci;              // dwdot[H2]/d[H2O2]
J[225] -= dqdci;              // dwdot[H]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 19: H + H2O2 <=> H2O + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[10];
k_f = 10000000
            * exp(- (1804.07703640984) * invT);
dlnkfdT = (1804.07703640984) * invT2;
// reverse
phi_r = sc[7]*sc[9];
Kc = exp(g_RT[5] - g_RT[7] - g_RT[9] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[7] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[9] += q;// H2O
wdot[10] -= q;// H2O2
// d()/d[H]
dqdci =  + k_f*sc[10];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[119] += dqdci;              // dwdot[H2O]/d[H]
J[120] -= dqdci;              // dwdot[H2O2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[9];
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[7];
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[205] += dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[208] -= dqdci;              // dwdot[H2O2]/d[H2O]
// d()/d[H2O2]
dqdci =  + k_f*sc[5];
J[225] -= dqdci;              // dwdot[H]/d[H2O2]
J[227] += dqdci;              // dwdot[OH]/d[H2O2]
J[229] += dqdci;              // dwdot[H2O]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 20: H2O2 + OH <=> H2O + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[10];
k_f = 1740000
            * exp(- (721.627795263942) * invT);
dlnkfdT = (721.627795263942) * invT2;
// reverse
phi_r = sc[8]*sc[9];
Kc = exp(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[10]) + (h_RT[8] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[8] += q;// HO2
wdot[9] += q;// H2O
wdot[10] -= q;// H2O2
// d()/d[OH]
dqdci =  + k_f*sc[10];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[9];
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[8];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] += dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[208] -= dqdci;              // dwdot[H2O2]/d[H2O]
// d()/d[H2O2]
dqdci =  + k_f*sc[7];
J[227] -= dqdci;              // dwdot[OH]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[229] += dqdci;              // dwdot[H2O]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 21: H2O2 + OH <=> H2O + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[10];
k_f = 75900000
            * exp(- (3659.86461739778) * invT);
dlnkfdT = (3659.86461739778) * invT2;
// reverse
phi_r = sc[8]*sc[9];
Kc = exp(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[10]) + (h_RT[8] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[8] += q;// HO2
wdot[9] += q;// H2O
wdot[10] -= q;// H2O2
// d()/d[OH]
dqdci =  + k_f*sc[10];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[9];
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[8];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] += dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[208] -= dqdci;              // dwdot[H2O2]/d[H2O]
// d()/d[H2O2]
dqdci =  + k_f*sc[7];
J[227] -= dqdci;              // dwdot[OH]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[229] += dqdci;              // dwdot[H2O]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 22: H2O2 + O <=> HO2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[10];
k_f = 9.63
            * exp(2 * tc[0] - (2008.53899989296) * invT);
dlnkfdT = 2 * invT + (2008.53899989296) * invT2;
// reverse
phi_r = sc[7]*sc[8];
Kc = exp(g_RT[6] - g_RT[7] - g_RT[8] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[7] + h_RT[8]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[8] += q;// HO2
wdot[10] -= q;// H2O2
// d()/d[O]
dqdci =  + k_f*sc[10];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[140] += dqdci;              // dwdot[HO2]/d[O]
J[142] -= dqdci;              // dwdot[H2O2]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[8];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[7];
J[182] -= dqdci;              // dwdot[O]/d[HO2]
J[183] += dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  + k_f*sc[6];
J[226] -= dqdci;              // dwdot[O]/d[H2O2]
J[227] += dqdci;              // dwdot[OH]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 24: H + NH3 <=> H2 + NH2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[12];
k_f = 0.64
            * exp(2.39 * tc[0] - (5123.57093322397) * invT);
dlnkfdT = 2.39 * invT + (5123.57093322397) * invT2;
// reverse
phi_r = sc[3]*sc[16];
Kc = exp(-g_RT[3] + g_RT[5] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[12]) + (h_RT[3] + h_RT[16]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// d()/d[H2]
dqdci =  - k_r*sc[16];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[78] -= dqdci;               // dwdot[NH3]/d[H2]
J[82] += dqdci;               // dwdot[NH2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[12];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[122] -= dqdci;              // dwdot[NH3]/d[H]
J[126] += dqdci;              // dwdot[NH2]/d[H]
// d()/d[NH3]
dqdci =  + k_f*sc[5];
J[267] += dqdci;              // dwdot[H2]/d[NH3]
J[269] -= dqdci;              // dwdot[H]/d[NH3]
J[276] -= dqdci;              // dwdot[NH3]/d[NH3]
J[280] += dqdci;              // dwdot[NH2]/d[NH3]
// d()/d[NH2]
dqdci =  - k_r*sc[3];
J[355] += dqdci;              // dwdot[H2]/d[NH2]
J[357] -= dqdci;              // dwdot[H]/d[NH2]
J[364] -= dqdci;              // dwdot[NH3]/d[NH2]
J[368] += dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[474] -= dqdT;               // dwdot[NH3]/dT
J[478] += dqdT;               // dwdot[NH2]/dT

// reaction 25: NH3 + O <=> NH2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[12];
k_f = 9.4
            * exp(1.94 * tc[0] - (3253.35109826075) * invT);
dlnkfdT = 1.94 * invT + (3253.35109826075) * invT2;
// reverse
phi_r = sc[7]*sc[16];
Kc = exp(g_RT[6] - g_RT[7] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[7] + h_RT[16]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// d()/d[O]
dqdci =  + k_f*sc[12];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[144] -= dqdci;              // dwdot[NH3]/d[O]
J[148] += dqdci;              // dwdot[NH2]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[16];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[166] -= dqdci;              // dwdot[NH3]/d[OH]
J[170] += dqdci;              // dwdot[NH2]/d[OH]
// d()/d[NH3]
dqdci =  + k_f*sc[6];
J[270] -= dqdci;              // dwdot[O]/d[NH3]
J[271] += dqdci;              // dwdot[OH]/d[NH3]
J[276] -= dqdci;              // dwdot[NH3]/d[NH3]
J[280] += dqdci;              // dwdot[NH2]/d[NH3]
// d()/d[NH2]
dqdci =  - k_r*sc[7];
J[358] -= dqdci;              // dwdot[O]/d[NH2]
J[359] += dqdci;              // dwdot[OH]/d[NH2]
J[364] -= dqdci;              // dwdot[NH3]/d[NH2]
J[368] += dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[474] -= dqdT;               // dwdot[NH3]/dT
J[478] += dqdT;               // dwdot[NH2]/dT

// reaction 26: NH3 + OH <=> H2O + NH2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[12];
k_f = 2.04
            * exp(2.04 * tc[0] - (285.042048178425) * invT);
dlnkfdT = 2.04 * invT + (285.042048178425) * invT2;
// reverse
phi_r = sc[9]*sc[16];
Kc = exp(g_RT[7] - g_RT[9] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[12]) + (h_RT[9] + h_RT[16]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// d()/d[OH]
dqdci =  + k_f*sc[12];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[166] -= dqdci;              // dwdot[NH3]/d[OH]
J[170] += dqdci;              // dwdot[NH2]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[16];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[210] -= dqdci;              // dwdot[NH3]/d[H2O]
J[214] += dqdci;              // dwdot[NH2]/d[H2O]
// d()/d[NH3]
dqdci =  + k_f*sc[7];
J[271] -= dqdci;              // dwdot[OH]/d[NH3]
J[273] += dqdci;              // dwdot[H2O]/d[NH3]
J[276] -= dqdci;              // dwdot[NH3]/d[NH3]
J[280] += dqdci;              // dwdot[NH2]/d[NH3]
// d()/d[NH2]
dqdci =  - k_r*sc[9];
J[359] -= dqdci;              // dwdot[OH]/d[NH2]
J[361] += dqdci;              // dwdot[H2O]/d[NH2]
J[364] -= dqdci;              // dwdot[NH3]/d[NH2]
J[368] += dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[474] -= dqdT;               // dwdot[NH3]/dT
J[478] += dqdT;               // dwdot[NH2]/dT

// reaction 27: H + NH2 <=> H2 + NH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[16];
k_f = 40000000
            * exp(- (1837.75229568549) * invT);
dlnkfdT = (1837.75229568549) * invT2;
// reverse
phi_r = sc[3]*sc[17];
Kc = exp(-g_RT[3] + g_RT[5] + g_RT[16] - g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[16]) + (h_RT[3] + h_RT[17]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[16] -= q;// NH2
wdot[17] += q;// NH
// d()/d[H2]
dqdci =  - k_r*sc[17];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[82] -= dqdci;               // dwdot[NH2]/d[H2]
J[83] += dqdci;               // dwdot[NH]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[16];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[126] -= dqdci;              // dwdot[NH2]/d[H]
J[127] += dqdci;              // dwdot[NH]/d[H]
// d()/d[NH2]
dqdci =  + k_f*sc[5];
J[355] += dqdci;              // dwdot[H2]/d[NH2]
J[357] -= dqdci;              // dwdot[H]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[369] += dqdci;              // dwdot[NH]/d[NH2]
// d()/d[NH]
dqdci =  - k_r*sc[3];
J[377] += dqdci;              // dwdot[H2]/d[NH]
J[379] -= dqdci;              // dwdot[H]/d[NH]
J[390] -= dqdci;              // dwdot[NH2]/d[NH]
J[391] += dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[479] += dqdT;               // dwdot[NH]/dT

// reaction 28: N + NH2 <=> 2 H + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[14]*sc[16];
k_f = 70000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = (sc[5] * sc[5])*sc[19];
Kc = refC * exp(-2.000000*g_RT[5] + g_RT[14] + g_RT[16] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[14] + h_RT[16]) + (2.000000*h_RT[5] + h_RT[19]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += 2 * q;// H
wdot[14] -= q;// N
wdot[16] -= q;// NH2
wdot[19] += q;// N2
// d()/d[H]
dqdci =  - k_r*2.000000*sc[5]*sc[19];
J[115] += 2 * dqdci;          // dwdot[H]/d[H]
J[124] -= dqdci;              // dwdot[N]/d[H]
J[126] -= dqdci;              // dwdot[NH2]/d[H]
J[129] += dqdci;              // dwdot[N2]/d[H]
// d()/d[N]
dqdci =  + k_f*sc[16];
J[313] += 2 * dqdci;          // dwdot[H]/d[N]
J[322] -= dqdci;              // dwdot[N]/d[N]
J[324] -= dqdci;              // dwdot[NH2]/d[N]
J[327] += dqdci;              // dwdot[N2]/d[N]
// d()/d[NH2]
dqdci =  + k_f*sc[14];
J[357] += 2 * dqdci;          // dwdot[H]/d[NH2]
J[366] -= dqdci;              // dwdot[N]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[371] += dqdci;              // dwdot[N2]/d[NH2]
// d()/d[N2]
dqdci =  - k_r*sc[5]*sc[5];
J[423] += 2 * dqdci;          // dwdot[H]/d[N2]
J[432] -= dqdci;              // dwdot[N]/d[N2]
J[434] -= dqdci;              // dwdot[NH2]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[467] += 2 * dqdT;           // dwdot[H]/dT
J[476] -= dqdT;               // dwdot[N]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 29: NH2 + O <=> H + HNO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[16];
k_f = 660000000
            * exp(-0.5 * tc[0]);
dlnkfdT = -0.5 * invT;
// reverse
phi_r = sc[5]*sc[13];
Kc = exp(-g_RT[5] + g_RT[6] - g_RT[13] + g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[16]) + (h_RT[5] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[13] += q;// HNO
wdot[16] -= q;// NH2
// d()/d[H]
dqdci =  - k_r*sc[13];
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[123] += dqdci;              // dwdot[HNO]/d[H]
J[126] -= dqdci;              // dwdot[NH2]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[16];
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[145] += dqdci;              // dwdot[HNO]/d[O]
J[148] -= dqdci;              // dwdot[NH2]/d[O]
// d()/d[HNO]
dqdci =  - k_r*sc[5];
J[291] += dqdci;              // dwdot[H]/d[HNO]
J[292] -= dqdci;              // dwdot[O]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[302] -= dqdci;              // dwdot[NH2]/d[HNO]
// d()/d[NH2]
dqdci =  + k_f*sc[6];
J[357] += dqdci;              // dwdot[H]/d[NH2]
J[358] -= dqdci;              // dwdot[O]/d[NH2]
J[365] += dqdci;              // dwdot[HNO]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT

// reaction 30: NH2 + OH <=> H2O + NH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[16];
k_f = 4
            * exp(2 * tc[0] - (503.93626563682) * invT);
dlnkfdT = 2 * invT + (503.93626563682) * invT2;
// reverse
phi_r = sc[9]*sc[17];
Kc = exp(g_RT[7] - g_RT[9] + g_RT[16] - g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[16]) + (h_RT[9] + h_RT[17]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[16] -= q;// NH2
wdot[17] += q;// NH
// d()/d[OH]
dqdci =  + k_f*sc[16];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[170] -= dqdci;              // dwdot[NH2]/d[OH]
J[171] += dqdci;              // dwdot[NH]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[17];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[214] -= dqdci;              // dwdot[NH2]/d[H2O]
J[215] += dqdci;              // dwdot[NH]/d[H2O]
// d()/d[NH2]
dqdci =  + k_f*sc[7];
J[359] -= dqdci;              // dwdot[OH]/d[NH2]
J[361] += dqdci;              // dwdot[H2O]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[369] += dqdci;              // dwdot[NH]/d[NH2]
// d()/d[NH]
dqdci =  - k_r*sc[9];
J[381] -= dqdci;              // dwdot[OH]/d[NH]
J[383] += dqdci;              // dwdot[H2O]/d[NH]
J[390] -= dqdci;              // dwdot[NH2]/d[NH]
J[391] += dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[479] += dqdT;               // dwdot[NH]/dT

// reaction 31: NH2 + NO <=> H2O + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[16];
k_f = 280000000000000
            * exp(-2.654 * tc[0] - (633.046565582337) * invT);
dlnkfdT = -2.654 * invT + (633.046565582337) * invT2;
// reverse
phi_r = sc[9]*sc[19];
Kc = exp(g_RT[0] - g_RT[9] + g_RT[16] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[16]) + (h_RT[9] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[9] += q;// H2O
wdot[16] -= q;// NH2
wdot[19] += q;// N2
// d()/d[NO]
dqdci =  + k_f*sc[16];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[9] += dqdci;                // dwdot[H2O]/d[NO]
J[16] -= dqdci;               // dwdot[NH2]/d[NO]
J[19] += dqdci;               // dwdot[N2]/d[NO]
// d()/d[H2O]
dqdci =  - k_r*sc[19];
J[198] -= dqdci;              // dwdot[NO]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[214] -= dqdci;              // dwdot[NH2]/d[H2O]
J[217] += dqdci;              // dwdot[N2]/d[H2O]
// d()/d[NH2]
dqdci =  + k_f*sc[0];
J[352] -= dqdci;              // dwdot[NO]/d[NH2]
J[361] += dqdci;              // dwdot[H2O]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[371] += dqdci;              // dwdot[N2]/d[NH2]
// d()/d[N2]
dqdci =  - k_r*sc[9];
J[418] -= dqdci;              // dwdot[NO]/d[N2]
J[427] += dqdci;              // dwdot[H2O]/d[N2]
J[434] -= dqdci;              // dwdot[NH2]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 32: NH2 + NO <=> NNH + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[16];
k_f = 31000000
            * exp(-0.48 * tc[0] - (593.795665649569) * invT);
dlnkfdT = -0.48 * invT + (593.795665649569) * invT2;
// reverse
phi_r = sc[7]*sc[15];
Kc = exp(g_RT[0] - g_RT[7] - g_RT[15] + g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[16]) + (h_RT[7] + h_RT[15]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[7] += q;// OH
wdot[15] += q;// NNH
wdot[16] -= q;// NH2
// d()/d[NO]
dqdci =  + k_f*sc[16];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[15] += dqdci;               // dwdot[NNH]/d[NO]
J[16] -= dqdci;               // dwdot[NH2]/d[NO]
// d()/d[OH]
dqdci =  - k_r*sc[15];
J[154] -= dqdci;              // dwdot[NO]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[169] += dqdci;              // dwdot[NNH]/d[OH]
J[170] -= dqdci;              // dwdot[NH2]/d[OH]
// d()/d[NNH]
dqdci =  - k_r*sc[7];
J[330] -= dqdci;              // dwdot[NO]/d[NNH]
J[337] += dqdci;              // dwdot[OH]/d[NNH]
J[345] += dqdci;              // dwdot[NNH]/d[NNH]
J[346] -= dqdci;              // dwdot[NH2]/d[NNH]
// d()/d[NH2]
dqdci =  + k_f*sc[0];
J[352] -= dqdci;              // dwdot[NO]/d[NH2]
J[359] += dqdci;              // dwdot[OH]/d[NH2]
J[367] += dqdci;              // dwdot[NNH]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[477] += dqdT;               // dwdot[NNH]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT

// reaction 33: NH2 + O2 <=> H2NO + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[16];
k_f = 260000
            * exp(0.4872 * tc[0] - (14618.4441416271) * invT);
dlnkfdT = 0.4872 * invT + (14618.4441416271) * invT2;
// reverse
phi_r = sc[6]*sc[20];
Kc = exp(g_RT[2] - g_RT[6] + g_RT[16] - g_RT[20]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[6] + h_RT[20]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[6] += q;// O
wdot[16] -= q;// NH2
wdot[20] += q;// H2NO
// d()/d[O2]
dqdci =  + k_f*sc[16];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[60] -= dqdci;               // dwdot[NH2]/d[O2]
J[64] += dqdci;               // dwdot[H2NO]/d[O2]
// d()/d[O]
dqdci =  - k_r*sc[20];
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[148] -= dqdci;              // dwdot[NH2]/d[O]
J[152] += dqdci;              // dwdot[H2NO]/d[O]
// d()/d[NH2]
dqdci =  + k_f*sc[2];
J[354] -= dqdci;              // dwdot[O2]/d[NH2]
J[358] += dqdci;              // dwdot[O]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[372] += dqdci;              // dwdot[H2NO]/d[NH2]
// d()/d[H2NO]
dqdci =  - k_r*sc[6];
J[442] -= dqdci;              // dwdot[O2]/d[H2NO]
J[446] += dqdci;              // dwdot[O]/d[H2NO]
J[456] -= dqdci;              // dwdot[NH2]/d[H2NO]
J[460] += dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[482] += dqdT;               // dwdot[H2NO]/dT

// reaction 34: H + NH <=> H2 + N
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[17];
k_f = 100000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[3]*sc[14];
Kc = exp(-g_RT[3] + g_RT[5] - g_RT[14] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[17]) + (h_RT[3] + h_RT[14]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[14] += q;// N
wdot[17] -= q;// NH
// d()/d[H2]
dqdci =  - k_r*sc[14];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[80] += dqdci;               // dwdot[N]/d[H2]
J[83] -= dqdci;               // dwdot[NH]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[17];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[124] += dqdci;              // dwdot[N]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[N]
dqdci =  - k_r*sc[3];
J[311] += dqdci;              // dwdot[H2]/d[N]
J[313] -= dqdci;              // dwdot[H]/d[N]
J[322] += dqdci;              // dwdot[N]/d[N]
J[325] -= dqdci;              // dwdot[NH]/d[N]
// d()/d[NH]
dqdci =  + k_f*sc[5];
J[377] += dqdci;              // dwdot[H2]/d[NH]
J[379] -= dqdci;              // dwdot[H]/d[NH]
J[388] += dqdci;              // dwdot[N]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[476] += dqdT;               // dwdot[N]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 35: NH + O <=> H + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[17];
k_f = 92000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[0]*sc[5];
Kc = exp(-g_RT[0] - g_RT[5] + g_RT[6] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[0] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[17] -= q;// NH
// d()/d[NO]
dqdci =  - k_r*sc[5];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[5] += dqdci;                // dwdot[H]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
J[17] -= dqdci;               // dwdot[NH]/d[NO]
// d()/d[H]
dqdci =  - k_r*sc[0];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[17];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[149] -= dqdci;              // dwdot[NH]/d[O]
// d()/d[NH]
dqdci =  + k_f*sc[6];
J[374] += dqdci;              // dwdot[NO]/d[NH]
J[379] += dqdci;              // dwdot[H]/d[NH]
J[380] -= dqdci;              // dwdot[O]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 36: NH + OH <=> H + HNO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[17];
k_f = 40000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[5]*sc[13];
Kc = exp(-g_RT[5] + g_RT[7] - g_RT[13] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[17]) + (h_RT[5] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += q;// H
wdot[7] -= q;// OH
wdot[13] += q;// HNO
wdot[17] -= q;// NH
// d()/d[H]
dqdci =  - k_r*sc[13];
J[115] += dqdci;              // dwdot[H]/d[H]
J[117] -= dqdci;              // dwdot[OH]/d[H]
J[123] += dqdci;              // dwdot[HNO]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[OH]
dqdci =  + k_f*sc[17];
J[159] += dqdci;              // dwdot[H]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[167] += dqdci;              // dwdot[HNO]/d[OH]
J[171] -= dqdci;              // dwdot[NH]/d[OH]
// d()/d[HNO]
dqdci =  - k_r*sc[5];
J[291] += dqdci;              // dwdot[H]/d[HNO]
J[293] -= dqdci;              // dwdot[OH]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[303] -= dqdci;              // dwdot[NH]/d[HNO]
// d()/d[NH]
dqdci =  + k_f*sc[7];
J[379] += dqdci;              // dwdot[H]/d[NH]
J[381] -= dqdci;              // dwdot[OH]/d[NH]
J[387] += dqdci;              // dwdot[HNO]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[467] += dqdT;               // dwdot[H]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 37: NH + OH <=> H2O + N
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[17];
k_f = 500000
            * exp(0.5 * tc[0] - (1006.67487560903) * invT);
dlnkfdT = 0.5 * invT + (1006.67487560903) * invT2;
// reverse
phi_r = sc[9]*sc[14];
Kc = exp(g_RT[7] - g_RT[9] - g_RT[14] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[17]) + (h_RT[9] + h_RT[14]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[14] += q;// N
wdot[17] -= q;// NH
// d()/d[OH]
dqdci =  + k_f*sc[17];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[168] += dqdci;              // dwdot[N]/d[OH]
J[171] -= dqdci;              // dwdot[NH]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[14];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[212] += dqdci;              // dwdot[N]/d[H2O]
J[215] -= dqdci;              // dwdot[NH]/d[H2O]
// d()/d[N]
dqdci =  - k_r*sc[9];
J[315] -= dqdci;              // dwdot[OH]/d[N]
J[317] += dqdci;              // dwdot[H2O]/d[N]
J[322] += dqdci;              // dwdot[N]/d[N]
J[325] -= dqdci;              // dwdot[NH]/d[N]
// d()/d[NH]
dqdci =  + k_f*sc[7];
J[381] -= dqdci;              // dwdot[OH]/d[NH]
J[383] += dqdci;              // dwdot[H2O]/d[NH]
J[388] += dqdci;              // dwdot[N]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[476] += dqdT;               // dwdot[N]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 38: NH + O2 <=> HNO + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[17];
k_f = 0.46
            * exp(2 * tc[0] - (3271.39141572985) * invT);
dlnkfdT = 2 * invT + (3271.39141572985) * invT2;
// reverse
phi_r = sc[6]*sc[13];
Kc = exp(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[6] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[6] += q;// O
wdot[13] += q;// HNO
wdot[17] -= q;// NH
// d()/d[O2]
dqdci =  + k_f*sc[17];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[57] += dqdci;               // dwdot[HNO]/d[O2]
J[61] -= dqdci;               // dwdot[NH]/d[O2]
// d()/d[O]
dqdci =  - k_r*sc[13];
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[145] += dqdci;              // dwdot[HNO]/d[O]
J[149] -= dqdci;              // dwdot[NH]/d[O]
// d()/d[HNO]
dqdci =  - k_r*sc[6];
J[288] -= dqdci;              // dwdot[O2]/d[HNO]
J[292] += dqdci;              // dwdot[O]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[303] -= dqdci;              // dwdot[NH]/d[HNO]
// d()/d[NH]
dqdci =  + k_f*sc[2];
J[376] -= dqdci;              // dwdot[O2]/d[NH]
J[380] += dqdci;              // dwdot[O]/d[NH]
J[387] += dqdci;              // dwdot[HNO]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 39: NH + NO <=> H + N2O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[17];
k_f = 180000000
            * exp(-0.351 * tc[0] - (-122.784866456352) * invT);
dlnkfdT = -0.351 * invT + (-122.784866456352) * invT2;
// reverse
phi_r = sc[1]*sc[5];
Kc = exp(g_RT[0] - g_RT[1] - g_RT[5] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[17]) + (h_RT[1] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[1] += q;// N2O
wdot[5] += q;// H
wdot[17] -= q;// NH
// d()/d[NO]
dqdci =  + k_f*sc[17];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[1] += dqdci;                // dwdot[N2O]/d[NO]
J[5] += dqdci;                // dwdot[H]/d[NO]
J[17] -= dqdci;               // dwdot[NH]/d[NO]
// d()/d[N2O]
dqdci =  - k_r*sc[5];
J[22] -= dqdci;               // dwdot[NO]/d[N2O]
J[23] += dqdci;               // dwdot[N2O]/d[N2O]
J[27] += dqdci;               // dwdot[H]/d[N2O]
J[39] -= dqdci;               // dwdot[NH]/d[N2O]
// d()/d[H]
dqdci =  - k_r*sc[1];
J[110] -= dqdci;              // dwdot[NO]/d[H]
J[111] += dqdci;              // dwdot[N2O]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[NH]
dqdci =  + k_f*sc[0];
J[374] -= dqdci;              // dwdot[NO]/d[NH]
J[375] += dqdci;              // dwdot[N2O]/d[NH]
J[379] += dqdci;              // dwdot[H]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[463] += dqdT;               // dwdot[N2O]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 40: NH + NO <=> N2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[17];
k_f = 22000000
            * exp(-0.23 * tc[0]);
dlnkfdT = -0.23 * invT;
// reverse
phi_r = sc[7]*sc[19];
Kc = exp(g_RT[0] - g_RT[7] + g_RT[17] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[17]) + (h_RT[7] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[7] += q;// OH
wdot[17] -= q;// NH
wdot[19] += q;// N2
// d()/d[NO]
dqdci =  + k_f*sc[17];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[17] -= dqdci;               // dwdot[NH]/d[NO]
J[19] += dqdci;               // dwdot[N2]/d[NO]
// d()/d[OH]
dqdci =  - k_r*sc[19];
J[154] -= dqdci;              // dwdot[NO]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[171] -= dqdci;              // dwdot[NH]/d[OH]
J[173] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[NH]
dqdci =  + k_f*sc[0];
J[374] -= dqdci;              // dwdot[NO]/d[NH]
J[381] += dqdci;              // dwdot[OH]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
J[393] += dqdci;              // dwdot[N2]/d[NH]
// d()/d[N2]
dqdci =  - k_r*sc[7];
J[418] -= dqdci;              // dwdot[NO]/d[N2]
J[425] += dqdci;              // dwdot[OH]/d[N2]
J[435] -= dqdci;              // dwdot[NH]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[479] -= dqdT;               // dwdot[NH]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 42: H + NNH <=> H2 + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[15];
k_f = 100000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[3]*sc[19];
Kc = exp(-g_RT[3] + g_RT[5] + g_RT[15] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[15]) + (h_RT[3] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[15] -= q;// NNH
wdot[19] += q;// N2
// d()/d[H2]
dqdci =  - k_r*sc[19];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[81] -= dqdci;               // dwdot[NNH]/d[H2]
J[85] += dqdci;               // dwdot[N2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[15];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[125] -= dqdci;              // dwdot[NNH]/d[H]
J[129] += dqdci;              // dwdot[N2]/d[H]
// d()/d[NNH]
dqdci =  + k_f*sc[5];
J[333] += dqdci;              // dwdot[H2]/d[NNH]
J[335] -= dqdci;              // dwdot[H]/d[NNH]
J[345] -= dqdci;              // dwdot[NNH]/d[NNH]
J[349] += dqdci;              // dwdot[N2]/d[NNH]
// d()/d[N2]
dqdci =  - k_r*sc[3];
J[421] += dqdci;              // dwdot[H2]/d[N2]
J[423] -= dqdci;              // dwdot[H]/d[N2]
J[433] -= dqdci;              // dwdot[NNH]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[477] -= dqdT;               // dwdot[NNH]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 43: NNH + O <=> H + N2O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[15];
k_f = 100000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[1]*sc[5];
Kc = exp(-g_RT[1] - g_RT[5] + g_RT[6] + g_RT[15]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[15]) + (h_RT[1] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] += q;// N2O
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[15] -= q;// NNH
// d()/d[N2O]
dqdci =  - k_r*sc[5];
J[23] += dqdci;               // dwdot[N2O]/d[N2O]
J[27] += dqdci;               // dwdot[H]/d[N2O]
J[28] -= dqdci;               // dwdot[O]/d[N2O]
J[37] -= dqdci;               // dwdot[NNH]/d[N2O]
// d()/d[H]
dqdci =  - k_r*sc[1];
J[111] += dqdci;              // dwdot[N2O]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[125] -= dqdci;              // dwdot[NNH]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[15];
J[133] += dqdci;              // dwdot[N2O]/d[O]
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[147] -= dqdci;              // dwdot[NNH]/d[O]
// d()/d[NNH]
dqdci =  + k_f*sc[6];
J[331] += dqdci;              // dwdot[N2O]/d[NNH]
J[335] += dqdci;              // dwdot[H]/d[NNH]
J[336] -= dqdci;              // dwdot[O]/d[NNH]
J[345] -= dqdci;              // dwdot[NNH]/d[NNH]
// d()/dT
J[463] += dqdT;               // dwdot[N2O]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[477] -= dqdT;               // dwdot[NNH]/dT

// reaction 44: NNH + OH <=> H2O + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[15];
k_f = 50000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[9]*sc[19];
Kc = exp(g_RT[7] - g_RT[9] + g_RT[15] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[15]) + (h_RT[9] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[15] -= q;// NNH
wdot[19] += q;// N2
// d()/d[OH]
dqdci =  + k_f*sc[15];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[169] -= dqdci;              // dwdot[NNH]/d[OH]
J[173] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[19];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[213] -= dqdci;              // dwdot[NNH]/d[H2O]
J[217] += dqdci;              // dwdot[N2]/d[H2O]
// d()/d[NNH]
dqdci =  + k_f*sc[7];
J[337] -= dqdci;              // dwdot[OH]/d[NNH]
J[339] += dqdci;              // dwdot[H2O]/d[NNH]
J[345] -= dqdci;              // dwdot[NNH]/d[NNH]
J[349] += dqdci;              // dwdot[N2]/d[NNH]
// d()/d[N2]
dqdci =  - k_r*sc[9];
J[425] -= dqdci;              // dwdot[OH]/d[N2]
J[427] += dqdci;              // dwdot[H2O]/d[N2]
J[433] -= dqdci;              // dwdot[NNH]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[477] -= dqdT;               // dwdot[NNH]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 45: NNH + O2 <=> HO2 + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[15];
k_f = 200000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[8]*sc[19];
Kc = exp(g_RT[2] - g_RT[8] + g_RT[15] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[8] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[8] += q;// HO2
wdot[15] -= q;// NNH
wdot[19] += q;// N2
// d()/d[O2]
dqdci =  + k_f*sc[15];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[52] += dqdci;               // dwdot[HO2]/d[O2]
J[59] -= dqdci;               // dwdot[NNH]/d[O2]
J[63] += dqdci;               // dwdot[N2]/d[O2]
// d()/d[HO2]
dqdci =  - k_r*sc[19];
J[178] -= dqdci;              // dwdot[O2]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[191] -= dqdci;              // dwdot[NNH]/d[HO2]
J[195] += dqdci;              // dwdot[N2]/d[HO2]
// d()/d[NNH]
dqdci =  + k_f*sc[2];
J[332] -= dqdci;              // dwdot[O2]/d[NNH]
J[338] += dqdci;              // dwdot[HO2]/d[NNH]
J[345] -= dqdci;              // dwdot[NNH]/d[NNH]
J[349] += dqdci;              // dwdot[N2]/d[NNH]
// d()/d[N2]
dqdci =  - k_r*sc[8];
J[420] -= dqdci;              // dwdot[O2]/d[N2]
J[426] += dqdci;              // dwdot[HO2]/d[N2]
J[433] -= dqdci;              // dwdot[NNH]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[477] -= dqdT;               // dwdot[NNH]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 46: N2 + O <=> N + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[19];
k_f = 14700000
            * exp(0.3 * tc[0] - (37885.5775072734) * invT);
dlnkfdT = 0.3 * invT + (37885.5775072734) * invT2;
// reverse
phi_r = sc[0]*sc[14];
Kc = exp(-g_RT[0] + g_RT[6] - g_RT[14] + g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[19]) + (h_RT[0] + h_RT[14]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[6] -= q;// O
wdot[14] += q;// N
wdot[19] -= q;// N2
// d()/d[NO]
dqdci =  - k_r*sc[14];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
J[14] += dqdci;               // dwdot[N]/d[NO]
J[19] -= dqdci;               // dwdot[N2]/d[NO]
// d()/d[O]
dqdci =  + k_f*sc[19];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[146] += dqdci;              // dwdot[N]/d[O]
J[151] -= dqdci;              // dwdot[N2]/d[O]
// d()/d[N]
dqdci =  - k_r*sc[0];
J[308] += dqdci;              // dwdot[NO]/d[N]
J[314] -= dqdci;              // dwdot[O]/d[N]
J[322] += dqdci;              // dwdot[N]/d[N]
J[327] -= dqdci;              // dwdot[N2]/d[N]
// d()/d[N2]
dqdci =  + k_f*sc[6];
J[418] += dqdci;              // dwdot[NO]/d[N2]
J[424] -= dqdci;              // dwdot[O]/d[N2]
J[432] += dqdci;              // dwdot[N]/d[N2]
J[437] -= dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[476] += dqdT;               // dwdot[N]/dT
J[481] -= dqdT;               // dwdot[N2]/dT

// reaction 47: HO2 + NO <=> NO2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[8];
k_f = 2100000
            * exp(- (-241.745286252587) * invT);
dlnkfdT = (-241.745286252587) * invT2;
// reverse
phi_r = sc[7]*sc[11];
Kc = exp(g_RT[0] - g_RT[7] + g_RT[8] - g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[8]) + (h_RT[7] + h_RT[11]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[7] += q;// OH
wdot[8] -= q;// HO2
wdot[11] += q;// NO2
// d()/d[NO]
dqdci =  + k_f*sc[8];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[8] -= dqdci;                // dwdot[HO2]/d[NO]
J[11] += dqdci;               // dwdot[NO2]/d[NO]
// d()/d[OH]
dqdci =  - k_r*sc[11];
J[154] -= dqdci;              // dwdot[NO]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
J[165] += dqdci;              // dwdot[NO2]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[0];
J[176] -= dqdci;              // dwdot[NO]/d[HO2]
J[183] += dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[187] += dqdci;              // dwdot[NO2]/d[HO2]
// d()/d[NO2]
dqdci =  - k_r*sc[7];
J[242] -= dqdci;              // dwdot[NO]/d[NO2]
J[249] += dqdci;              // dwdot[OH]/d[NO2]
J[250] -= dqdci;              // dwdot[HO2]/d[NO2]
J[253] += dqdci;              // dwdot[NO2]/d[NO2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[473] += dqdT;               // dwdot[NO2]/dT

// reaction 49: H + NO2 <=> NO + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[11];
k_f = 350000000
            * exp(- (755.308086706252) * invT);
dlnkfdT = (755.308086706252) * invT2;
// reverse
phi_r = sc[0]*sc[7];
Kc = exp(-g_RT[0] + g_RT[5] - g_RT[7] + g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[11]) + (h_RT[0] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[11] -= q;// NO2
// d()/d[NO]
dqdci =  - k_r*sc[7];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[5] -= dqdci;                // dwdot[H]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[11] -= dqdci;               // dwdot[NO2]/d[NO]
// d()/d[H]
dqdci =  + k_f*sc[11];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[121] -= dqdci;              // dwdot[NO2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[0];
J[154] += dqdci;              // dwdot[NO]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[165] -= dqdci;              // dwdot[NO2]/d[OH]
// d()/d[NO2]
dqdci =  + k_f*sc[5];
J[242] += dqdci;              // dwdot[NO]/d[NO2]
J[247] -= dqdci;              // dwdot[H]/d[NO2]
J[249] += dqdci;              // dwdot[OH]/d[NO2]
J[253] -= dqdci;              // dwdot[NO2]/d[NO2]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[473] -= dqdT;               // dwdot[NO2]/dT

// reaction 50: NO2 + O <=> NO + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[11];
k_f = 10000000
            * exp(- (301.879677816251) * invT);
dlnkfdT = (301.879677816251) * invT2;
// reverse
phi_r = sc[0]*sc[2];
Kc = exp(-g_RT[0] - g_RT[2] + g_RT[6] + g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[11]) + (h_RT[0] + h_RT[2]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[2] += q;// O2
wdot[6] -= q;// O
wdot[11] -= q;// NO2
// d()/d[NO]
dqdci =  - k_r*sc[2];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[2] += dqdci;                // dwdot[O2]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
J[11] -= dqdci;               // dwdot[NO2]/d[NO]
// d()/d[O2]
dqdci =  - k_r*sc[0];
J[44] += dqdci;               // dwdot[NO]/d[O2]
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[50] -= dqdci;               // dwdot[O]/d[O2]
J[55] -= dqdci;               // dwdot[NO2]/d[O2]
// d()/d[O]
dqdci =  + k_f*sc[11];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[134] += dqdci;              // dwdot[O2]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[143] -= dqdci;              // dwdot[NO2]/d[O]
// d()/d[NO2]
dqdci =  + k_f*sc[6];
J[242] += dqdci;              // dwdot[NO]/d[NO2]
J[244] += dqdci;              // dwdot[O2]/d[NO2]
J[248] -= dqdci;              // dwdot[O]/d[NO2]
J[253] -= dqdci;              // dwdot[NO2]/d[NO2]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[473] -= dqdT;               // dwdot[NO2]/dT

// reaction 52: HNO + OH <=> H2O + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[13];
k_f = 36000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[0]*sc[9];
Kc = exp(-g_RT[0] + g_RT[7] - g_RT[9] + g_RT[13]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[13]) + (h_RT[0] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[13] -= q;// HNO
// d()/d[NO]
dqdci =  - k_r*sc[9];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[7] -= dqdci;                // dwdot[OH]/d[NO]
J[9] += dqdci;                // dwdot[H2O]/d[NO]
J[13] -= dqdci;               // dwdot[HNO]/d[NO]
// d()/d[OH]
dqdci =  + k_f*sc[13];
J[154] += dqdci;              // dwdot[NO]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[167] -= dqdci;              // dwdot[HNO]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[0];
J[198] += dqdci;              // dwdot[NO]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[211] -= dqdci;              // dwdot[HNO]/d[H2O]
// d()/d[HNO]
dqdci =  + k_f*sc[7];
J[286] += dqdci;              // dwdot[NO]/d[HNO]
J[293] -= dqdci;              // dwdot[OH]/d[HNO]
J[295] += dqdci;              // dwdot[H2O]/d[HNO]
J[299] -= dqdci;              // dwdot[HNO]/d[HNO]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[475] -= dqdT;               // dwdot[HNO]/dT

// reaction 53: H + HNO <=> H2 + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[13];
k_f = 440000
            * exp(0.72 * tc[0] - (327.141154439648) * invT);
dlnkfdT = 0.72 * invT + (327.141154439648) * invT2;
// reverse
phi_r = sc[0]*sc[3];
Kc = exp(-g_RT[0] - g_RT[3] + g_RT[5] + g_RT[13]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[13]) + (h_RT[0] + h_RT[3]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[13] -= q;// HNO
// d()/d[NO]
dqdci =  - k_r*sc[3];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[3] += dqdci;                // dwdot[H2]/d[NO]
J[5] -= dqdci;                // dwdot[H]/d[NO]
J[13] -= dqdci;               // dwdot[HNO]/d[NO]
// d()/d[H2]
dqdci =  - k_r*sc[0];
J[66] += dqdci;               // dwdot[NO]/d[H2]
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[79] -= dqdci;               // dwdot[HNO]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[13];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[123] -= dqdci;              // dwdot[HNO]/d[H]
// d()/d[HNO]
dqdci =  + k_f*sc[5];
J[286] += dqdci;              // dwdot[NO]/d[HNO]
J[289] += dqdci;              // dwdot[H2]/d[HNO]
J[291] -= dqdci;              // dwdot[H]/d[HNO]
J[299] -= dqdci;              // dwdot[HNO]/d[HNO]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[475] -= dqdT;               // dwdot[HNO]/dT

// reaction 54: N + O2 <=> NO + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[14];
k_f = 6400
            * exp(1 * tc[0] - (3163.1444787486) * invT);
dlnkfdT = 1 * invT + (3163.1444787486) * invT2;
// reverse
phi_r = sc[0]*sc[6];
Kc = exp(-g_RT[0] + g_RT[2] - g_RT[6] + g_RT[14]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[0] + h_RT[6]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[2] -= q;// O2
wdot[6] += q;// O
wdot[14] -= q;// N
// d()/d[NO]
dqdci =  - k_r*sc[6];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[2] -= dqdci;                // dwdot[O2]/d[NO]
J[6] += dqdci;                // dwdot[O]/d[NO]
J[14] -= dqdci;               // dwdot[N]/d[NO]
// d()/d[O2]
dqdci =  + k_f*sc[14];
J[44] += dqdci;               // dwdot[NO]/d[O2]
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[58] -= dqdci;               // dwdot[N]/d[O2]
// d()/d[O]
dqdci =  - k_r*sc[0];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[146] -= dqdci;              // dwdot[N]/d[O]
// d()/d[N]
dqdci =  + k_f*sc[2];
J[308] += dqdci;              // dwdot[NO]/d[N]
J[310] -= dqdci;              // dwdot[O2]/d[N]
J[314] += dqdci;              // dwdot[O]/d[N]
J[322] -= dqdci;              // dwdot[N]/d[N]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[476] -= dqdT;               // dwdot[N]/dT

// reaction 55: N + OH <=> H + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[14];
k_f = 38000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[0]*sc[5];
Kc = exp(-g_RT[0] - g_RT[5] + g_RT[7] + g_RT[14]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[14]) + (h_RT[0] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[5] += q;// H
wdot[7] -= q;// OH
wdot[14] -= q;// N
// d()/d[NO]
dqdci =  - k_r*sc[5];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[5] += dqdci;                // dwdot[H]/d[NO]
J[7] -= dqdci;                // dwdot[OH]/d[NO]
J[14] -= dqdci;               // dwdot[N]/d[NO]
// d()/d[H]
dqdci =  - k_r*sc[0];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[117] -= dqdci;              // dwdot[OH]/d[H]
J[124] -= dqdci;              // dwdot[N]/d[H]
// d()/d[OH]
dqdci =  + k_f*sc[14];
J[154] += dqdci;              // dwdot[NO]/d[OH]
J[159] += dqdci;              // dwdot[H]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[168] -= dqdci;              // dwdot[N]/d[OH]
// d()/d[N]
dqdci =  + k_f*sc[7];
J[308] += dqdci;              // dwdot[NO]/d[N]
J[313] += dqdci;              // dwdot[H]/d[N]
J[315] -= dqdci;              // dwdot[OH]/d[N]
J[322] -= dqdci;              // dwdot[N]/d[N]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[476] -= dqdT;               // dwdot[N]/dT

// reaction 56: H2NO + O <=> HNO + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[20];
k_f = 30
            * exp(2 * tc[0] - (1006.43333160944) * invT);
dlnkfdT = 2 * invT + (1006.43333160944) * invT2;
// reverse
phi_r = sc[7]*sc[13];
Kc = exp(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[20]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[20]) + (h_RT[7] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[13] += q;// HNO
wdot[20] -= q;// H2NO
// d()/d[O]
dqdci =  + k_f*sc[20];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[145] += dqdci;              // dwdot[HNO]/d[O]
J[152] -= dqdci;              // dwdot[H2NO]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[13];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[167] += dqdci;              // dwdot[HNO]/d[OH]
J[174] -= dqdci;              // dwdot[H2NO]/d[OH]
// d()/d[HNO]
dqdci =  - k_r*sc[7];
J[292] -= dqdci;              // dwdot[O]/d[HNO]
J[293] += dqdci;              // dwdot[OH]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[306] -= dqdci;              // dwdot[H2NO]/d[HNO]
// d()/d[H2NO]
dqdci =  + k_f*sc[6];
J[446] -= dqdci;              // dwdot[O]/d[H2NO]
J[447] += dqdci;              // dwdot[OH]/d[H2NO]
J[453] += dqdci;              // dwdot[HNO]/d[H2NO]
J[460] -= dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[482] -= dqdT;               // dwdot[H2NO]/dT

// reaction 57: H2NO + O2 <=> HNO + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[20];
k_f = 3000000
            * exp(- (12580.416645118) * invT);
dlnkfdT = (12580.416645118) * invT2;
// reverse
phi_r = sc[8]*sc[13];
Kc = exp(g_RT[2] - g_RT[8] - g_RT[13] + g_RT[20]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[20]) + (h_RT[8] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[8] += q;// HO2
wdot[13] += q;// HNO
wdot[20] -= q;// H2NO
// d()/d[O2]
dqdci =  + k_f*sc[20];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[52] += dqdci;               // dwdot[HO2]/d[O2]
J[57] += dqdci;               // dwdot[HNO]/d[O2]
J[64] -= dqdci;               // dwdot[H2NO]/d[O2]
// d()/d[HO2]
dqdci =  - k_r*sc[13];
J[178] -= dqdci;              // dwdot[O2]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[189] += dqdci;              // dwdot[HNO]/d[HO2]
J[196] -= dqdci;              // dwdot[H2NO]/d[HO2]
// d()/d[HNO]
dqdci =  - k_r*sc[8];
J[288] -= dqdci;              // dwdot[O2]/d[HNO]
J[294] += dqdci;              // dwdot[HO2]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[306] -= dqdci;              // dwdot[H2NO]/d[HNO]
// d()/d[H2NO]
dqdci =  + k_f*sc[2];
J[442] -= dqdci;              // dwdot[O2]/d[H2NO]
J[448] += dqdci;              // dwdot[HO2]/d[H2NO]
J[453] += dqdci;              // dwdot[HNO]/d[H2NO]
J[460] -= dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[482] -= dqdT;               // dwdot[H2NO]/dT

// reaction 58: H2NO + HO2 <=> H2O2 + HNO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[8]*sc[20];
k_f = 0.029
            * exp(2.69 * tc[0] - (-805.146665287552) * invT);
dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
// reverse
phi_r = sc[10]*sc[13];
Kc = exp(g_RT[8] - g_RT[10] - g_RT[13] + g_RT[20]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[8] + h_RT[20]) + (h_RT[10] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[8] -= q;// HO2
wdot[10] += q;// H2O2
wdot[13] += q;// HNO
wdot[20] -= q;// H2NO
// d()/d[HO2]
dqdci =  + k_f*sc[20];
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[186] += dqdci;              // dwdot[H2O2]/d[HO2]
J[189] += dqdci;              // dwdot[HNO]/d[HO2]
J[196] -= dqdci;              // dwdot[H2NO]/d[HO2]
// d()/d[H2O2]
dqdci =  - k_r*sc[13];
J[228] -= dqdci;              // dwdot[HO2]/d[H2O2]
J[230] += dqdci;              // dwdot[H2O2]/d[H2O2]
J[233] += dqdci;              // dwdot[HNO]/d[H2O2]
J[240] -= dqdci;              // dwdot[H2NO]/d[H2O2]
// d()/d[HNO]
dqdci =  - k_r*sc[10];
J[294] -= dqdci;              // dwdot[HO2]/d[HNO]
J[296] += dqdci;              // dwdot[H2O2]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[306] -= dqdci;              // dwdot[H2NO]/d[HNO]
// d()/d[H2NO]
dqdci =  + k_f*sc[8];
J[448] -= dqdci;              // dwdot[HO2]/d[H2NO]
J[450] += dqdci;              // dwdot[H2O2]/d[H2NO]
J[453] += dqdci;              // dwdot[HNO]/d[H2NO]
J[460] -= dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[472] += dqdT;               // dwdot[H2O2]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[482] -= dqdT;               // dwdot[H2NO]/dT

// reaction 60: N2O + O <=> 2 NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[6];
k_f = 91500000
            * exp(- (13935.5791261301) * invT);
dlnkfdT = (13935.5791261301) * invT2;
// reverse
phi_r = (sc[0] * sc[0]);
Kc = exp(-2.000000*g_RT[0] + g_RT[1] + g_RT[6]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (2.000000*h_RT[0]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += 2 * q;// NO
wdot[1] -= q;// N2O
wdot[6] -= q;// O
// d()/d[NO]
dqdci =  - k_r*2.000000*sc[0];
J[0] += 2 * dqdci;            // dwdot[NO]/d[NO]
J[1] -= dqdci;                // dwdot[N2O]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
// d()/d[N2O]
dqdci =  + k_f*sc[6];
J[22] += 2 * dqdci;           // dwdot[NO]/d[N2O]
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[28] -= dqdci;               // dwdot[O]/d[N2O]
// d()/d[O]
dqdci =  + k_f*sc[1];
J[132] += 2 * dqdci;          // dwdot[NO]/d[O]
J[133] -= dqdci;              // dwdot[N2O]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
// d()/dT
J[462] += 2 * dqdT;           // dwdot[NO]/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[468] -= dqdT;               // dwdot[O]/dT

// reaction 61: H + N2O <=> N2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[5];
k_f = 33100
            * exp(- (2561.37282894602) * invT);
dlnkfdT = (2561.37282894602) * invT2;
// reverse
phi_r = sc[7]*sc[19];
Kc = exp(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[5]) + (h_RT[7] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] -= q;// N2O
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[19] += q;// N2
// d()/d[N2O]
dqdci =  + k_f*sc[5];
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[27] -= dqdci;               // dwdot[H]/d[N2O]
J[29] += dqdci;               // dwdot[OH]/d[N2O]
J[41] += dqdci;               // dwdot[N2]/d[N2O]
// d()/d[H]
dqdci =  + k_f*sc[1];
J[111] -= dqdci;              // dwdot[N2O]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[129] += dqdci;              // dwdot[N2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[19];
J[155] -= dqdci;              // dwdot[N2O]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[173] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[N2]
dqdci =  - k_r*sc[7];
J[419] -= dqdci;              // dwdot[N2O]/d[N2]
J[423] -= dqdci;              // dwdot[H]/d[N2]
J[425] += dqdci;              // dwdot[OH]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 62: H + N2O <=> N2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[5];
k_f = 783000000
            * exp(- (9757.37114995351) * invT);
dlnkfdT = (9757.37114995351) * invT2;
// reverse
phi_r = sc[7]*sc[19];
Kc = exp(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[5]) + (h_RT[7] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] -= q;// N2O
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[19] += q;// N2
// d()/d[N2O]
dqdci =  + k_f*sc[5];
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[27] -= dqdci;               // dwdot[H]/d[N2O]
J[29] += dqdci;               // dwdot[OH]/d[N2O]
J[41] += dqdci;               // dwdot[N2]/d[N2O]
// d()/d[H]
dqdci =  + k_f*sc[1];
J[111] -= dqdci;              // dwdot[N2O]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[129] += dqdci;              // dwdot[N2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[19];
J[155] -= dqdci;              // dwdot[N2O]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[173] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[N2]
dqdci =  - k_r*sc[7];
J[419] -= dqdci;              // dwdot[N2O]/d[N2]
J[423] -= dqdci;              // dwdot[H]/d[N2]
J[425] += dqdci;              // dwdot[OH]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[481] += dqdT;               // dwdot[N2]/dT

// reaction 63: N2O + OH <=> HO2 + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[7];
k_f = 2000000
            * exp(- (20128.6666321888) * invT);
dlnkfdT = (20128.6666321888) * invT2;
// reverse
phi_r = sc[8]*sc[19];
Kc = exp(g_RT[1] + g_RT[7] - g_RT[8] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[8] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] -= q;// N2O
wdot[7] -= q;// OH
wdot[8] += q;// HO2
wdot[19] += q;// N2
// d()/d[N2O]
dqdci =  + k_f*sc[7];
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[29] -= dqdci;               // dwdot[OH]/d[N2O]
J[30] += dqdci;               // dwdot[HO2]/d[N2O]
J[41] += dqdci;               // dwdot[N2]/d[N2O]
// d()/d[OH]
dqdci =  + k_f*sc[1];
J[155] -= dqdci;              // dwdot[N2O]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[173] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[19];
J[177] -= dqdci;              // dwdot[N2O]/d[HO2]
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[195] += dqdci;              // dwdot[N2]/d[HO2]
// d()/d[N2]
dqdci =  - k_r*sc[8];
J[419] -= dqdci;              // dwdot[N2O]/d[N2]
J[425] -= dqdci;              // dwdot[OH]/d[N2]
J[426] += dqdci;              // dwdot[HO2]/d[N2]
J[437] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[481] += dqdT;               // dwdot[N2]/dT

amrex::Real c_R[21], dcRdT[21], e_RT[21];
amrex::Real * eh_RT;
if (consP) {
cp_R(c_R, tc);
dcvpRdT(dcRdT, tc);
eh_RT = &h_RT[0];
}
else {
cv_R(c_R, tc);
dcvpRdT(dcRdT, tc);
speciesInternalEnergy(e_RT, tc);
eh_RT = &e_RT[0];
}

amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT=0.0, dehmixdT=0.0;
for (int k = 0; k < 21; ++k) {
cmix += c_R[k]*sc[k];
dcmixdT += dcRdT[k]*sc[k];
ehmix += eh_RT[k]*wdot[k];
dehmixdT += invT*(c_R[k]-eh_RT[k])*wdot[k] + eh_RT[k]*J[462+k];
}

amrex::Real cmixinv = 1.0/cmix;
amrex::Real tmp1 = ehmix*cmixinv;
amrex::Real tmp3 = cmixinv*T;
amrex::Real tmp2 = tmp1*tmp3;
amrex::Real dehmixdc;
// dTdot/d[X]
for (int k = 0; k < 21; ++k) {
dehmixdc = 0.0;
for (int m = 0; m < 21; ++m) {
dehmixdc += eh_RT[m]*J[k*22+m];
}
J[k*22+21] = tmp2*c_R[k] - tmp3*dehmixdc;
}
// dTdot/dT
J[483] = -tmp1 + tmp2*dcmixdT - tmp3*dehmixdT;
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void DWDOT(amrex::Real *  J, amrex::Real *  sc, amrex::Real *  Tp, const int * consP)
{
amrex::Real c[21];

for (int k=0; k<21; k++) {
c[k] = 1.e6 * sc[k];
}

aJacobian(J, c, *Tp, *consP);

// dwdot[k]/dT
// dTdot/d[X]
for (int k=0; k<21; k++) {
J[462+k] *= 1.e-6;
J[k*22+21] *= 1.e6;
}

return;
}


// Transport function declarations 

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetLENIMC(int* LENIMC ) {
*LENIMC = 87;}


AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetLENRMC(int* LENRMC ) {
*LENRMC = 9198;}


AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetNO(int* NO ) {
*NO = 4;}


AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetKK(int* KK ) {
*KK = 21;}


AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetNLITE(int* NLITE ) {
*NLITE = 3;}


// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetPATM(amrex::Real* PATM) {
*PATM =   0.1013250000000000E+07;}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetWT(amrex::Real* WT ) {
WT[0] = 3.00060000E+01;
WT[1] = 4.40130000E+01;
WT[2] = 3.19980000E+01;
WT[3] = 2.01600000E+00;
WT[4] = 3.99500000E+01;
WT[5] = 1.00800000E+00;
WT[6] = 1.59990000E+01;
WT[7] = 1.70070000E+01;
WT[8] = 3.30060000E+01;
WT[9] = 1.80150000E+01;
WT[10] = 3.40140000E+01;
WT[11] = 4.60050000E+01;
WT[12] = 1.70310000E+01;
WT[13] = 3.10140000E+01;
WT[14] = 1.40070000E+01;
WT[15] = 2.90220000E+01;
WT[16] = 1.60230000E+01;
WT[17] = 1.50150000E+01;
WT[18] = 4.00260200E+00;
WT[19] = 2.80140000E+01;
WT[20] = 3.20220000E+01;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetEPS(amrex::Real* EPS ) {
EPS[0] = 9.75300000E+01;
EPS[1] = 2.32400000E+02;
EPS[2] = 1.07400000E+02;
EPS[3] = 3.80000000E+01;
EPS[4] = 1.36500000E+02;
EPS[5] = 1.45000000E+02;
EPS[6] = 8.00000000E+01;
EPS[7] = 8.00000000E+01;
EPS[8] = 1.07400000E+02;
EPS[9] = 5.72400000E+02;
EPS[10] = 1.07400000E+02;
EPS[11] = 2.00000000E+02;
EPS[12] = 4.81000000E+02;
EPS[13] = 1.16700000E+02;
EPS[14] = 7.14000000E+01;
EPS[15] = 7.14000000E+01;
EPS[16] = 8.00000000E+01;
EPS[17] = 8.00000000E+01;
EPS[18] = 1.02000000E+01;
EPS[19] = 9.75300000E+01;
EPS[20] = 1.16700000E+02;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetSIG(amrex::Real* SIG ) {
SIG[0] = 3.62100000E+00;
SIG[1] = 3.82800000E+00;
SIG[2] = 3.45800000E+00;
SIG[3] = 2.92000000E+00;
SIG[4] = 3.33000000E+00;
SIG[5] = 2.05000000E+00;
SIG[6] = 2.75000000E+00;
SIG[7] = 2.75000000E+00;
SIG[8] = 3.45800000E+00;
SIG[9] = 2.60500000E+00;
SIG[10] = 3.45800000E+00;
SIG[11] = 3.50000000E+00;
SIG[12] = 2.92000000E+00;
SIG[13] = 3.49200000E+00;
SIG[14] = 3.29800000E+00;
SIG[15] = 3.79800000E+00;
SIG[16] = 2.65000000E+00;
SIG[17] = 2.65000000E+00;
SIG[18] = 2.57600000E+00;
SIG[19] = 3.62100000E+00;
SIG[20] = 3.49200000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetDIP(amrex::Real* DIP ) {
DIP[0] = 0.00000000E+00;
DIP[1] = 0.00000000E+00;
DIP[2] = 0.00000000E+00;
DIP[3] = 0.00000000E+00;
DIP[4] = 0.00000000E+00;
DIP[5] = 0.00000000E+00;
DIP[6] = 0.00000000E+00;
DIP[7] = 0.00000000E+00;
DIP[8] = 0.00000000E+00;
DIP[9] = 1.84400000E+00;
DIP[10] = 0.00000000E+00;
DIP[11] = 0.00000000E+00;
DIP[12] = 1.47000000E+00;
DIP[13] = 0.00000000E+00;
DIP[14] = 0.00000000E+00;
DIP[15] = 0.00000000E+00;
DIP[16] = 0.00000000E+00;
DIP[17] = 0.00000000E+00;
DIP[18] = 0.00000000E+00;
DIP[19] = 0.00000000E+00;
DIP[20] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetPOL(amrex::Real* POL ) {
POL[0] = 1.76000000E+00;
POL[1] = 0.00000000E+00;
POL[2] = 1.60000000E+00;
POL[3] = 7.90000000E-01;
POL[4] = 0.00000000E+00;
POL[5] = 0.00000000E+00;
POL[6] = 0.00000000E+00;
POL[7] = 0.00000000E+00;
POL[8] = 0.00000000E+00;
POL[9] = 0.00000000E+00;
POL[10] = 0.00000000E+00;
POL[11] = 0.00000000E+00;
POL[12] = 0.00000000E+00;
POL[13] = 0.00000000E+00;
POL[14] = 0.00000000E+00;
POL[15] = 0.00000000E+00;
POL[16] = 2.26000000E+00;
POL[17] = 0.00000000E+00;
POL[18] = 0.00000000E+00;
POL[19] = 1.76000000E+00;
POL[20] = 0.00000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetZROT(amrex::Real* ZROT ) {
ZROT[0] = 4.00000000E+00;
ZROT[1] = 1.00000000E+00;
ZROT[2] = 3.80000000E+00;
ZROT[3] = 2.80000000E+02;
ZROT[4] = 0.00000000E+00;
ZROT[5] = 0.00000000E+00;
ZROT[6] = 0.00000000E+00;
ZROT[7] = 0.00000000E+00;
ZROT[8] = 1.00000000E+00;
ZROT[9] = 4.00000000E+00;
ZROT[10] = 3.80000000E+00;
ZROT[11] = 1.00000000E+00;
ZROT[12] = 1.00000000E+01;
ZROT[13] = 1.00000000E+00;
ZROT[14] = 0.00000000E+00;
ZROT[15] = 1.00000000E+00;
ZROT[16] = 4.00000000E+00;
ZROT[17] = 4.00000000E+00;
ZROT[18] = 0.00000000E+00;
ZROT[19] = 4.00000000E+00;
ZROT[20] = 1.00000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetNLIN(int* NLIN) {
NLIN[0] = 1;
NLIN[1] = 1;
NLIN[2] = 1;
NLIN[3] = 1;
NLIN[4] = 0;
NLIN[5] = 0;
NLIN[6] = 0;
NLIN[7] = 1;
NLIN[8] = 2;
NLIN[9] = 2;
NLIN[10] = 2;
NLIN[11] = 2;
NLIN[12] = 2;
NLIN[13] = 2;
NLIN[14] = 0;
NLIN[15] = 2;
NLIN[16] = 2;
NLIN[17] = 1;
NLIN[18] = 0;
NLIN[19] = 1;
NLIN[20] = 2;
}


// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetCOFETA(amrex::Real* COFETA) {
COFETA[0] = -1.59390219E+01;
COFETA[1] = 2.12416328E+00;
COFETA[2] = -1.95139471E-01;
COFETA[3] = 8.57058122E-03;
COFETA[4] = -2.30494916E+01;
COFETA[5] = 4.74756155E+00;
COFETA[6] = -5.20324312E-01;
COFETA[7] = 2.20239489E-02;
COFETA[8] = -1.65122887E+01;
COFETA[9] = 2.39046525E+00;
COFETA[10] = -2.29715738E-01;
COFETA[11] = 1.00664463E-02;
COFETA[12] = -1.34911437E+01;
COFETA[13] = 8.49217713E-01;
COFETA[14] = -2.75872442E-02;
COFETA[15] = 1.23722694E-03;
COFETA[16] = -1.82296031E+01;
COFETA[17] = 3.10604173E+00;
COFETA[18] = -3.21070375E-01;
COFETA[19] = 1.39545761E-02;
COFETA[20] = -1.95281424E+01;
COFETA[21] = 3.26212115E+00;
COFETA[22] = -3.40404685E-01;
COFETA[23] = 1.47532537E-02;
COFETA[24] = -1.45327866E+01;
COFETA[25] = 1.67628298E+00;
COFETA[26] = -1.36586011E-01;
COFETA[27] = 6.02009005E-03;
COFETA[28] = -1.45022372E+01;
COFETA[29] = 1.67628298E+00;
COFETA[30] = -1.36586011E-01;
COFETA[31] = 6.02009005E-03;
COFETA[32] = -1.64967808E+01;
COFETA[33] = 2.39046525E+00;
COFETA[34] = -2.29715738E-01;
COFETA[35] = 1.00664463E-02;
COFETA[36] = -1.29340542E+01;
COFETA[37] = -3.14085289E-01;
COFETA[38] = 2.63797587E-01;
COFETA[39] = -1.64132666E-02;
COFETA[40] = -1.64817393E+01;
COFETA[41] = 2.39046525E+00;
COFETA[42] = -2.29715738E-01;
COFETA[43] = 1.00664463E-02;
COFETA[44] = -2.15899781E+01;
COFETA[45] = 4.31618079E+00;
COFETA[46] = -4.70289340E-01;
COFETA[47] = 2.00958387E-02;
COFETA[48] = -1.86592337E+01;
COFETA[49] = 2.27912410E+00;
COFETA[50] = -1.16023120E-01;
COFETA[51] = 1.36686991E-03;
COFETA[52] = -1.71005152E+01;
COFETA[53] = 2.59677504E+00;
COFETA[54] = -2.55937759E-01;
COFETA[55] = 1.11770604E-02;
COFETA[56] = -1.43353634E+01;
COFETA[57] = 1.43087484E+00;
COFETA[58] = -1.03712322E-01;
COFETA[59] = 4.55215415E-03;
COFETA[60] = -1.42534317E+01;
COFETA[61] = 1.43087484E+00;
COFETA[62] = -1.03712322E-01;
COFETA[63] = 4.55215415E-03;
COFETA[64] = -1.44579545E+01;
COFETA[65] = 1.67628298E+00;
COFETA[66] = -1.36586011E-01;
COFETA[67] = 6.02009005E-03;
COFETA[68] = -1.44904423E+01;
COFETA[69] = 1.67628298E+00;
COFETA[70] = -1.36586011E-01;
COFETA[71] = 6.02009005E-03;
COFETA[72] = -1.10322441E+01;
COFETA[73] = 1.63134850E-01;
COFETA[74] = 6.43300981E-02;
COFETA[75] = -2.77015433E-03;
COFETA[76] = -1.59733684E+01;
COFETA[77] = 2.12416328E+00;
COFETA[78] = -1.95139471E-01;
COFETA[79] = 8.57058122E-03;
COFETA[80] = -1.70845230E+01;
COFETA[81] = 2.59677504E+00;
COFETA[82] = -2.55937759E-01;
COFETA[83] = 1.11770604E-02;
}


// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetCOFLAM(amrex::Real* COFLAM) {
COFLAM[0] = 6.49662490E+00;
COFLAM[1] = -7.78068065E-01;
COFLAM[2] = 2.56990145E-01;
COFLAM[3] = -1.38126979E-02;
COFLAM[4] = -1.21409784E+01;
COFLAM[5] = 6.30067012E+00;
COFLAM[6] = -6.38515058E-01;
COFLAM[7] = 2.39759965E-02;
COFLAM[8] = -2.56831875E+00;
COFLAM[9] = 3.18963968E+00;
COFLAM[10] = -3.17697060E-01;
COFLAM[11] = 1.39355766E-02;
COFLAM[12] = 1.21711378E+01;
COFLAM[13] = -1.79682082E+00;
COFLAM[14] = 3.15030656E-01;
COFLAM[15] = -1.24953503E-02;
COFLAM[16] = -2.35938293E+00;
COFLAM[17] = 3.10604173E+00;
COFLAM[18] = -3.21070375E-01;
COFLAM[19] = 1.39545761E-02;
COFLAM[20] = 2.17382828E-02;
COFLAM[21] = 3.26212115E+00;
COFLAM[22] = -3.40404685E-01;
COFLAM[23] = 1.47532537E-02;
COFLAM[24] = 2.25253606E+00;
COFLAM[25] = 1.67628298E+00;
COFLAM[26] = -1.36586011E-01;
COFLAM[27] = 6.02009005E-03;
COFLAM[28] = 1.51288410E+01;
COFLAM[29] = -3.69154698E+00;
COFLAM[30] = 6.01975174E-01;
COFLAM[31] = -2.67338269E-02;
COFLAM[32] = 2.45005228E+00;
COFLAM[33] = 7.54550782E-01;
COFLAM[34] = 6.94608935E-02;
COFLAM[35] = -5.51447936E-03;
COFLAM[36] = 2.08469948E+01;
COFLAM[37] = -7.85557701E+00;
COFLAM[38] = 1.36675619E+00;
COFLAM[39] = -6.80647076E-02;
COFLAM[40] = 7.01202185E-01;
COFLAM[41] = 1.40649582E+00;
COFLAM[42] = 4.32521239E-03;
COFLAM[43] = -3.62392210E-03;
COFLAM[44] = -1.15345872E+01;
COFLAM[45] = 6.15563887E+00;
COFLAM[46] = -6.23955977E-01;
COFLAM[47] = 2.34558014E-02;
COFLAM[48] = 1.14512563E+01;
COFLAM[49] = -4.21086289E+00;
COFLAM[50] = 9.20507940E-01;
COFLAM[51] = -5.05097788E-02;
COFLAM[52] = 2.81473886E+00;
COFLAM[53] = 3.64944802E-01;
COFLAM[54] = 1.60406236E-01;
COFLAM[55] = -1.16172025E-02;
COFLAM[56] = 2.58292826E+00;
COFLAM[57] = 1.43087484E+00;
COFLAM[58] = -1.03712322E-01;
COFLAM[59] = 4.55215415E-03;
COFLAM[60] = 4.92604865E+00;
COFLAM[61] = -4.39395530E-01;
COFLAM[62] = 2.59493554E-01;
COFLAM[63] = -1.56836113E-02;
COFLAM[64] = 1.44882614E+01;
COFLAM[65] = -3.71046052E+00;
COFLAM[66] = 6.55628449E-01;
COFLAM[67] = -3.07291408E-02;
COFLAM[68] = 1.04229366E+01;
COFLAM[69] = -1.64000311E+00;
COFLAM[70] = 3.16719058E-01;
COFLAM[71] = -1.34849250E-02;
COFLAM[72] = 7.13866008E+00;
COFLAM[73] = 1.63134850E-01;
COFLAM[74] = 6.43300981E-02;
COFLAM[75] = -2.77015433E-03;
COFLAM[76] = 1.07110584E+01;
COFLAM[77] = -2.53506500E+00;
COFLAM[78] = 4.98215156E-01;
COFLAM[79] = -2.46980657E-02;
COFLAM[80] = 1.10176660E+00;
COFLAM[81] = 8.92203232E-01;
COFLAM[82] = 1.17949226E-01;
COFLAM[83] = -1.05903591E-02;
}


// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetCOFD(amrex::Real* COFD) {
COFD[0] = -1.45942592E+01;
COFD[1] = 3.06880733E+00;
COFD[2] = -1.84232163E-01;
COFD[3] = 7.99594639E-03;
COFD[4] = -1.73175837E+01;
COFD[5] = 4.00684631E+00;
COFD[6] = -3.01155648E-01;
COFD[7] = 1.28621017E-02;
COFD[8] = -1.48313878E+01;
COFD[9] = 3.16773813E+00;
COFD[10] = -1.96823168E-01;
COFD[11] = 8.53058072E-03;
COFD[12] = -1.11094036E+01;
COFD[13] = 2.21467976E+00;
COFD[14] = -7.20501534E-02;
COFD[15] = 3.07515437E-03;
COFD[16] = -1.55155212E+01;
COFD[17] = 3.41295809E+00;
COFD[18] = -2.27626583E-01;
COFD[19] = 9.82158260E-03;
COFD[20] = -1.38233396E+01;
COFD[21] = 3.46560000E+00;
COFD[22] = -2.34075114E-01;
COFD[23] = 1.00849661E-02;
COFD[24] = -1.36884074E+01;
COFD[25] = 2.89678405E+00;
COFD[26] = -1.62418864E-01;
COFD[27] = 7.07300755E-03;
COFD[28] = -1.37081197E+01;
COFD[29] = 2.89678405E+00;
COFD[30] = -1.62418864E-01;
COFD[31] = 7.07300755E-03;
COFD[32] = -1.48388326E+01;
COFD[33] = 3.16773813E+00;
COFD[34] = -1.96823168E-01;
COFD[35] = 8.53058072E-03;
COFD[36] = -2.06209560E+01;
COFD[37] = 5.33386551E+00;
COFD[38] = -4.56343451E-01;
COFD[39] = 1.89202797E-02;
COFD[40] = -1.48459389E+01;
COFD[41] = 3.16773813E+00;
COFD[42] = -1.96823168E-01;
COFD[43] = 8.53058072E-03;
COFD[44] = -1.68255854E+01;
COFD[45] = 3.86251333E+00;
COFD[46] = -2.83724399E-01;
COFD[47] = 1.21589320E-02;
COFD[48] = -1.98547414E+01;
COFD[49] = 5.07012033E+00;
COFD[50] = -4.28341021E-01;
COFD[51] = 1.79480600E-02;
COFD[52] = -1.50924406E+01;
COFD[53] = 3.26459489E+00;
COFD[54] = -2.09215287E-01;
COFD[55] = 9.05961407E-03;
COFD[56] = -1.35094169E+01;
COFD[57] = 2.78343819E+00;
COFD[58] = -1.47679033E-01;
COFD[59] = 6.43347681E-03;
COFD[60] = -1.38664480E+01;
COFD[61] = 2.78343819E+00;
COFD[62] = -1.47679033E-01;
COFD[63] = 6.43347681E-03;
COFD[64] = -1.36572548E+01;
COFD[65] = 2.89678405E+00;
COFD[66] = -1.62418864E-01;
COFD[67] = 7.07300755E-03;
COFD[68] = -1.36358384E+01;
COFD[69] = 2.89678405E+00;
COFD[70] = -1.62418864E-01;
COFD[71] = 7.07300755E-03;
COFD[72] = -1.01389623E+01;
COFD[73] = 1.80391843E+00;
COFD[74] = -1.99275570E-02;
COFD[75] = 8.81933064E-04;
COFD[76] = -1.45767911E+01;
COFD[77] = 3.06880733E+00;
COFD[78] = -1.84232163E-01;
COFD[79] = 7.99594639E-03;
COFD[80] = -1.51002407E+01;
COFD[81] = 3.26459489E+00;
COFD[82] = -2.09215287E-01;
COFD[83] = 9.05961407E-03;
COFD[84] = -1.73175837E+01;
COFD[85] = 4.00684631E+00;
COFD[86] = -3.01155648E-01;
COFD[87] = 1.28621017E-02;
COFD[88] = -2.06093704E+01;
COFD[89] = 5.10002627E+00;
COFD[90] = -4.31492380E-01;
COFD[91] = 1.80562807E-02;
COFD[92] = -1.76131700E+01;
COFD[93] = 4.11950819E+00;
COFD[94] = -3.14655711E-01;
COFD[95] = 1.34014626E-02;
COFD[96] = -1.32542177E+01;
COFD[97] = 3.00584146E+00;
COFD[98] = -1.76313628E-01;
COFD[99] = 7.66376173E-03;
COFD[100] = -1.85723724E+01;
COFD[101] = 4.45677518E+00;
COFD[102] = -3.56271969E-01;
COFD[103] = 1.51199595E-02;
COFD[104] = -1.68423909E+01;
COFD[105] = 4.52301031E+00;
COFD[106] = -3.64086327E-01;
COFD[107] = 1.54280659E-02;
COFD[108] = -1.63223009E+01;
COFD[109] = 3.81860507E+00;
COFD[110] = -2.78482683E-01;
COFD[111] = 1.19505034E-02;
COFD[112] = -1.63445217E+01;
COFD[113] = 3.81860507E+00;
COFD[114] = -2.78482683E-01;
COFD[115] = 1.19505034E-02;
COFD[116] = -1.76220910E+01;
COFD[117] = 4.11950819E+00;
COFD[118] = -3.14655711E-01;
COFD[119] = 1.34014626E-02;
COFD[120] = -2.15977859E+01;
COFD[121] = 5.46509995E+00;
COFD[122] = -4.52185064E-01;
COFD[123] = 1.79334715E-02;
COFD[124] = -1.76306310E+01;
COFD[125] = 4.11950819E+00;
COFD[126] = -3.14655711E-01;
COFD[127] = 1.34014626E-02;
COFD[128] = -2.00142349E+01;
COFD[129] = 4.92657613E+00;
COFD[130] = -4.11730248E-01;
COFD[131] = 1.73070472E-02;
COFD[132] = -2.15811296E+01;
COFD[133] = 5.49050988E+00;
COFD[134] = -4.61803086E-01;
COFD[135] = 1.85876911E-02;
COFD[136] = -1.79327065E+01;
COFD[137] = 4.23476606E+00;
COFD[138] = -3.28847162E-01;
COFD[139] = 1.39854168E-02;
COFD[140] = -1.60698889E+01;
COFD[141] = 3.68775110E+00;
COFD[142] = -2.62341411E-01;
COFD[143] = 1.12860938E-02;
COFD[144] = -1.64546887E+01;
COFD[145] = 3.68775110E+00;
COFD[146] = -2.62341411E-01;
COFD[147] = 1.12860938E-02;
COFD[148] = -1.62922126E+01;
COFD[149] = 3.81860507E+00;
COFD[150] = -2.78482683E-01;
COFD[151] = 1.19505034E-02;
COFD[152] = -1.62681911E+01;
COFD[153] = 3.81860507E+00;
COFD[154] = -2.78482683E-01;
COFD[155] = 1.19505034E-02;
COFD[156] = -1.15094541E+01;
COFD[157] = 2.30622063E+00;
COFD[158] = -8.87775848E-02;
COFD[159] = 4.01974335E-03;
COFD[160] = -1.72968776E+01;
COFD[161] = 4.00684631E+00;
COFD[162] = -3.01155648E-01;
COFD[163] = 1.28621017E-02;
COFD[164] = -1.79420259E+01;
COFD[165] = 4.23476606E+00;
COFD[166] = -3.28847162E-01;
COFD[167] = 1.39854168E-02;
COFD[168] = -1.48313878E+01;
COFD[169] = 3.16773813E+00;
COFD[170] = -1.96823168E-01;
COFD[171] = 8.53058072E-03;
COFD[172] = -1.76131700E+01;
COFD[173] = 4.11950819E+00;
COFD[174] = -3.14655711E-01;
COFD[175] = 1.34014626E-02;
COFD[176] = -1.50981757E+01;
COFD[177] = 3.27853241E+00;
COFD[178] = -2.10970532E-01;
COFD[179] = 9.13336403E-03;
COFD[180] = -1.12814363E+01;
COFD[181] = 2.30017030E+00;
COFD[182] = -8.34928497E-02;
COFD[183] = 3.58611589E-03;
COFD[184] = -1.57532700E+01;
COFD[185] = 3.50974553E+00;
COFD[186] = -2.39671533E-01;
COFD[187] = 1.03219510E-02;
COFD[188] = -1.41183749E+01;
COFD[189] = 3.59720720E+00;
COFD[190] = -2.50852412E-01;
COFD[191] = 1.07992653E-02;
COFD[192] = -1.38802589E+01;
COFD[193] = 2.98298723E+00;
COFD[194] = -1.73428215E-01;
COFD[195] = 7.54224684E-03;
COFD[196] = -1.39004163E+01;
COFD[197] = 2.98298723E+00;
COFD[198] = -1.73428215E-01;
COFD[199] = 7.54224684E-03;
COFD[200] = -1.51058696E+01;
COFD[201] = 3.27853241E+00;
COFD[202] = -2.10970532E-01;
COFD[203] = 9.13336403E-03;
COFD[204] = -2.08507538E+01;
COFD[205] = 5.41592516E+00;
COFD[206] = -4.64640996E-01;
COFD[207] = 1.91895972E-02;
COFD[208] = -1.51132171E+01;
COFD[209] = 3.27853241E+00;
COFD[210] = -2.10970532E-01;
COFD[211] = 9.13336403E-03;
COFD[212] = -1.70494293E+01;
COFD[213] = 3.94998946E+00;
COFD[214] = -2.94215257E-01;
COFD[215] = 1.25789510E-02;
COFD[216] = -2.00945931E+01;
COFD[217] = 5.15838205E+00;
COFD[218] = -4.37782020E-01;
COFD[219] = 1.82788934E-02;
COFD[220] = -1.53273699E+01;
COFD[221] = 3.36125353E+00;
COFD[222] = -2.21308349E-01;
COFD[223] = 9.56431936E-03;
COFD[224] = -1.37252376E+01;
COFD[225] = 2.87937412E+00;
COFD[226] = -1.60161971E-01;
COFD[227] = 6.97536928E-03;
COFD[228] = -1.40910557E+01;
COFD[229] = 2.87937412E+00;
COFD[230] = -1.60161971E-01;
COFD[231] = 6.97536928E-03;
COFD[232] = -1.38482796E+01;
COFD[233] = 2.98298723E+00;
COFD[234] = -1.73428215E-01;
COFD[235] = 7.54224684E-03;
COFD[236] = -1.38263990E+01;
COFD[237] = 2.98298723E+00;
COFD[238] = -1.73428215E-01;
COFD[239] = 7.54224684E-03;
COFD[240] = -1.00964417E+01;
COFD[241] = 1.80154868E+00;
COFD[242] = -1.93107773E-02;
COFD[243] = 8.41365140E-04;
COFD[244] = -1.48133685E+01;
COFD[245] = 3.16773813E+00;
COFD[246] = -1.96823168E-01;
COFD[247] = 8.53058072E-03;
COFD[248] = -1.53354270E+01;
COFD[249] = 3.36125353E+00;
COFD[250] = -2.21308349E-01;
COFD[251] = 9.56431936E-03;
COFD[252] = -1.11094036E+01;
COFD[253] = 2.21467976E+00;
COFD[254] = -7.20501534E-02;
COFD[255] = 3.07515437E-03;
COFD[256] = -1.32542177E+01;
COFD[257] = 3.00584146E+00;
COFD[258] = -1.76313628E-01;
COFD[259] = 7.66376173E-03;
COFD[260] = -1.12814363E+01;
COFD[261] = 2.30017030E+00;
COFD[262] = -8.34928497E-02;
COFD[263] = 3.58611589E-03;
COFD[264] = -9.78882649E+00;
COFD[265] = 1.95527707E+00;
COFD[266] = -4.07233312E-02;
COFD[267] = 1.83285363E-03;
COFD[268] = -1.17868360E+01;
COFD[269] = 2.50982230E+00;
COFD[270] = -1.11658803E-01;
COFD[271] = 4.85020269E-03;
COFD[272] = -1.09419421E+01;
COFD[273] = 2.56365104E+00;
COFD[274] = -1.18913262E-01;
COFD[275] = 5.17669825E-03;
COFD[276] = -1.06253333E+01;
COFD[277] = 2.15819366E+00;
COFD[278] = -6.52830580E-02;
COFD[279] = 2.80657258E-03;
COFD[280] = -1.06286607E+01;
COFD[281] = 2.15819366E+00;
COFD[282] = -6.52830580E-02;
COFD[283] = 2.80657258E-03;
COFD[284] = -1.12823422E+01;
COFD[285] = 2.30017030E+00;
COFD[286] = -8.34928497E-02;
COFD[287] = 3.58611589E-03;
COFD[288] = -1.65320372E+01;
COFD[289] = 4.34135715E+00;
COFD[290] = -3.42166667E-01;
COFD[291] = 1.45425451E-02;
COFD[292] = -1.12831958E+01;
COFD[293] = 2.30017030E+00;
COFD[294] = -8.34928497E-02;
COFD[295] = 3.58611589E-03;
COFD[296] = -1.27891150E+01;
COFD[297] = 2.86989894E+00;
COFD[298] = -1.58928038E-01;
COFD[299] = 6.92176252E-03;
COFD[300] = -1.54914778E+01;
COFD[301] = 3.93394014E+00;
COFD[302] = -2.92267339E-01;
COFD[303] = 1.24999144E-02;
COFD[304] = -1.14841469E+01;
COFD[305] = 2.37509888E+00;
COFD[306] = -9.35410216E-02;
COFD[307] = 4.03605551E-03;
COFD[308] = -1.10204977E+01;
COFD[309] = 2.26529435E+00;
COFD[310] = -8.17536844E-02;
COFD[311] = 3.63649607E-03;
COFD[312] = -1.12088370E+01;
COFD[313] = 2.26529435E+00;
COFD[314] = -8.17536844E-02;
COFD[315] = 3.63649607E-03;
COFD[316] = -1.05898290E+01;
COFD[317] = 2.15819366E+00;
COFD[318] = -6.52830580E-02;
COFD[319] = 2.80657258E-03;
COFD[320] = -1.05860917E+01;
COFD[321] = 2.15819366E+00;
COFD[322] = -6.52830580E-02;
COFD[323] = 2.80657258E-03;
COFD[324] = -9.97002631E+00;
COFD[325] = 2.09989861E+00;
COFD[326] = -6.57792049E-02;
COFD[327] = 3.22150287E-03;
COFD[328] = -1.11071703E+01;
COFD[329] = 2.21467976E+00;
COFD[330] = -7.20501534E-02;
COFD[331] = 3.07515437E-03;
COFD[332] = -1.14851085E+01;
COFD[333] = 2.37509888E+00;
COFD[334] = -9.35410216E-02;
COFD[335] = 4.03605551E-03;
COFD[336] = -1.55155212E+01;
COFD[337] = 3.41295809E+00;
COFD[338] = -2.27626583E-01;
COFD[339] = 9.82158260E-03;
COFD[340] = -1.85723724E+01;
COFD[341] = 4.45677518E+00;
COFD[342] = -3.56271969E-01;
COFD[343] = 1.51199595E-02;
COFD[344] = -1.57532700E+01;
COFD[345] = 3.50974553E+00;
COFD[346] = -2.39671533E-01;
COFD[347] = 1.03219510E-02;
COFD[348] = -1.17868360E+01;
COFD[349] = 2.50982230E+00;
COFD[350] = -1.11658803E-01;
COFD[351] = 4.85020269E-03;
COFD[352] = -1.66187963E+01;
COFD[353] = 3.82058833E+00;
COFD[354] = -2.78718863E-01;
COFD[355] = 1.19598617E-02;
COFD[356] = -1.48437362E+01;
COFD[357] = 3.87530644E+00;
COFD[358] = -2.85245928E-01;
COFD[359] = 1.22192406E-02;
COFD[360] = -1.45113307E+01;
COFD[361] = 3.21910603E+00;
COFD[362] = -2.03442081E-01;
COFD[363] = 8.81515218E-03;
COFD[364] = -1.45329520E+01;
COFD[365] = 3.21910603E+00;
COFD[366] = -2.03442081E-01;
COFD[367] = 8.81515218E-03;
COFD[368] = -1.57618215E+01;
COFD[369] = 3.50974553E+00;
COFD[370] = -2.39671533E-01;
COFD[371] = 1.03219510E-02;
COFD[372] = -2.08796817E+01;
COFD[373] = 5.42825002E+00;
COFD[374] = -4.65423681E-01;
COFD[375] = 1.91920177E-02;
COFD[376] = -1.57700020E+01;
COFD[377] = 3.50974553E+00;
COFD[378] = -2.39671533E-01;
COFD[379] = 1.03219510E-02;
COFD[380] = -1.79027363E+01;
COFD[381] = 4.24498090E+00;
COFD[382] = -3.30123845E-01;
COFD[383] = 1.40388009E-02;
COFD[384] = -2.04615561E+01;
COFD[385] = 5.27516202E+00;
COFD[386] = -4.49784854E-01;
COFD[387] = 1.86764670E-02;
COFD[388] = -1.60767172E+01;
COFD[389] = 3.63047782E+00;
COFD[390] = -2.55092110E-01;
COFD[391] = 1.09796900E-02;
COFD[392] = -1.42859349E+01;
COFD[393] = 3.08809301E+00;
COFD[394] = -1.86635579E-01;
COFD[395] = 8.09582723E-03;
COFD[396] = -1.46728819E+01;
COFD[397] = 3.08809301E+00;
COFD[398] = -1.86635579E-01;
COFD[399] = 8.09582723E-03;
COFD[400] = -1.44786974E+01;
COFD[401] = 3.21910603E+00;
COFD[402] = -2.03442081E-01;
COFD[403] = 8.81515218E-03;
COFD[404] = -1.44552961E+01;
COFD[405] = 3.21910603E+00;
COFD[406] = -2.03442081E-01;
COFD[407] = 8.81515218E-03;
COFD[408] = -1.04249896E+01;
COFD[409] = 1.94512965E+00;
COFD[410] = -3.93510095E-02;
COFD[411] = 1.77030865E-03;
COFD[412] = -1.54956188E+01;
COFD[413] = 3.41295809E+00;
COFD[414] = -2.27626583E-01;
COFD[415] = 9.82158260E-03;
COFD[416] = -1.60856572E+01;
COFD[417] = 3.63047782E+00;
COFD[418] = -2.55092110E-01;
COFD[419] = 1.09796900E-02;
COFD[420] = -1.38233396E+01;
COFD[421] = 3.46560000E+00;
COFD[422] = -2.34075114E-01;
COFD[423] = 1.00849661E-02;
COFD[424] = -1.68423909E+01;
COFD[425] = 4.52301031E+00;
COFD[426] = -3.64086327E-01;
COFD[427] = 1.54280659E-02;
COFD[428] = -1.41183749E+01;
COFD[429] = 3.59720720E+00;
COFD[430] = -2.50852412E-01;
COFD[431] = 1.07992653E-02;
COFD[432] = -1.09419421E+01;
COFD[433] = 2.56365104E+00;
COFD[434] = -1.18913262E-01;
COFD[435] = 5.17669825E-03;
COFD[436] = -1.48437362E+01;
COFD[437] = 3.87530644E+00;
COFD[438] = -2.85245928E-01;
COFD[439] = 1.22192406E-02;
COFD[440] = -1.41218850E+01;
COFD[441] = 3.92946227E+00;
COFD[442] = -2.91729340E-01;
COFD[443] = 1.24783320E-02;
COFD[444] = -1.29709728E+01;
COFD[445] = 3.28440910E+00;
COFD[446] = -2.11707534E-01;
COFD[447] = 9.16419558E-03;
COFD[448] = -1.29727324E+01;
COFD[449] = 3.28440910E+00;
COFD[450] = -2.11707534E-01;
COFD[451] = 9.16419558E-03;
COFD[452] = -1.41188415E+01;
COFD[453] = 3.59720720E+00;
COFD[454] = -2.50852412E-01;
COFD[455] = 1.07992653E-02;
COFD[456] = -1.91953111E+01;
COFD[457] = 5.44274135E+00;
COFD[458] = -4.65397833E-01;
COFD[459] = 1.91171363E-02;
COFD[460] = -1.41192808E+01;
COFD[461] = 3.59720720E+00;
COFD[462] = -2.50852412E-01;
COFD[463] = 1.07992653E-02;
COFD[464] = -1.62068677E+01;
COFD[465] = 4.33926971E+00;
COFD[466] = -3.41907355E-01;
COFD[467] = 1.45317558E-02;
COFD[468] = -1.89481451E+01;
COFD[469] = 5.34360281E+00;
COFD[470] = -4.57384674E-01;
COFD[471] = 1.89568876E-02;
COFD[472] = -1.44429294E+01;
COFD[473] = 3.71325476E+00;
COFD[474] = -2.65538326E-01;
COFD[475] = 1.14199023E-02;
COFD[476] = -1.28316361E+01;
COFD[477] = 3.15334729E+00;
COFD[478] = -1.94972021E-01;
COFD[479] = 8.45114576E-03;
COFD[480] = -1.30280651E+01;
COFD[481] = 3.15334729E+00;
COFD[482] = -1.94972021E-01;
COFD[483] = 8.45114576E-03;
COFD[484] = -1.29289104E+01;
COFD[485] = 3.28440910E+00;
COFD[486] = -2.11707534E-01;
COFD[487] = 9.16419558E-03;
COFD[488] = -1.29269277E+01;
COFD[489] = 3.28440910E+00;
COFD[490] = -2.11707534E-01;
COFD[491] = 9.16419558E-03;
COFD[492] = -9.28658890E+00;
COFD[493] = 1.98664968E+00;
COFD[494] = -4.51158213E-02;
COFD[495] = 2.03667696E-03;
COFD[496] = -1.38221854E+01;
COFD[497] = 3.46560000E+00;
COFD[498] = -2.34075114E-01;
COFD[499] = 1.00849661E-02;
COFD[500] = -1.44434251E+01;
COFD[501] = 3.71325476E+00;
COFD[502] = -2.65538326E-01;
COFD[503] = 1.14199023E-02;
COFD[504] = -1.36884074E+01;
COFD[505] = 2.89678405E+00;
COFD[506] = -1.62418864E-01;
COFD[507] = 7.07300755E-03;
COFD[508] = -1.63223009E+01;
COFD[509] = 3.81860507E+00;
COFD[510] = -2.78482683E-01;
COFD[511] = 1.19505034E-02;
COFD[512] = -1.38802589E+01;
COFD[513] = 2.98298723E+00;
COFD[514] = -1.73428215E-01;
COFD[515] = 7.54224684E-03;
COFD[516] = -1.06253333E+01;
COFD[517] = 2.15819366E+00;
COFD[518] = -6.52830580E-02;
COFD[519] = 2.80657258E-03;
COFD[520] = -1.45113307E+01;
COFD[521] = 3.21910603E+00;
COFD[522] = -2.03442081E-01;
COFD[523] = 8.81515218E-03;
COFD[524] = -1.29709728E+01;
COFD[525] = 3.28440910E+00;
COFD[526] = -2.11707534E-01;
COFD[527] = 9.16419558E-03;
COFD[528] = -1.27611382E+01;
COFD[529] = 2.70797975E+00;
COFD[530] = -1.37895013E-01;
COFD[531] = 6.01030858E-03;
COFD[532] = -1.27761797E+01;
COFD[533] = 2.70797975E+00;
COFD[534] = -1.37895013E-01;
COFD[535] = 6.01030858E-03;
COFD[536] = -1.38853749E+01;
COFD[537] = 2.98298723E+00;
COFD[538] = -1.73428215E-01;
COFD[539] = 7.54224684E-03;
COFD[540] = -1.88412751E+01;
COFD[541] = 4.90686422E+00;
COFD[542] = -4.09428407E-01;
COFD[543] = 1.72173805E-02;
COFD[544] = -1.38902360E+01;
COFD[545] = 2.98298723E+00;
COFD[546] = -1.73428215E-01;
COFD[547] = 7.54224684E-03;
COFD[548] = -1.57253704E+01;
COFD[549] = 3.63667810E+00;
COFD[550] = -2.55876890E-01;
COFD[551] = 1.10128613E-02;
COFD[552] = -1.83642414E+01;
COFD[553] = 4.71208389E+00;
COFD[554] = -3.87053240E-01;
COFD[555] = 1.63622220E-02;
COFD[556] = -1.40792448E+01;
COFD[557] = 3.05361342E+00;
COFD[558] = -1.82331859E-01;
COFD[559] = 7.91667899E-03;
COFD[560] = -1.26277765E+01;
COFD[561] = 2.59809959E+00;
COFD[562] = -1.23503755E-01;
COFD[563] = 5.38095363E-03;
COFD[564] = -1.29480232E+01;
COFD[565] = 2.59809959E+00;
COFD[566] = -1.23503755E-01;
COFD[567] = 5.38095363E-03;
COFD[568] = -1.27248146E+01;
COFD[569] = 2.70797975E+00;
COFD[570] = -1.37895013E-01;
COFD[571] = 6.01030858E-03;
COFD[572] = -1.27083190E+01;
COFD[573] = 2.70797975E+00;
COFD[574] = -1.37895013E-01;
COFD[575] = 6.01030858E-03;
COFD[576] = -9.82541494E+00;
COFD[577] = 1.83095585E+00;
COFD[578] = -2.43017348E-02;
COFD[579] = 1.11147663E-03;
COFD[580] = -1.36761934E+01;
COFD[581] = 2.89678405E+00;
COFD[582] = -1.62418864E-01;
COFD[583] = 7.07300755E-03;
COFD[584] = -1.40846299E+01;
COFD[585] = 3.05361342E+00;
COFD[586] = -1.82331859E-01;
COFD[587] = 7.91667899E-03;
COFD[588] = -1.37081197E+01;
COFD[589] = 2.89678405E+00;
COFD[590] = -1.62418864E-01;
COFD[591] = 7.07300755E-03;
COFD[592] = -1.63445217E+01;
COFD[593] = 3.81860507E+00;
COFD[594] = -2.78482683E-01;
COFD[595] = 1.19505034E-02;
COFD[596] = -1.39004163E+01;
COFD[597] = 2.98298723E+00;
COFD[598] = -1.73428215E-01;
COFD[599] = 7.54224684E-03;
COFD[600] = -1.06286607E+01;
COFD[601] = 2.15819366E+00;
COFD[602] = -6.52830580E-02;
COFD[603] = 2.80657258E-03;
COFD[604] = -1.45329520E+01;
COFD[605] = 3.21910603E+00;
COFD[606] = -2.03442081E-01;
COFD[607] = 8.81515218E-03;
COFD[608] = -1.29727324E+01;
COFD[609] = 3.28440910E+00;
COFD[610] = -2.11707534E-01;
COFD[611] = 9.16419558E-03;
COFD[612] = -1.27761797E+01;
COFD[613] = 2.70797975E+00;
COFD[614] = -1.37895013E-01;
COFD[615] = 6.01030858E-03;
COFD[616] = -1.27916876E+01;
COFD[617] = 2.70797975E+00;
COFD[618] = -1.37895013E-01;
COFD[619] = 6.01030858E-03;
COFD[620] = -1.39057440E+01;
COFD[621] = 2.98298723E+00;
COFD[622] = -1.73428215E-01;
COFD[623] = 7.54224684E-03;
COFD[624] = -1.88572224E+01;
COFD[625] = 4.90686422E+00;
COFD[626] = -4.09428407E-01;
COFD[627] = 1.72173805E-02;
COFD[628] = -1.39108083E+01;
COFD[629] = 2.98298723E+00;
COFD[630] = -1.73428215E-01;
COFD[631] = 7.54224684E-03;
COFD[632] = -1.57478567E+01;
COFD[633] = 3.63667810E+00;
COFD[634] = -2.55876890E-01;
COFD[635] = 1.10128613E-02;
COFD[636] = -1.83797601E+01;
COFD[637] = 4.71208389E+00;
COFD[638] = -3.87053240E-01;
COFD[639] = 1.63622220E-02;
COFD[640] = -1.40991870E+01;
COFD[641] = 3.05361342E+00;
COFD[642] = -1.82331859E-01;
COFD[643] = 7.91667899E-03;
COFD[644] = -1.26418053E+01;
COFD[645] = 2.59809959E+00;
COFD[646] = -1.23503755E-01;
COFD[647] = 5.38095363E-03;
COFD[648] = -1.29675013E+01;
COFD[649] = 2.59809959E+00;
COFD[650] = -1.23503755E-01;
COFD[651] = 5.38095363E-03;
COFD[652] = -1.27398674E+01;
COFD[653] = 2.70797975E+00;
COFD[654] = -1.37895013E-01;
COFD[655] = 6.01030858E-03;
COFD[656] = -1.27228762E+01;
COFD[657] = 2.70797975E+00;
COFD[658] = -1.37895013E-01;
COFD[659] = 6.01030858E-03;
COFD[660] = -9.83138074E+00;
COFD[661] = 1.83095585E+00;
COFD[662] = -2.43017348E-02;
COFD[663] = 1.11147663E-03;
COFD[664] = -1.36954208E+01;
COFD[665] = 2.89678405E+00;
COFD[666] = -1.62418864E-01;
COFD[667] = 7.07300755E-03;
COFD[668] = -1.41047925E+01;
COFD[669] = 3.05361342E+00;
COFD[670] = -1.82331859E-01;
COFD[671] = 7.91667899E-03;
COFD[672] = -1.48388326E+01;
COFD[673] = 3.16773813E+00;
COFD[674] = -1.96823168E-01;
COFD[675] = 8.53058072E-03;
COFD[676] = -1.76220910E+01;
COFD[677] = 4.11950819E+00;
COFD[678] = -3.14655711E-01;
COFD[679] = 1.34014626E-02;
COFD[680] = -1.51058696E+01;
COFD[681] = 3.27853241E+00;
COFD[682] = -2.10970532E-01;
COFD[683] = 9.13336403E-03;
COFD[684] = -1.12823422E+01;
COFD[685] = 2.30017030E+00;
COFD[686] = -8.34928497E-02;
COFD[687] = 3.58611589E-03;
COFD[688] = -1.57618215E+01;
COFD[689] = 3.50974553E+00;
COFD[690] = -2.39671533E-01;
COFD[691] = 1.03219510E-02;
COFD[692] = -1.41188415E+01;
COFD[693] = 3.59720720E+00;
COFD[694] = -2.50852412E-01;
COFD[695] = 1.07992653E-02;
COFD[696] = -1.38853749E+01;
COFD[697] = 2.98298723E+00;
COFD[698] = -1.73428215E-01;
COFD[699] = 7.54224684E-03;
COFD[700] = -1.39057440E+01;
COFD[701] = 2.98298723E+00;
COFD[702] = -1.73428215E-01;
COFD[703] = 7.54224684E-03;
COFD[704] = -1.51136837E+01;
COFD[705] = 3.27853241E+00;
COFD[706] = -2.10970532E-01;
COFD[707] = 9.13336403E-03;
COFD[708] = -2.01625751E+01;
COFD[709] = 5.20184446E+00;
COFD[710] = -4.41727448E-01;
COFD[711] = 1.83837722E-02;
COFD[712] = -1.51211478E+01;
COFD[713] = 3.27853241E+00;
COFD[714] = -2.10970532E-01;
COFD[715] = 9.13336403E-03;
COFD[716] = -1.70585174E+01;
COFD[717] = 3.94998946E+00;
COFD[718] = -2.94215257E-01;
COFD[719] = 1.25789510E-02;
COFD[720] = -1.97847039E+01;
COFD[721] = 5.06148428E+00;
COFD[722] = -4.27422345E-01;
COFD[723] = 1.79160853E-02;
COFD[724] = -1.53349427E+01;
COFD[725] = 3.36125353E+00;
COFD[726] = -2.21308349E-01;
COFD[727] = 9.56431936E-03;
COFD[728] = -1.37299086E+01;
COFD[729] = 2.87937412E+00;
COFD[730] = -1.60161971E-01;
COFD[731] = 6.97536928E-03;
COFD[732] = -1.40983716E+01;
COFD[733] = 2.87937412E+00;
COFD[734] = -1.60161971E-01;
COFD[735] = 6.97536928E-03;
COFD[736] = -1.38534008E+01;
COFD[737] = 2.98298723E+00;
COFD[738] = -1.73428215E-01;
COFD[739] = 7.54224684E-03;
COFD[740] = -1.38312998E+01;
COFD[741] = 2.98298723E+00;
COFD[742] = -1.73428215E-01;
COFD[743] = 7.54224684E-03;
COFD[744] = -1.00981423E+01;
COFD[745] = 1.80154868E+00;
COFD[746] = -1.93107773E-02;
COFD[747] = 8.41365140E-04;
COFD[748] = -1.48205479E+01;
COFD[749] = 3.16773813E+00;
COFD[750] = -1.96823168E-01;
COFD[751] = 8.53058072E-03;
COFD[752] = -1.53431237E+01;
COFD[753] = 3.36125353E+00;
COFD[754] = -2.21308349E-01;
COFD[755] = 9.56431936E-03;
COFD[756] = -2.06209560E+01;
COFD[757] = 5.33386551E+00;
COFD[758] = -4.56343451E-01;
COFD[759] = 1.89202797E-02;
COFD[760] = -2.15977859E+01;
COFD[761] = 5.46509995E+00;
COFD[762] = -4.52185064E-01;
COFD[763] = 1.79334715E-02;
COFD[764] = -2.08507538E+01;
COFD[765] = 5.41592516E+00;
COFD[766] = -4.64640996E-01;
COFD[767] = 1.91895972E-02;
COFD[768] = -1.65320372E+01;
COFD[769] = 4.34135715E+00;
COFD[770] = -3.42166667E-01;
COFD[771] = 1.45425451E-02;
COFD[772] = -2.08796817E+01;
COFD[773] = 5.42825002E+00;
COFD[774] = -4.65423681E-01;
COFD[775] = 1.91920177E-02;
COFD[776] = -1.91953111E+01;
COFD[777] = 5.44274135E+00;
COFD[778] = -4.65397833E-01;
COFD[779] = 1.91171363E-02;
COFD[780] = -1.88412751E+01;
COFD[781] = 4.90686422E+00;
COFD[782] = -4.09428407E-01;
COFD[783] = 1.72173805E-02;
COFD[784] = -1.88572224E+01;
COFD[785] = 4.90686422E+00;
COFD[786] = -4.09428407E-01;
COFD[787] = 1.72173805E-02;
COFD[788] = -2.01625751E+01;
COFD[789] = 5.20184446E+00;
COFD[790] = -4.41727448E-01;
COFD[791] = 1.83837722E-02;
COFD[792] = -1.42050400E+01;
COFD[793] = 1.94854229E+00;
COFD[794] = 9.16765545E-02;
COFD[795] = -8.62878516E-03;
COFD[796] = -2.01678346E+01;
COFD[797] = 5.20184446E+00;
COFD[798] = -4.41727448E-01;
COFD[799] = 1.83837722E-02;
COFD[800] = -2.14310740E+01;
COFD[801] = 5.49133594E+00;
COFD[802] = -4.61028475E-01;
COFD[803] = 1.85204974E-02;
COFD[804] = -1.67361923E+01;
COFD[805] = 3.16504366E+00;
COFD[806] = -9.19485624E-02;
COFD[807] = 1.39362133E-04;
COFD[808] = -2.04514811E+01;
COFD[809] = 5.29593785E+00;
COFD[810] = -4.52123029E-01;
COFD[811] = 1.87641215E-02;
COFD[812] = -1.86401817E+01;
COFD[813] = 4.78767270E+00;
COFD[814] = -3.95990323E-01;
COFD[815] = 1.67152840E-02;
COFD[816] = -1.89747864E+01;
COFD[817] = 4.78767270E+00;
COFD[818] = -3.95990323E-01;
COFD[819] = 1.67152840E-02;
COFD[820] = -2.07528924E+01;
COFD[821] = 5.46746294E+00;
COFD[822] = -4.64612142E-01;
COFD[823] = 1.89302169E-02;
COFD[824] = -1.87865134E+01;
COFD[825] = 4.90686422E+00;
COFD[826] = -4.09428407E-01;
COFD[827] = 1.72173805E-02;
COFD[828] = -1.19621564E+01;
COFD[829] = 2.61946046E+00;
COFD[830] = -1.26311090E-01;
COFD[831] = 5.50425635E-03;
COFD[832] = -2.06077929E+01;
COFD[833] = 5.33386551E+00;
COFD[834] = -4.56343451E-01;
COFD[835] = 1.89202797E-02;
COFD[836] = -2.04572980E+01;
COFD[837] = 5.29593785E+00;
COFD[838] = -4.52123029E-01;
COFD[839] = 1.87641215E-02;
COFD[840] = -1.48459389E+01;
COFD[841] = 3.16773813E+00;
COFD[842] = -1.96823168E-01;
COFD[843] = 8.53058072E-03;
COFD[844] = -1.76306310E+01;
COFD[845] = 4.11950819E+00;
COFD[846] = -3.14655711E-01;
COFD[847] = 1.34014626E-02;
COFD[848] = -1.51132171E+01;
COFD[849] = 3.27853241E+00;
COFD[850] = -2.10970532E-01;
COFD[851] = 9.13336403E-03;
COFD[852] = -1.12831958E+01;
COFD[853] = 2.30017030E+00;
COFD[854] = -8.34928497E-02;
COFD[855] = 3.58611589E-03;
COFD[856] = -1.57700020E+01;
COFD[857] = 3.50974553E+00;
COFD[858] = -2.39671533E-01;
COFD[859] = 1.03219510E-02;
COFD[860] = -1.41192808E+01;
COFD[861] = 3.59720720E+00;
COFD[862] = -2.50852412E-01;
COFD[863] = 1.07992653E-02;
COFD[864] = -1.38902360E+01;
COFD[865] = 2.98298723E+00;
COFD[866] = -1.73428215E-01;
COFD[867] = 7.54224684E-03;
COFD[868] = -1.39108083E+01;
COFD[869] = 2.98298723E+00;
COFD[870] = -1.73428215E-01;
COFD[871] = 7.54224684E-03;
COFD[872] = -1.51211478E+01;
COFD[873] = 3.27853241E+00;
COFD[874] = -2.10970532E-01;
COFD[875] = 9.13336403E-03;
COFD[876] = -2.01678346E+01;
COFD[877] = 5.20184446E+00;
COFD[878] = -4.41727448E-01;
COFD[879] = 1.83837722E-02;
COFD[880] = -1.51287251E+01;
COFD[881] = 3.27853241E+00;
COFD[882] = -2.10970532E-01;
COFD[883] = 9.13336403E-03;
COFD[884] = -1.70672203E+01;
COFD[885] = 3.94998946E+00;
COFD[886] = -2.94215257E-01;
COFD[887] = 1.25789510E-02;
COFD[888] = -1.97897729E+01;
COFD[889] = 5.06148428E+00;
COFD[890] = -4.27422345E-01;
COFD[891] = 1.79160853E-02;
COFD[892] = -1.53421729E+01;
COFD[893] = 3.36125353E+00;
COFD[894] = -2.21308349E-01;
COFD[895] = 9.56431936E-03;
COFD[896] = -1.37343429E+01;
COFD[897] = 2.87937412E+00;
COFD[898] = -1.60161971E-01;
COFD[899] = 6.97536928E-03;
COFD[900] = -1.41053530E+01;
COFD[901] = 2.87937412E+00;
COFD[902] = -1.60161971E-01;
COFD[903] = 6.97536928E-03;
COFD[904] = -1.38582668E+01;
COFD[905] = 2.98298723E+00;
COFD[906] = -1.73428215E-01;
COFD[907] = 7.54224684E-03;
COFD[908] = -1.38359545E+01;
COFD[909] = 2.98298723E+00;
COFD[910] = -1.73428215E-01;
COFD[911] = 7.54224684E-03;
COFD[912] = -1.00997475E+01;
COFD[913] = 1.80154868E+00;
COFD[914] = -1.93107773E-02;
COFD[915] = 8.41365140E-04;
COFD[916] = -1.48273972E+01;
COFD[917] = 3.16773813E+00;
COFD[918] = -1.96823168E-01;
COFD[919] = 8.53058072E-03;
COFD[920] = -1.53504741E+01;
COFD[921] = 3.36125353E+00;
COFD[922] = -2.21308349E-01;
COFD[923] = 9.56431936E-03;
COFD[924] = -1.68255854E+01;
COFD[925] = 3.86251333E+00;
COFD[926] = -2.83724399E-01;
COFD[927] = 1.21589320E-02;
COFD[928] = -2.00142349E+01;
COFD[929] = 4.92657613E+00;
COFD[930] = -4.11730248E-01;
COFD[931] = 1.73070472E-02;
COFD[932] = -1.70494293E+01;
COFD[933] = 3.94998946E+00;
COFD[934] = -2.94215257E-01;
COFD[935] = 1.25789510E-02;
COFD[936] = -1.27891150E+01;
COFD[937] = 2.86989894E+00;
COFD[938] = -1.58928038E-01;
COFD[939] = 6.92176252E-03;
COFD[940] = -1.79027363E+01;
COFD[941] = 4.24498090E+00;
COFD[942] = -3.30123845E-01;
COFD[943] = 1.40388009E-02;
COFD[944] = -1.62068677E+01;
COFD[945] = 4.33926971E+00;
COFD[946] = -3.41907355E-01;
COFD[947] = 1.45317558E-02;
COFD[948] = -1.57253704E+01;
COFD[949] = 3.63667810E+00;
COFD[950] = -2.55876890E-01;
COFD[951] = 1.10128613E-02;
COFD[952] = -1.57478567E+01;
COFD[953] = 3.63667810E+00;
COFD[954] = -2.55876890E-01;
COFD[955] = 1.10128613E-02;
COFD[956] = -1.70585174E+01;
COFD[957] = 3.94998946E+00;
COFD[958] = -2.94215257E-01;
COFD[959] = 1.25789510E-02;
COFD[960] = -2.14310740E+01;
COFD[961] = 5.49133594E+00;
COFD[962] = -4.61028475E-01;
COFD[963] = 1.85204974E-02;
COFD[964] = -1.70672203E+01;
COFD[965] = 3.94998946E+00;
COFD[966] = -2.94215257E-01;
COFD[967] = 1.25789510E-02;
COFD[968] = -1.94443917E+01;
COFD[969] = 4.76313424E+00;
COFD[970] = -3.93150913E-01;
COFD[971] = 1.66058644E-02;
COFD[972] = -2.13011004E+01;
COFD[973] = 5.46721890E+00;
COFD[974] = -4.63882055E-01;
COFD[975] = 1.88719903E-02;
COFD[976] = -1.73040188E+01;
COFD[977] = 4.03969426E+00;
COFD[978] = -3.05064314E-01;
COFD[979] = 1.30170956E-02;
COFD[980] = -1.54093883E+01;
COFD[981] = 3.47420753E+00;
COFD[982] = -2.35134222E-01;
COFD[983] = 1.01284662E-02;
COFD[984] = -1.58039288E+01;
COFD[985] = 3.47420753E+00;
COFD[986] = -2.35134222E-01;
COFD[987] = 1.01284662E-02;
COFD[988] = -1.56936676E+01;
COFD[989] = 3.63667810E+00;
COFD[990] = -2.55876890E-01;
COFD[991] = 1.10128613E-02;
COFD[992] = -1.56693720E+01;
COFD[993] = 3.63667810E+00;
COFD[994] = -2.55876890E-01;
COFD[995] = 1.10128613E-02;
COFD[996] = -1.12637288E+01;
COFD[997] = 2.25713623E+00;
COFD[998] = -8.27150060E-02;
COFD[999] = 3.77397157E-03;
COFD[1000] = -1.68045170E+01;
COFD[1001] = 3.86251333E+00;
COFD[1002] = -2.83724399E-01;
COFD[1003] = 1.21589320E-02;
COFD[1004] = -1.73135097E+01;
COFD[1005] = 4.03969426E+00;
COFD[1006] = -3.05064314E-01;
COFD[1007] = 1.30170956E-02;
COFD[1008] = -1.98547414E+01;
COFD[1009] = 5.07012033E+00;
COFD[1010] = -4.28341021E-01;
COFD[1011] = 1.79480600E-02;
COFD[1012] = -2.15811296E+01;
COFD[1013] = 5.49050988E+00;
COFD[1014] = -4.61803086E-01;
COFD[1015] = 1.85876911E-02;
COFD[1016] = -2.00945931E+01;
COFD[1017] = 5.15838205E+00;
COFD[1018] = -4.37782020E-01;
COFD[1019] = 1.82788934E-02;
COFD[1020] = -1.54914778E+01;
COFD[1021] = 3.93394014E+00;
COFD[1022] = -2.92267339E-01;
COFD[1023] = 1.24999144E-02;
COFD[1024] = -2.04615561E+01;
COFD[1025] = 5.27516202E+00;
COFD[1026] = -4.49784854E-01;
COFD[1027] = 1.86764670E-02;
COFD[1028] = -1.89481451E+01;
COFD[1029] = 5.34360281E+00;
COFD[1030] = -4.57384674E-01;
COFD[1031] = 1.89568876E-02;
COFD[1032] = -1.83642414E+01;
COFD[1033] = 4.71208389E+00;
COFD[1034] = -3.87053240E-01;
COFD[1035] = 1.63622220E-02;
COFD[1036] = -1.83797601E+01;
COFD[1037] = 4.71208389E+00;
COFD[1038] = -3.87053240E-01;
COFD[1039] = 1.63622220E-02;
COFD[1040] = -1.97847039E+01;
COFD[1041] = 5.06148428E+00;
COFD[1042] = -4.27422345E-01;
COFD[1043] = 1.79160853E-02;
COFD[1044] = -1.67361923E+01;
COFD[1045] = 3.16504366E+00;
COFD[1046] = -9.19485624E-02;
COFD[1047] = 1.39362133E-04;
COFD[1048] = -1.97897729E+01;
COFD[1049] = 5.06148428E+00;
COFD[1050] = -4.27422345E-01;
COFD[1051] = 1.79160853E-02;
COFD[1052] = -2.13011004E+01;
COFD[1053] = 5.46721890E+00;
COFD[1054] = -4.63882055E-01;
COFD[1055] = 1.88719903E-02;
COFD[1056] = -1.83814844E+01;
COFD[1057] = 3.96858583E+00;
COFD[1058] = -2.16338446E-01;
COFD[1059] = 6.21110478E-03;
COFD[1060] = -2.00227826E+01;
COFD[1061] = 5.13666604E+00;
COFD[1062] = -4.35440428E-01;
COFD[1063] = 1.81959353E-02;
COFD[1064] = -1.80419342E+01;
COFD[1065] = 4.54362305E+00;
COFD[1066] = -3.66509821E-01;
COFD[1067] = 1.55233015E-02;
COFD[1068] = -1.83635768E+01;
COFD[1069] = 4.54362305E+00;
COFD[1070] = -3.66509821E-01;
COFD[1071] = 1.55233015E-02;
COFD[1072] = -1.96096776E+01;
COFD[1073] = 5.13046828E+00;
COFD[1074] = -4.34766301E-01;
COFD[1075] = 1.81718003E-02;
COFD[1076] = -1.83120369E+01;
COFD[1077] = 4.71208389E+00;
COFD[1078] = -3.87053240E-01;
COFD[1079] = 1.63622220E-02;
COFD[1080] = -1.16700746E+01;
COFD[1081] = 2.46254894E+00;
COFD[1082] = -1.05290016E-01;
COFD[1083] = 4.56346575E-03;
COFD[1084] = -1.98420312E+01;
COFD[1085] = 5.07012033E+00;
COFD[1086] = -4.28341021E-01;
COFD[1087] = 1.79480600E-02;
COFD[1088] = -2.00283932E+01;
COFD[1089] = 5.13666604E+00;
COFD[1090] = -4.35440428E-01;
COFD[1091] = 1.81959353E-02;
COFD[1092] = -1.50924406E+01;
COFD[1093] = 3.26459489E+00;
COFD[1094] = -2.09215287E-01;
COFD[1095] = 9.05961407E-03;
COFD[1096] = -1.79327065E+01;
COFD[1097] = 4.23476606E+00;
COFD[1098] = -3.28847162E-01;
COFD[1099] = 1.39854168E-02;
COFD[1100] = -1.53273699E+01;
COFD[1101] = 3.36125353E+00;
COFD[1102] = -2.21308349E-01;
COFD[1103] = 9.56431936E-03;
COFD[1104] = -1.14841469E+01;
COFD[1105] = 2.37509888E+00;
COFD[1106] = -9.35410216E-02;
COFD[1107] = 4.03605551E-03;
COFD[1108] = -1.60767172E+01;
COFD[1109] = 3.63047782E+00;
COFD[1110] = -2.55092110E-01;
COFD[1111] = 1.09796900E-02;
COFD[1112] = -1.44429294E+01;
COFD[1113] = 3.71325476E+00;
COFD[1114] = -2.65538326E-01;
COFD[1115] = 1.14199023E-02;
COFD[1116] = -1.40792448E+01;
COFD[1117] = 3.05361342E+00;
COFD[1118] = -1.82331859E-01;
COFD[1119] = 7.91667899E-03;
COFD[1120] = -1.40991870E+01;
COFD[1121] = 3.05361342E+00;
COFD[1122] = -1.82331859E-01;
COFD[1123] = 7.91667899E-03;
COFD[1124] = -1.53349427E+01;
COFD[1125] = 3.36125353E+00;
COFD[1126] = -2.21308349E-01;
COFD[1127] = 9.56431936E-03;
COFD[1128] = -2.04514811E+01;
COFD[1129] = 5.29593785E+00;
COFD[1130] = -4.52123029E-01;
COFD[1131] = 1.87641215E-02;
COFD[1132] = -1.53421729E+01;
COFD[1133] = 3.36125353E+00;
COFD[1134] = -2.21308349E-01;
COFD[1135] = 9.56431936E-03;
COFD[1136] = -1.73040188E+01;
COFD[1137] = 4.03969426E+00;
COFD[1138] = -3.05064314E-01;
COFD[1139] = 1.30170956E-02;
COFD[1140] = -2.00227826E+01;
COFD[1141] = 5.13666604E+00;
COFD[1142] = -4.35440428E-01;
COFD[1143] = 1.81959353E-02;
COFD[1144] = -1.55291510E+01;
COFD[1145] = 3.43207521E+00;
COFD[1146] = -2.29953304E-01;
COFD[1147] = 9.91591599E-03;
COFD[1148] = -1.39390941E+01;
COFD[1149] = 2.95722149E+00;
COFD[1150] = -1.70165913E-01;
COFD[1151] = 7.40439932E-03;
COFD[1152] = -1.43015402E+01;
COFD[1153] = 2.95722149E+00;
COFD[1154] = -1.70165913E-01;
COFD[1155] = 7.40439932E-03;
COFD[1156] = -1.40474386E+01;
COFD[1157] = 3.05361342E+00;
COFD[1158] = -1.82331859E-01;
COFD[1159] = 7.91667899E-03;
COFD[1160] = -1.40257823E+01;
COFD[1161] = 3.05361342E+00;
COFD[1162] = -1.82331859E-01;
COFD[1163] = 7.91667899E-03;
COFD[1164] = -1.02357775E+01;
COFD[1165] = 1.85324333E+00;
COFD[1166] = -2.65008845E-02;
COFD[1167] = 1.17336026E-03;
COFD[1168] = -1.50746890E+01;
COFD[1169] = 3.26459489E+00;
COFD[1170] = -2.09215287E-01;
COFD[1171] = 9.05961407E-03;
COFD[1172] = -1.55370831E+01;
COFD[1173] = 3.43207521E+00;
COFD[1174] = -2.29953304E-01;
COFD[1175] = 9.91591599E-03;
COFD[1176] = -1.35094169E+01;
COFD[1177] = 2.78343819E+00;
COFD[1178] = -1.47679033E-01;
COFD[1179] = 6.43347681E-03;
COFD[1180] = -1.60698889E+01;
COFD[1181] = 3.68775110E+00;
COFD[1182] = -2.62341411E-01;
COFD[1183] = 1.12860938E-02;
COFD[1184] = -1.37252376E+01;
COFD[1185] = 2.87937412E+00;
COFD[1186] = -1.60161971E-01;
COFD[1187] = 6.97536928E-03;
COFD[1188] = -1.10204977E+01;
COFD[1189] = 2.26529435E+00;
COFD[1190] = -8.17536844E-02;
COFD[1191] = 3.63649607E-03;
COFD[1192] = -1.42859349E+01;
COFD[1193] = 3.08809301E+00;
COFD[1194] = -1.86635579E-01;
COFD[1195] = 8.09582723E-03;
COFD[1196] = -1.28316361E+01;
COFD[1197] = 3.15334729E+00;
COFD[1198] = -1.94972021E-01;
COFD[1199] = 8.45114576E-03;
COFD[1200] = -1.26277765E+01;
COFD[1201] = 2.59809959E+00;
COFD[1202] = -1.23503755E-01;
COFD[1203] = 5.38095363E-03;
COFD[1204] = -1.26418053E+01;
COFD[1205] = 2.59809959E+00;
COFD[1206] = -1.23503755E-01;
COFD[1207] = 5.38095363E-03;
COFD[1208] = -1.37299086E+01;
COFD[1209] = 2.87937412E+00;
COFD[1210] = -1.60161971E-01;
COFD[1211] = 6.97536928E-03;
COFD[1212] = -1.86401817E+01;
COFD[1213] = 4.78767270E+00;
COFD[1214] = -3.95990323E-01;
COFD[1215] = 1.67152840E-02;
COFD[1216] = -1.37343429E+01;
COFD[1217] = 2.87937412E+00;
COFD[1218] = -1.60161971E-01;
COFD[1219] = 6.97536928E-03;
COFD[1220] = -1.54093883E+01;
COFD[1221] = 3.47420753E+00;
COFD[1222] = -2.35134222E-01;
COFD[1223] = 1.01284662E-02;
COFD[1224] = -1.80419342E+01;
COFD[1225] = 4.54362305E+00;
COFD[1226] = -3.66509821E-01;
COFD[1227] = 1.55233015E-02;
COFD[1228] = -1.39390941E+01;
COFD[1229] = 2.95722149E+00;
COFD[1230] = -1.70165913E-01;
COFD[1231] = 7.40439932E-03;
COFD[1232] = -1.25036297E+01;
COFD[1233] = 2.49495041E+00;
COFD[1234] = -1.09654828E-01;
COFD[1235] = 4.75997939E-03;
COFD[1236] = -1.27994289E+01;
COFD[1237] = 2.49495041E+00;
COFD[1238] = -1.09654828E-01;
COFD[1239] = 4.75997939E-03;
COFD[1240] = -1.25947810E+01;
COFD[1241] = 2.59809959E+00;
COFD[1242] = -1.23503755E-01;
COFD[1243] = 5.38095363E-03;
COFD[1244] = -1.25793647E+01;
COFD[1245] = 2.59809959E+00;
COFD[1246] = -1.23503755E-01;
COFD[1247] = 5.38095363E-03;
COFD[1248] = -1.00487549E+01;
COFD[1249] = 1.85510219E+00;
COFD[1250] = -2.80877616E-02;
COFD[1251] = 1.30613884E-03;
COFD[1252] = -1.34982282E+01;
COFD[1253] = 2.78343819E+00;
COFD[1254] = -1.47679033E-01;
COFD[1255] = 6.43347681E-03;
COFD[1256] = -1.39440151E+01;
COFD[1257] = 2.95722149E+00;
COFD[1258] = -1.70165913E-01;
COFD[1259] = 7.40439932E-03;
COFD[1260] = -1.38664480E+01;
COFD[1261] = 2.78343819E+00;
COFD[1262] = -1.47679033E-01;
COFD[1263] = 6.43347681E-03;
COFD[1264] = -1.64546887E+01;
COFD[1265] = 3.68775110E+00;
COFD[1266] = -2.62341411E-01;
COFD[1267] = 1.12860938E-02;
COFD[1268] = -1.40910557E+01;
COFD[1269] = 2.87937412E+00;
COFD[1270] = -1.60161971E-01;
COFD[1271] = 6.97536928E-03;
COFD[1272] = -1.12088370E+01;
COFD[1273] = 2.26529435E+00;
COFD[1274] = -8.17536844E-02;
COFD[1275] = 3.63649607E-03;
COFD[1276] = -1.46728819E+01;
COFD[1277] = 3.08809301E+00;
COFD[1278] = -1.86635579E-01;
COFD[1279] = 8.09582723E-03;
COFD[1280] = -1.30280651E+01;
COFD[1281] = 3.15334729E+00;
COFD[1282] = -1.94972021E-01;
COFD[1283] = 8.45114576E-03;
COFD[1284] = -1.29480232E+01;
COFD[1285] = 2.59809959E+00;
COFD[1286] = -1.23503755E-01;
COFD[1287] = 5.38095363E-03;
COFD[1288] = -1.29675013E+01;
COFD[1289] = 2.59809959E+00;
COFD[1290] = -1.23503755E-01;
COFD[1291] = 5.38095363E-03;
COFD[1292] = -1.40983716E+01;
COFD[1293] = 2.87937412E+00;
COFD[1294] = -1.60161971E-01;
COFD[1295] = 6.97536928E-03;
COFD[1296] = -1.89747864E+01;
COFD[1297] = 4.78767270E+00;
COFD[1298] = -3.95990323E-01;
COFD[1299] = 1.67152840E-02;
COFD[1300] = -1.41053530E+01;
COFD[1301] = 2.87937412E+00;
COFD[1302] = -1.60161971E-01;
COFD[1303] = 6.97536928E-03;
COFD[1304] = -1.58039288E+01;
COFD[1305] = 3.47420753E+00;
COFD[1306] = -2.35134222E-01;
COFD[1307] = 1.01284662E-02;
COFD[1308] = -1.83635768E+01;
COFD[1309] = 4.54362305E+00;
COFD[1310] = -3.66509821E-01;
COFD[1311] = 1.55233015E-02;
COFD[1312] = -1.43015402E+01;
COFD[1313] = 2.95722149E+00;
COFD[1314] = -1.70165913E-01;
COFD[1315] = 7.40439932E-03;
COFD[1316] = -1.27994289E+01;
COFD[1317] = 2.49495041E+00;
COFD[1318] = -1.09654828E-01;
COFD[1319] = 4.75997939E-03;
COFD[1320] = -1.31501950E+01;
COFD[1321] = 2.49495041E+00;
COFD[1322] = -1.09654828E-01;
COFD[1323] = 4.75997939E-03;
COFD[1324] = -1.29177269E+01;
COFD[1325] = 2.59809959E+00;
COFD[1326] = -1.23503755E-01;
COFD[1327] = 5.38095363E-03;
COFD[1328] = -1.28965551E+01;
COFD[1329] = 2.59809959E+00;
COFD[1330] = -1.23503755E-01;
COFD[1331] = 5.38095363E-03;
COFD[1332] = -1.02732123E+01;
COFD[1333] = 1.85510219E+00;
COFD[1334] = -2.80877616E-02;
COFD[1335] = 1.30613884E-03;
COFD[1336] = -1.38492662E+01;
COFD[1337] = 2.78343819E+00;
COFD[1338] = -1.47679033E-01;
COFD[1339] = 6.43347681E-03;
COFD[1340] = -1.43092071E+01;
COFD[1341] = 2.95722149E+00;
COFD[1342] = -1.70165913E-01;
COFD[1343] = 7.40439932E-03;
COFD[1344] = -1.36572548E+01;
COFD[1345] = 2.89678405E+00;
COFD[1346] = -1.62418864E-01;
COFD[1347] = 7.07300755E-03;
COFD[1348] = -1.62922126E+01;
COFD[1349] = 3.81860507E+00;
COFD[1350] = -2.78482683E-01;
COFD[1351] = 1.19505034E-02;
COFD[1352] = -1.38482796E+01;
COFD[1353] = 2.98298723E+00;
COFD[1354] = -1.73428215E-01;
COFD[1355] = 7.54224684E-03;
COFD[1356] = -1.05898290E+01;
COFD[1357] = 2.15819366E+00;
COFD[1358] = -6.52830580E-02;
COFD[1359] = 2.80657258E-03;
COFD[1360] = -1.44786974E+01;
COFD[1361] = 3.21910603E+00;
COFD[1362] = -2.03442081E-01;
COFD[1363] = 8.81515218E-03;
COFD[1364] = -1.29289104E+01;
COFD[1365] = 3.28440910E+00;
COFD[1366] = -2.11707534E-01;
COFD[1367] = 9.16419558E-03;
COFD[1368] = -1.27248146E+01;
COFD[1369] = 2.70797975E+00;
COFD[1370] = -1.37895013E-01;
COFD[1371] = 6.01030858E-03;
COFD[1372] = -1.27398674E+01;
COFD[1373] = 2.70797975E+00;
COFD[1374] = -1.37895013E-01;
COFD[1375] = 6.01030858E-03;
COFD[1376] = -1.38534008E+01;
COFD[1377] = 2.98298723E+00;
COFD[1378] = -1.73428215E-01;
COFD[1379] = 7.54224684E-03;
COFD[1380] = -2.07528924E+01;
COFD[1381] = 5.46746294E+00;
COFD[1382] = -4.64612142E-01;
COFD[1383] = 1.89302169E-02;
COFD[1384] = -1.38582668E+01;
COFD[1385] = 2.98298723E+00;
COFD[1386] = -1.73428215E-01;
COFD[1387] = 7.54224684E-03;
COFD[1388] = -1.56936676E+01;
COFD[1389] = 3.63667810E+00;
COFD[1390] = -2.55876890E-01;
COFD[1391] = 1.10128613E-02;
COFD[1392] = -1.96096776E+01;
COFD[1393] = 5.13046828E+00;
COFD[1394] = -4.34766301E-01;
COFD[1395] = 1.81718003E-02;
COFD[1396] = -1.40474386E+01;
COFD[1397] = 3.05361342E+00;
COFD[1398] = -1.82331859E-01;
COFD[1399] = 7.91667899E-03;
COFD[1400] = -1.25947810E+01;
COFD[1401] = 2.59809959E+00;
COFD[1402] = -1.23503755E-01;
COFD[1403] = 5.38095363E-03;
COFD[1404] = -1.29177269E+01;
COFD[1405] = 2.59809959E+00;
COFD[1406] = -1.23503755E-01;
COFD[1407] = 5.38095363E-03;
COFD[1408] = -1.26878052E+01;
COFD[1409] = 2.70797975E+00;
COFD[1410] = -1.37895013E-01;
COFD[1411] = 6.01030858E-03;
COFD[1412] = -1.26712975E+01;
COFD[1413] = 2.70797975E+00;
COFD[1414] = -1.37895013E-01;
COFD[1415] = 6.01030858E-03;
COFD[1416] = -9.78765619E+00;
COFD[1417] = 1.83095585E+00;
COFD[1418] = -2.43017348E-02;
COFD[1419] = 1.11147663E-03;
COFD[1420] = -1.36450291E+01;
COFD[1421] = 2.89678405E+00;
COFD[1422] = -1.62418864E-01;
COFD[1423] = 7.07300755E-03;
COFD[1424] = -1.40528291E+01;
COFD[1425] = 3.05361342E+00;
COFD[1426] = -1.82331859E-01;
COFD[1427] = 7.91667899E-03;
COFD[1428] = -1.36358384E+01;
COFD[1429] = 2.89678405E+00;
COFD[1430] = -1.62418864E-01;
COFD[1431] = 7.07300755E-03;
COFD[1432] = -1.62681911E+01;
COFD[1433] = 3.81860507E+00;
COFD[1434] = -2.78482683E-01;
COFD[1435] = 1.19505034E-02;
COFD[1436] = -1.38263990E+01;
COFD[1437] = 2.98298723E+00;
COFD[1438] = -1.73428215E-01;
COFD[1439] = 7.54224684E-03;
COFD[1440] = -1.05860917E+01;
COFD[1441] = 2.15819366E+00;
COFD[1442] = -6.52830580E-02;
COFD[1443] = 2.80657258E-03;
COFD[1444] = -1.44552961E+01;
COFD[1445] = 3.21910603E+00;
COFD[1446] = -2.03442081E-01;
COFD[1447] = 8.81515218E-03;
COFD[1448] = -1.29269277E+01;
COFD[1449] = 3.28440910E+00;
COFD[1450] = -2.11707534E-01;
COFD[1451] = 9.16419558E-03;
COFD[1452] = -1.27083190E+01;
COFD[1453] = 2.70797975E+00;
COFD[1454] = -1.37895013E-01;
COFD[1455] = 6.01030858E-03;
COFD[1456] = -1.27228762E+01;
COFD[1457] = 2.70797975E+00;
COFD[1458] = -1.37895013E-01;
COFD[1459] = 6.01030858E-03;
COFD[1460] = -1.38312998E+01;
COFD[1461] = 2.98298723E+00;
COFD[1462] = -1.73428215E-01;
COFD[1463] = 7.54224684E-03;
COFD[1464] = -1.87865134E+01;
COFD[1465] = 4.90686422E+00;
COFD[1466] = -4.09428407E-01;
COFD[1467] = 1.72173805E-02;
COFD[1468] = -1.38359545E+01;
COFD[1469] = 2.98298723E+00;
COFD[1470] = -1.73428215E-01;
COFD[1471] = 7.54224684E-03;
COFD[1472] = -1.56693720E+01;
COFD[1473] = 3.63667810E+00;
COFD[1474] = -2.55876890E-01;
COFD[1475] = 1.10128613E-02;
COFD[1476] = -1.83120369E+01;
COFD[1477] = 4.71208389E+00;
COFD[1478] = -3.87053240E-01;
COFD[1479] = 1.63622220E-02;
COFD[1480] = -1.40257823E+01;
COFD[1481] = 3.05361342E+00;
COFD[1482] = -1.82331859E-01;
COFD[1483] = 7.91667899E-03;
COFD[1484] = -1.25793647E+01;
COFD[1485] = 2.59809959E+00;
COFD[1486] = -1.23503755E-01;
COFD[1487] = 5.38095363E-03;
COFD[1488] = -1.28965551E+01;
COFD[1489] = 2.59809959E+00;
COFD[1490] = -1.23503755E-01;
COFD[1491] = 5.38095363E-03;
COFD[1492] = -1.26712975E+01;
COFD[1493] = 2.70797975E+00;
COFD[1494] = -1.37895013E-01;
COFD[1495] = 6.01030858E-03;
COFD[1496] = -1.26553174E+01;
COFD[1497] = 2.70797975E+00;
COFD[1498] = -1.37895013E-01;
COFD[1499] = 6.01030858E-03;
COFD[1500] = -9.78099173E+00;
COFD[1501] = 1.83095585E+00;
COFD[1502] = -2.43017348E-02;
COFD[1503] = 1.11147663E-03;
COFD[1504] = -1.36241193E+01;
COFD[1505] = 2.89678405E+00;
COFD[1506] = -1.62418864E-01;
COFD[1507] = 7.07300755E-03;
COFD[1508] = -1.40309431E+01;
COFD[1509] = 3.05361342E+00;
COFD[1510] = -1.82331859E-01;
COFD[1511] = 7.91667899E-03;
COFD[1512] = -1.01389623E+01;
COFD[1513] = 1.80391843E+00;
COFD[1514] = -1.99275570E-02;
COFD[1515] = 8.81933064E-04;
COFD[1516] = -1.15094541E+01;
COFD[1517] = 2.30622063E+00;
COFD[1518] = -8.87775848E-02;
COFD[1519] = 4.01974335E-03;
COFD[1520] = -1.00964417E+01;
COFD[1521] = 1.80154868E+00;
COFD[1522] = -1.93107773E-02;
COFD[1523] = 8.41365140E-04;
COFD[1524] = -9.97002631E+00;
COFD[1525] = 2.09989861E+00;
COFD[1526] = -6.57792049E-02;
COFD[1527] = 3.22150287E-03;
COFD[1528] = -1.04249896E+01;
COFD[1529] = 1.94512965E+00;
COFD[1530] = -3.93510095E-02;
COFD[1531] = 1.77030865E-03;
COFD[1532] = -9.28658890E+00;
COFD[1533] = 1.98664968E+00;
COFD[1534] = -4.51158213E-02;
COFD[1535] = 2.03667696E-03;
COFD[1536] = -9.82541494E+00;
COFD[1537] = 1.83095585E+00;
COFD[1538] = -2.43017348E-02;
COFD[1539] = 1.11147663E-03;
COFD[1540] = -9.83138074E+00;
COFD[1541] = 1.83095585E+00;
COFD[1542] = -2.43017348E-02;
COFD[1543] = 1.11147663E-03;
COFD[1544] = -1.00981423E+01;
COFD[1545] = 1.80154868E+00;
COFD[1546] = -1.93107773E-02;
COFD[1547] = 8.41365140E-04;
COFD[1548] = -1.19621564E+01;
COFD[1549] = 2.61946046E+00;
COFD[1550] = -1.26311090E-01;
COFD[1551] = 5.50425635E-03;
COFD[1552] = -1.00997475E+01;
COFD[1553] = 1.80154868E+00;
COFD[1554] = -1.93107773E-02;
COFD[1555] = 8.41365140E-04;
COFD[1556] = -1.12637288E+01;
COFD[1557] = 2.25713623E+00;
COFD[1558] = -8.27150060E-02;
COFD[1559] = 3.77397157E-03;
COFD[1560] = -1.16700746E+01;
COFD[1561] = 2.46254894E+00;
COFD[1562] = -1.05290016E-01;
COFD[1563] = 4.56346575E-03;
COFD[1564] = -1.02357775E+01;
COFD[1565] = 1.85324333E+00;
COFD[1566] = -2.65008845E-02;
COFD[1567] = 1.17336026E-03;
COFD[1568] = -1.00487549E+01;
COFD[1569] = 1.85510219E+00;
COFD[1570] = -2.80877616E-02;
COFD[1571] = 1.30613884E-03;
COFD[1572] = -1.02732123E+01;
COFD[1573] = 1.85510219E+00;
COFD[1574] = -2.80877616E-02;
COFD[1575] = 1.30613884E-03;
COFD[1576] = -9.78765619E+00;
COFD[1577] = 1.83095585E+00;
COFD[1578] = -2.43017348E-02;
COFD[1579] = 1.11147663E-03;
COFD[1580] = -9.78099173E+00;
COFD[1581] = 1.83095585E+00;
COFD[1582] = -2.43017348E-02;
COFD[1583] = 1.11147663E-03;
COFD[1584] = -7.86974205E+00;
COFD[1585] = 1.19959934E+00;
COFD[1586] = 6.35132188E-02;
COFD[1587] = -2.90525342E-03;
COFD[1588] = -1.01347952E+01;
COFD[1589] = 1.80391843E+00;
COFD[1590] = -1.99275570E-02;
COFD[1591] = 8.81933064E-04;
COFD[1592] = -1.02375799E+01;
COFD[1593] = 1.85324333E+00;
COFD[1594] = -2.65008845E-02;
COFD[1595] = 1.17336026E-03;
COFD[1596] = -1.45767911E+01;
COFD[1597] = 3.06880733E+00;
COFD[1598] = -1.84232163E-01;
COFD[1599] = 7.99594639E-03;
COFD[1600] = -1.72968776E+01;
COFD[1601] = 4.00684631E+00;
COFD[1602] = -3.01155648E-01;
COFD[1603] = 1.28621017E-02;
COFD[1604] = -1.48133685E+01;
COFD[1605] = 3.16773813E+00;
COFD[1606] = -1.96823168E-01;
COFD[1607] = 8.53058072E-03;
COFD[1608] = -1.11071703E+01;
COFD[1609] = 2.21467976E+00;
COFD[1610] = -7.20501534E-02;
COFD[1611] = 3.07515437E-03;
COFD[1612] = -1.54956188E+01;
COFD[1613] = 3.41295809E+00;
COFD[1614] = -2.27626583E-01;
COFD[1615] = 9.82158260E-03;
COFD[1616] = -1.38221854E+01;
COFD[1617] = 3.46560000E+00;
COFD[1618] = -2.34075114E-01;
COFD[1619] = 1.00849661E-02;
COFD[1620] = -1.36761934E+01;
COFD[1621] = 2.89678405E+00;
COFD[1622] = -1.62418864E-01;
COFD[1623] = 7.07300755E-03;
COFD[1624] = -1.36954208E+01;
COFD[1625] = 2.89678405E+00;
COFD[1626] = -1.62418864E-01;
COFD[1627] = 7.07300755E-03;
COFD[1628] = -1.48205479E+01;
COFD[1629] = 3.16773813E+00;
COFD[1630] = -1.96823168E-01;
COFD[1631] = 8.53058072E-03;
COFD[1632] = -2.06077929E+01;
COFD[1633] = 5.33386551E+00;
COFD[1634] = -4.56343451E-01;
COFD[1635] = 1.89202797E-02;
COFD[1636] = -1.48273972E+01;
COFD[1637] = 3.16773813E+00;
COFD[1638] = -1.96823168E-01;
COFD[1639] = 8.53058072E-03;
COFD[1640] = -1.68045170E+01;
COFD[1641] = 3.86251333E+00;
COFD[1642] = -2.83724399E-01;
COFD[1643] = 1.21589320E-02;
COFD[1644] = -1.98420312E+01;
COFD[1645] = 5.07012033E+00;
COFD[1646] = -4.28341021E-01;
COFD[1647] = 1.79480600E-02;
COFD[1648] = -1.50746890E+01;
COFD[1649] = 3.26459489E+00;
COFD[1650] = -2.09215287E-01;
COFD[1651] = 9.05961407E-03;
COFD[1652] = -1.34982282E+01;
COFD[1653] = 2.78343819E+00;
COFD[1654] = -1.47679033E-01;
COFD[1655] = 6.43347681E-03;
COFD[1656] = -1.38492662E+01;
COFD[1657] = 2.78343819E+00;
COFD[1658] = -1.47679033E-01;
COFD[1659] = 6.43347681E-03;
COFD[1660] = -1.36450291E+01;
COFD[1661] = 2.89678405E+00;
COFD[1662] = -1.62418864E-01;
COFD[1663] = 7.07300755E-03;
COFD[1664] = -1.36241193E+01;
COFD[1665] = 2.89678405E+00;
COFD[1666] = -1.62418864E-01;
COFD[1667] = 7.07300755E-03;
COFD[1668] = -1.01347952E+01;
COFD[1669] = 1.80391843E+00;
COFD[1670] = -1.99275570E-02;
COFD[1671] = 8.81933064E-04;
COFD[1672] = -1.45599127E+01;
COFD[1673] = 3.06880733E+00;
COFD[1674] = -1.84232163E-01;
COFD[1675] = 7.99594639E-03;
COFD[1676] = -1.50822150E+01;
COFD[1677] = 3.26459489E+00;
COFD[1678] = -2.09215287E-01;
COFD[1679] = 9.05961407E-03;
COFD[1680] = -1.51002407E+01;
COFD[1681] = 3.26459489E+00;
COFD[1682] = -2.09215287E-01;
COFD[1683] = 9.05961407E-03;
COFD[1684] = -1.79420259E+01;
COFD[1685] = 4.23476606E+00;
COFD[1686] = -3.28847162E-01;
COFD[1687] = 1.39854168E-02;
COFD[1688] = -1.53354270E+01;
COFD[1689] = 3.36125353E+00;
COFD[1690] = -2.21308349E-01;
COFD[1691] = 9.56431936E-03;
COFD[1692] = -1.14851085E+01;
COFD[1693] = 2.37509888E+00;
COFD[1694] = -9.35410216E-02;
COFD[1695] = 4.03605551E-03;
COFD[1696] = -1.60856572E+01;
COFD[1697] = 3.63047782E+00;
COFD[1698] = -2.55092110E-01;
COFD[1699] = 1.09796900E-02;
COFD[1700] = -1.44434251E+01;
COFD[1701] = 3.71325476E+00;
COFD[1702] = -2.65538326E-01;
COFD[1703] = 1.14199023E-02;
COFD[1704] = -1.40846299E+01;
COFD[1705] = 3.05361342E+00;
COFD[1706] = -1.82331859E-01;
COFD[1707] = 7.91667899E-03;
COFD[1708] = -1.41047925E+01;
COFD[1709] = 3.05361342E+00;
COFD[1710] = -1.82331859E-01;
COFD[1711] = 7.91667899E-03;
COFD[1712] = -1.53431237E+01;
COFD[1713] = 3.36125353E+00;
COFD[1714] = -2.21308349E-01;
COFD[1715] = 9.56431936E-03;
COFD[1716] = -2.04572980E+01;
COFD[1717] = 5.29593785E+00;
COFD[1718] = -4.52123029E-01;
COFD[1719] = 1.87641215E-02;
COFD[1720] = -1.53504741E+01;
COFD[1721] = 3.36125353E+00;
COFD[1722] = -2.21308349E-01;
COFD[1723] = 9.56431936E-03;
COFD[1724] = -1.73135097E+01;
COFD[1725] = 4.03969426E+00;
COFD[1726] = -3.05064314E-01;
COFD[1727] = 1.30170956E-02;
COFD[1728] = -2.00283932E+01;
COFD[1729] = 5.13666604E+00;
COFD[1730] = -4.35440428E-01;
COFD[1731] = 1.81959353E-02;
COFD[1732] = -1.55370831E+01;
COFD[1733] = 3.43207521E+00;
COFD[1734] = -2.29953304E-01;
COFD[1735] = 9.91591599E-03;
COFD[1736] = -1.39440151E+01;
COFD[1737] = 2.95722149E+00;
COFD[1738] = -1.70165913E-01;
COFD[1739] = 7.40439932E-03;
COFD[1740] = -1.43092071E+01;
COFD[1741] = 2.95722149E+00;
COFD[1742] = -1.70165913E-01;
COFD[1743] = 7.40439932E-03;
COFD[1744] = -1.40528291E+01;
COFD[1745] = 3.05361342E+00;
COFD[1746] = -1.82331859E-01;
COFD[1747] = 7.91667899E-03;
COFD[1748] = -1.40309431E+01;
COFD[1749] = 3.05361342E+00;
COFD[1750] = -1.82331859E-01;
COFD[1751] = 7.91667899E-03;
COFD[1752] = -1.02375799E+01;
COFD[1753] = 1.85324333E+00;
COFD[1754] = -2.65008845E-02;
COFD[1755] = 1.17336026E-03;
COFD[1756] = -1.50822150E+01;
COFD[1757] = 3.26459489E+00;
COFD[1758] = -2.09215287E-01;
COFD[1759] = 9.05961407E-03;
COFD[1760] = -1.55451432E+01;
COFD[1761] = 3.43207521E+00;
COFD[1762] = -2.29953304E-01;
COFD[1763] = 9.91591599E-03;
}


// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetKTDIF(int* KTDIF) {
KTDIF[0] = 3;
KTDIF[1] = 5;
KTDIF[2] = 18;
}


// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetCOFTD(amrex::Real* COFTD) {
COFTD[0] = 4.58515129E-01;
COFTD[1] = 2.44829242E-05;
COFTD[2] = -8.80389080E-09;
COFTD[3] = 1.52930659E-12;
COFTD[4] = 3.59941461E-01;
COFTD[5] = 2.20525123E-04;
COFTD[6] = -1.01579995E-07;
COFTD[7] = 1.42502963E-11;
COFTD[8] = 4.53476773E-01;
COFTD[9] = 4.08538395E-05;
COFTD[10] = -1.74068074E-08;
COFTD[11] = 2.81096192E-12;
COFTD[12] = 0.00000000E+00;
COFTD[13] = 0.00000000E+00;
COFTD[14] = 0.00000000E+00;
COFTD[15] = 0.00000000E+00;
COFTD[16] = 4.37881436E-01;
COFTD[17] = 8.92149454E-05;
COFTD[18] = -4.15912444E-08;
COFTD[19] = 6.27125279E-12;
COFTD[20] = -1.58593068E-01;
COFTD[21] = -3.77534860E-05;
COFTD[22] = 1.76801591E-08;
COFTD[23] = -2.63675347E-12;
COFTD[24] = 4.20466706E-01;
COFTD[25] = -3.28747658E-06;
COFTD[26] = 6.10307873E-09;
COFTD[27] = -8.09348795E-13;
COFTD[28] = 4.26891116E-01;
COFTD[29] = -3.33770671E-06;
COFTD[30] = 6.19632912E-09;
COFTD[31] = -8.21715028E-13;
COFTD[32] = 4.55232006E-01;
COFTD[33] = 4.10119688E-05;
COFTD[34] = -1.74741824E-08;
COFTD[35] = 2.82184206E-12;
COFTD[36] = 9.22530884E-02;
COFTD[37] = 4.74226232E-04;
COFTD[38] = -1.95750032E-07;
COFTD[39] = 2.49969266E-11;
COFTD[40] = 4.56889027E-01;
COFTD[41] = 4.11612503E-05;
COFTD[42] = -1.75377875E-08;
COFTD[43] = 2.83211342E-12;
COFTD[44] = 3.87377157E-01;
COFTD[45] = 1.81763014E-04;
COFTD[46] = -8.45894304E-08;
COFTD[47] = 1.20631900E-11;
COFTD[48] = 1.54186688E-01;
COFTD[49] = 3.98872931E-04;
COFTD[50] = -1.69877724E-07;
COFTD[51] = 2.21714464E-11;
COFTD[52] = 4.43215085E-01;
COFTD[53] = 5.56930482E-05;
COFTD[54] = -2.50356202E-08;
COFTD[55] = 3.91860456E-12;
COFTD[56] = 4.11101297E-01;
COFTD[57] = -1.43685823E-05;
COFTD[58] = 1.25773780E-08;
COFTD[59] = -1.88895358E-12;
COFTD[60] = 4.77973491E-01;
COFTD[61] = -1.67058618E-05;
COFTD[62] = 1.46232895E-08;
COFTD[63] = -2.19622206E-12;
COFTD[64] = 4.20628012E-01;
COFTD[65] = -3.28873777E-06;
COFTD[66] = 6.10542009E-09;
COFTD[67] = -8.09659290E-13;
COFTD[68] = 4.13461728E-01;
COFTD[69] = -3.23270720E-06;
COFTD[70] = 6.00140141E-09;
COFTD[71] = -7.95865040E-13;
COFTD[72] = 1.56102782E-01;
COFTD[73] = 6.23783285E-05;
COFTD[74] = -2.69205245E-08;
COFTD[75] = 5.23545262E-14;
COFTD[76] = 4.54133806E-01;
COFTD[77] = 2.42489786E-05;
COFTD[78] = -8.71976557E-09;
COFTD[79] = 1.51469336E-12;
COFTD[80] = 4.45040088E-01;
COFTD[81] = 5.59223724E-05;
COFTD[82] = -2.51387080E-08;
COFTD[83] = 3.93473998E-12;
COFTD[84] = 2.73849555E-01;
COFTD[85] = 3.59827236E-04;
COFTD[86] = -1.59172729E-07;
COFTD[87] = 2.14048115E-11;
COFTD[88] = 7.46457136E-02;
COFTD[89] = 6.02362377E-04;
COFTD[90] = -2.44918230E-07;
COFTD[91] = 3.09652598E-11;
COFTD[92] = 2.53688084E-01;
COFTD[93] = 3.89160027E-04;
COFTD[94] = -1.70615841E-07;
COFTD[95] = 2.27712605E-11;
COFTD[96] = 1.58593068E-01;
COFTD[97] = 3.77534860E-05;
COFTD[98] = -1.76801591E-08;
COFTD[99] = 2.63675347E-12;
COFTD[100] = 2.01405350E-01;
COFTD[101] = 4.62875168E-04;
COFTD[102] = -1.98378401E-07;
COFTD[103] = 2.60113328E-11;
COFTD[104] = 0.00000000E+00;
COFTD[105] = 0.00000000E+00;
COFTD[106] = 0.00000000E+00;
COFTD[107] = 0.00000000E+00;
COFTD[108] = 2.97684663E-01;
COFTD[109] = 2.85456850E-04;
COFTD[110] = -1.28553496E-07;
COFTD[111] = 1.75750084E-11;
COFTD[112] = 2.99924635E-01;
COFTD[113] = 2.87604812E-04;
COFTD[114] = -1.29520816E-07;
COFTD[115] = 1.77072541E-11;
COFTD[116] = 2.54177155E-01;
COFTD[117] = 3.89910267E-04;
COFTD[118] = -1.70944762E-07;
COFTD[119] = 2.28151600E-11;
COFTD[120] = -1.11291627E-01;
COFTD[121] = 6.84136016E-04;
COFTD[122] = -2.50607231E-07;
COFTD[123] = 2.96930988E-11;
COFTD[124] = 2.54638073E-01;
COFTD[125] = 3.90617320E-04;
COFTD[126] = -1.71254749E-07;
COFTD[127] = 2.28565324E-11;
COFTD[128] = 1.10891814E-01;
COFTD[129] = 5.67927632E-04;
COFTD[130] = -2.34461248E-07;
COFTD[131] = 2.99431374E-11;
COFTD[132] = -8.03898818E-02;
COFTD[133] = 6.69315146E-04;
COFTD[134] = -2.50812116E-07;
COFTD[135] = 3.01336785E-11;
COFTD[136] = 2.34496461E-01;
COFTD[137] = 4.12132599E-04;
COFTD[138] = -1.79284434E-07;
COFTD[139] = 2.37782011E-11;
COFTD[140] = 3.13531244E-01;
COFTD[141] = 2.50352023E-04;
COFTD[142] = -1.13856408E-07;
COFTD[143] = 1.57259985E-11;
COFTD[144] = 3.37843844E-01;
COFTD[145] = 2.69765427E-04;
COFTD[146] = -1.22685338E-07;
COFTD[147] = 1.69454620E-11;
COFTD[148] = 2.97741077E-01;
COFTD[149] = 2.85510946E-04;
COFTD[150] = -1.28577859E-07;
COFTD[151] = 1.75783390E-11;
COFTD[152] = 2.95226177E-01;
COFTD[153] = 2.83099350E-04;
COFTD[154] = -1.27491813E-07;
COFTD[155] = 1.74298618E-11;
COFTD[156] = 3.36708328E-01;
COFTD[157] = -3.00019524E-05;
COFTD[158] = 2.59034066E-08;
COFTD[159] = -4.98729539E-12;
COFTD[160] = 2.72542793E-01;
COFTD[161] = 3.58110203E-04;
COFTD[162] = -1.58413184E-07;
COFTD[163] = 2.13026714E-11;
COFTD[164] = 2.34977268E-01;
COFTD[165] = 4.12977628E-04;
COFTD[166] = -1.79652035E-07;
COFTD[167] = 2.38269554E-11;
COFTD[168] = 4.20821206E-01;
COFTD[169] = -1.71731554E-05;
COFTD[170] = 2.78656609E-08;
COFTD[171] = -7.30543215E-12;
COFTD[172] = 4.63554564E-01;
COFTD[173] = -2.78271339E-05;
COFTD[174] = 2.16454946E-08;
COFTD[175] = -3.45525358E-12;
COFTD[176] = 4.31562318E-01;
COFTD[177] = -2.54993047E-05;
COFTD[178] = 3.12402126E-08;
COFTD[179] = -7.38248667E-12;
COFTD[180] = -1.56102782E-01;
COFTD[181] = -6.23783285E-05;
COFTD[182] = 2.69205245E-08;
COFTD[183] = -5.23545262E-14;
COFTD[184] = 4.60007907E-01;
COFTD[185] = -3.96576321E-05;
COFTD[186] = 3.57232592E-08;
COFTD[187] = -7.10234617E-12;
COFTD[188] = -3.36708328E-01;
COFTD[189] = 3.00019524E-05;
COFTD[190] = -2.59034066E-08;
COFTD[191] = 4.98729539E-12;
COFTD[192] = 3.22908384E-01;
COFTD[193] = 3.55200312E-06;
COFTD[194] = 1.45595842E-08;
COFTD[195] = -5.48527586E-12;
COFTD[196] = 3.33246552E-01;
COFTD[197] = 3.66572332E-06;
COFTD[198] = 1.50257208E-08;
COFTD[199] = -5.66089131E-12;
COFTD[200] = 4.34923462E-01;
COFTD[201] = -2.56979014E-05;
COFTD[202] = 3.14835212E-08;
COFTD[203] = -7.43998381E-12;
COFTD[204] = 2.97269498E-01;
COFTD[205] = 8.12622316E-05;
COFTD[206] = -3.81241893E-08;
COFTD[207] = 5.63198490E-12;
COFTD[208] = 4.38106367E-01;
COFTD[209] = -2.58859665E-05;
COFTD[210] = 3.17139274E-08;
COFTD[211] = -7.49443191E-12;
COFTD[212] = 4.71546078E-01;
COFTD[213] = -3.73005161E-05;
COFTD[214] = 2.86681572E-08;
COFTD[215] = -4.83088598E-12;
COFTD[216] = 3.04755237E-01;
COFTD[217] = 5.31113591E-05;
COFTD[218] = -2.45713787E-08;
COFTD[219] = 3.74753389E-12;
COFTD[220] = 4.30601280E-01;
COFTD[221] = -3.07348755E-05;
COFTD[222] = 3.26249867E-08;
COFTD[223] = -7.18557516E-12;
COFTD[224] = 2.94489199E-01;
COFTD[225] = 1.46954229E-05;
COFTD[226] = 8.00539142E-09;
COFTD[227] = -4.75443733E-12;
COFTD[228] = 4.01625971E-01;
COFTD[229] = 2.00416977E-05;
COFTD[230] = 1.09177964E-08;
COFTD[231] = -6.48412748E-12;
COFTD[232] = 3.23166626E-01;
COFTD[233] = 3.55484379E-06;
COFTD[234] = 1.45712281E-08;
COFTD[235] = -5.48966264E-12;
COFTD[236] = 3.11759274E-01;
COFTD[237] = 3.42936254E-06;
COFTD[238] = 1.40568831E-08;
COFTD[239] = -5.29588485E-12;
COFTD[240] = 0.00000000E+00;
COFTD[241] = 0.00000000E+00;
COFTD[242] = 0.00000000E+00;
COFTD[243] = 0.00000000E+00;
COFTD[244] = 4.12760854E-01;
COFTD[245] = -1.68442231E-05;
COFTD[246] = 2.73319258E-08;
COFTD[247] = -7.16550489E-12;
COFTD[248] = 4.34172051E-01;
COFTD[249] = -3.09897452E-05;
COFTD[250] = 3.28955301E-08;
COFTD[251] = -7.24516171E-12;
}


// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void GET_CRITPARAMS(amrex::Real *  Tci, amrex::Real *  ai, amrex::Real *  bi, amrex::Real *  acentric_i)
{

amrex::Real   EPS[21];
amrex::Real   SIG[21];
amrex::Real    wt[21];
amrex::Real avogadro = 6.02214199e23;
amrex::Real boltzmann = 1.3806503e-16;// we work in CGS
amrex::Real Rcst = 83.144598;// in bar [CGS] !

egtransetEPS(EPS);
egtransetSIG(SIG);
get_mw(wt);

// species 0: NO
// Imported from NIST
Tci[0] = 180.000000 ; 
ai[0] = 1e6 * 0.42748 * Rcst * Rcst * Tci[0] * Tci[0] / (30.006000 * 30.006000 * 64.800000); 
bi[0] = 0.08664 * Rcst * Tci[0] / (30.006000 * 64.800000); 
acentric_i[0] = 0.582000 ;

// species 1: N2O
// Imported from NIST
Tci[1] = 309.600000 ; 
ai[1] = 1e6 * 0.42748 * Rcst * Rcst * Tci[1] * Tci[1] / (44.013000 * 44.013000 * 72.550000); 
bi[1] = 0.08664 * Rcst * Tci[1] / (44.013000 * 72.550000); 
acentric_i[1] = 0.162000 ;

// species 2: O2
// Imported from NIST
Tci[2] = 154.581000 ; 
ai[2] = 1e6 * 0.42748 * Rcst * Rcst * Tci[2] * Tci[2] / (31.998800 * 31.998800 * 50.430466); 
bi[2] = 0.08664 * Rcst * Tci[2] / (31.998800 * 50.430466); 
acentric_i[2] = 0.022200 ;

// species 3: H2
// Imported from NIST
Tci[3] = 33.145000 ; 
ai[3] = 1e6 * 0.42748 * Rcst * Rcst * Tci[3] * Tci[3] / (2.015880 * 2.015880 * 12.964000); 
bi[3] = 0.08664 * Rcst * Tci[3] / (2.015880 * 12.964000); 
acentric_i[3] = -0.219000 ;

// species 4: AR
// Imported from NIST
Tci[4] = 150.860000 ; 
ai[4] = 1e6 * 0.42748 * Rcst * Rcst * Tci[4] * Tci[4] / (39.948000 * 39.948000 * 48.980000); 
bi[4] = 0.08664 * Rcst * Tci[4] / (39.948000 * 48.980000); 
acentric_i[4] = -0.002000 ;

// species 5: H
Tci[5] = 1.316 * EPS[5] ; 
ai[5] = (5.55 * avogadro * avogadro * EPS[5]*boltzmann * 1e-24 * SIG[5] * SIG[5] * SIG[5] ) / (wt[5] * wt[5]); 
bi[5] = 0.855 * avogadro * 1e-24 * SIG[5] * SIG[5] * SIG[5] / (wt[5]); 
acentric_i[5] = 0.0 ;

// species 6: O
Tci[6] = 1.316 * EPS[6] ; 
ai[6] = (5.55 * avogadro * avogadro * EPS[6]*boltzmann * 1e-24 * SIG[6] * SIG[6] * SIG[6] ) / (wt[6] * wt[6]); 
bi[6] = 0.855 * avogadro * 1e-24 * SIG[6] * SIG[6] * SIG[6] / (wt[6]); 
acentric_i[6] = 0.0 ;

// species 7: OH
Tci[7] = 1.316 * EPS[7] ; 
ai[7] = (5.55 * avogadro * avogadro * EPS[7]*boltzmann * 1e-24 * SIG[7] * SIG[7] * SIG[7] ) / (wt[7] * wt[7]); 
bi[7] = 0.855 * avogadro * 1e-24 * SIG[7] * SIG[7] * SIG[7] / (wt[7]); 
acentric_i[7] = 0.0 ;

// species 8: HO2
Tci[8] = 1.316 * EPS[8] ; 
ai[8] = (5.55 * avogadro * avogadro * EPS[8]*boltzmann * 1e-24 * SIG[8] * SIG[8] * SIG[8] ) / (wt[8] * wt[8]); 
bi[8] = 0.855 * avogadro * 1e-24 * SIG[8] * SIG[8] * SIG[8] / (wt[8]); 
acentric_i[8] = 0.0 ;

// species 9: H2O
// Imported from NIST
Tci[9] = 647.096000 ; 
ai[9] = 1e6 * 0.42748 * Rcst * Rcst * Tci[9] * Tci[9] / (18.015340 * 18.015340 * 220.640000); 
bi[9] = 0.08664 * Rcst * Tci[9] / (18.015340 * 220.640000); 
acentric_i[9] = 0.344300 ;

// species 10: H2O2
Tci[10] = 1.316 * EPS[10] ; 
ai[10] = (5.55 * avogadro * avogadro * EPS[10]*boltzmann * 1e-24 * SIG[10] * SIG[10] * SIG[10] ) / (wt[10] * wt[10]); 
bi[10] = 0.855 * avogadro * 1e-24 * SIG[10] * SIG[10] * SIG[10] / (wt[10]); 
acentric_i[10] = 0.0 ;

// species 11: NO2
Tci[11] = 1.316 * EPS[11] ; 
ai[11] = (5.55 * avogadro * avogadro * EPS[11]*boltzmann * 1e-24 * SIG[11] * SIG[11] * SIG[11] ) / (wt[11] * wt[11]); 
bi[11] = 0.855 * avogadro * 1e-24 * SIG[11] * SIG[11] * SIG[11] / (wt[11]); 
acentric_i[11] = 0.0 ;

// species 12: NH3
Tci[12] = 1.316 * EPS[12] ; 
ai[12] = (5.55 * avogadro * avogadro * EPS[12]*boltzmann * 1e-24 * SIG[12] * SIG[12] * SIG[12] ) / (wt[12] * wt[12]); 
bi[12] = 0.855 * avogadro * 1e-24 * SIG[12] * SIG[12] * SIG[12] / (wt[12]); 
acentric_i[12] = 0.0 ;

// species 13: HNO
Tci[13] = 1.316 * EPS[13] ; 
ai[13] = (5.55 * avogadro * avogadro * EPS[13]*boltzmann * 1e-24 * SIG[13] * SIG[13] * SIG[13] ) / (wt[13] * wt[13]); 
bi[13] = 0.855 * avogadro * 1e-24 * SIG[13] * SIG[13] * SIG[13] / (wt[13]); 
acentric_i[13] = 0.0 ;

// species 14: N
Tci[14] = 1.316 * EPS[14] ; 
ai[14] = (5.55 * avogadro * avogadro * EPS[14]*boltzmann * 1e-24 * SIG[14] * SIG[14] * SIG[14] ) / (wt[14] * wt[14]); 
bi[14] = 0.855 * avogadro * 1e-24 * SIG[14] * SIG[14] * SIG[14] / (wt[14]); 
acentric_i[14] = 0.0 ;

// species 15: NNH
Tci[15] = 1.316 * EPS[15] ; 
ai[15] = (5.55 * avogadro * avogadro * EPS[15]*boltzmann * 1e-24 * SIG[15] * SIG[15] * SIG[15] ) / (wt[15] * wt[15]); 
bi[15] = 0.855 * avogadro * 1e-24 * SIG[15] * SIG[15] * SIG[15] / (wt[15]); 
acentric_i[15] = 0.0 ;

// species 16: NH2
Tci[16] = 1.316 * EPS[16] ; 
ai[16] = (5.55 * avogadro * avogadro * EPS[16]*boltzmann * 1e-24 * SIG[16] * SIG[16] * SIG[16] ) / (wt[16] * wt[16]); 
bi[16] = 0.855 * avogadro * 1e-24 * SIG[16] * SIG[16] * SIG[16] / (wt[16]); 
acentric_i[16] = 0.0 ;

// species 17: NH
Tci[17] = 1.316 * EPS[17] ; 
ai[17] = (5.55 * avogadro * avogadro * EPS[17]*boltzmann * 1e-24 * SIG[17] * SIG[17] * SIG[17] ) / (wt[17] * wt[17]); 
bi[17] = 0.855 * avogadro * 1e-24 * SIG[17] * SIG[17] * SIG[17] / (wt[17]); 
acentric_i[17] = 0.0 ;

// species 18: HE
Tci[18] = 1.316 * EPS[18] ; 
ai[18] = (5.55 * avogadro * avogadro * EPS[18]*boltzmann * 1e-24 * SIG[18] * SIG[18] * SIG[18] ) / (wt[18] * wt[18]); 
bi[18] = 0.855 * avogadro * 1e-24 * SIG[18] * SIG[18] * SIG[18] / (wt[18]); 
acentric_i[18] = 0.0 ;

// species 19: N2
// Imported from NIST
Tci[19] = 126.192000 ; 
ai[19] = 1e6 * 0.42748 * Rcst * Rcst * Tci[19] * Tci[19] / (28.013400 * 28.013400 * 33.958000); 
bi[19] = 0.08664 * Rcst * Tci[19] / (28.013400 * 33.958000); 
acentric_i[19] = 0.037200 ;

// species 20: H2NO
Tci[20] = 1.316 * EPS[20] ; 
ai[20] = (5.55 * avogadro * avogadro * EPS[20]*boltzmann * 1e-24 * SIG[20] * SIG[20] * SIG[20] ) / (wt[20] * wt[20]); 
bi[20] = 0.855 * avogadro * 1e-24 * SIG[20] * SIG[20] * SIG[20] / (wt[20]); 
acentric_i[20] = 0.0 ;

return;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/) {
amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/) {
amrex::Abort("sgjsolve_simplified not implemented, choose a different solver ");
}

#endif
