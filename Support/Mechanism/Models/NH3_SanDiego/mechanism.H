#ifndef MECHANISM_H
#define MECHANISM_H

#include <AMReX_Gpu.H>
#include <AMReX_REAL.H>

/* Elements
0  N
1  O
2  H
3  Ar
4  He
*/

// Species
#define NO_ID 0
#define N2O_ID 1
#define O2_ID 2
#define H2_ID 3
#define AR_ID 4
#define H_ID 5
#define O_ID 6
#define OH_ID 7
#define HO2_ID 8
#define H2O_ID 9
#define H2O2_ID 10
#define NO2_ID 11
#define NH3_ID 12
#define HNO_ID 13
#define N_ID 14
#define N2H_ID 15
#define NH2_ID 16
#define NH_ID 17
#define N2_ID 18
#define H2NO_ID 19
#define HE_ID 20

#define NUM_ELEMENTS 5
#define NUM_SPECIES 21
#define NUM_IONS 0
#define NUM_REACTIONS 64

#define NUM_FIT 4

//  ALWAYS on CPU stuff -- can have different def depending on if we are CPU or GPU based. Defined in mechanism.cpp 
void atomicWeight(amrex::Real *  awt);
//  MISC 
void CKAWT(amrex::Real *  awt);
void CKNCF(int * ncf);
void CKSYME_STR(amrex::Vector<std::string>& ename);
void CKSYMS_STR(amrex::Vector<std::string>& kname);
void GET_RMAP(int * _rmap);
void CKINU(int * i, int * nspec, int * ki, int * nu);
void CKKFKR(amrex::Real *  P, amrex::Real *  T,amrex::Real *  x, amrex::Real *  q_f, amrex::Real *  q_r);
void progressRateFR(amrex::Real *  q_f, amrex::Real *  q_r,amrex::Real *  sc, amrex::Real T);
//  SPARSE INFORMATION 
void SPARSITY_INFO(int * nJdata, const int * consP, int NCELLS);
void SPARSITY_INFO_SYST(int * nJdata, const int * consP, int NCELLS);
void SPARSITY_INFO_SYST_SIMPLIFIED(int * nJdata, const int * consP);
void SPARSITY_PREPROC_CSC(int * rowVals, int * colPtrs, const int * consP, int NCELLS);
void SPARSITY_PREPROC_CSR(int * colVals, int * rowPtrs, const int * consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_CSR(int * colVals, int * rowPtrs, const int * consP, int NCELLS, int base);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSC(int * rowVals, int * colPtrs, int * indx, const int * consP);
void SPARSITY_PREPROC_SYST_SIMPLIFIED_CSR(int * colVals, int * rowPtr, const int * consP, int base);


// A few mechanism parameters
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKINDX(int * mm, int * kk, int * ii, int * nfit)
{
*mm = 5;
*kk = 21;
*ii = 64;
*nfit = -1; // Why do you need this anyway ? 
}

//  inverse molecular weights 
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void get_imw(amrex::Real *imw_new){
imw_new[0] = 1.0/30.006000;// NO
imw_new[1] = 1.0/44.013000;// N2O
imw_new[2] = 1.0/31.998000;// O2
imw_new[3] = 1.0/2.016000;// H2
imw_new[4] = 1.0/39.950000;// AR
imw_new[5] = 1.0/1.008000;// H
imw_new[6] = 1.0/15.999000;// O
imw_new[7] = 1.0/17.007000;// OH
imw_new[8] = 1.0/33.006000;// HO2
imw_new[9] = 1.0/18.015000;// H2O
imw_new[10] = 1.0/34.014000;// H2O2
imw_new[11] = 1.0/46.005000;// NO2
imw_new[12] = 1.0/17.031000;// NH3
imw_new[13] = 1.0/31.014000;// HNO
imw_new[14] = 1.0/14.007000;// N
imw_new[15] = 1.0/29.022000;// N2H
imw_new[16] = 1.0/16.023000;// NH2
imw_new[17] = 1.0/15.015000;// NH
imw_new[18] = 1.0/28.014000;// N2
imw_new[19] = 1.0/32.022000;// H2NO
imw_new[20] = 1.0/4.002602;// HE
}

//  molecular weights 
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void get_mw(amrex::Real *mw_new){
mw_new[0] = 30.006000;// NO
mw_new[1] = 44.013000;// N2O
mw_new[2] = 31.998000;// O2
mw_new[3] = 2.016000;// H2
mw_new[4] = 39.950000;// AR
mw_new[5] = 1.008000;// H
mw_new[6] = 15.999000;// O
mw_new[7] = 17.007000;// OH
mw_new[8] = 33.006000;// HO2
mw_new[9] = 18.015000;// H2O
mw_new[10] = 34.014000;// H2O2
mw_new[11] = 46.005000;// NO2
mw_new[12] = 17.031000;// NH3
mw_new[13] = 31.014000;// HNO
mw_new[14] = 14.007000;// N
mw_new[15] = 29.022000;// N2H
mw_new[16] = 16.023000;// NH2
mw_new[17] = 15.015000;// NH
mw_new[18] = 28.014000;// N2
mw_new[19] = 32.022000;// H2NO
mw_new[20] = 4.002602;// HE
}

//  Returns R, Rc, Patm
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKRP(amrex::Real *  ru, amrex::Real *  ruc, amrex::Real *  pa)
{
 *ru  = 8.31446261815324e+07; 
 *ruc = 1.98721558317399615845; 
 *pa  = 1.01325e+06; 
}

// compute Cv/R at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void cv_R(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+3.21859896e+00
-4.63988124e-03 * tc[1]
+1.10443049e-05 * tc[2]
-9.34055507e-09 * tc[3]
+2.80554874e-12 * tc[4];
// species 1: N2O
species[1] =
+1.25715020e+00
+1.13047280e-02 * tc[1]
-1.36713190e-05 * tc[2]
+9.68198030e-09 * tc[3]
-2.93071820e-12 * tc[4];
// species 2: O2
species[2] =
+2.78245636e+00
-2.99673416e-03 * tc[1]
+9.84730201e-06 * tc[2]
-9.68129509e-09 * tc[3]
+3.24372837e-12 * tc[4];
// species 3: H2
species[3] =
+1.34433112e+00
+7.98052075e-03 * tc[1]
-1.94781510e-05 * tc[2]
+2.01572094e-08 * tc[3]
-7.37611761e-12 * tc[4];
// species 4: AR
species[4] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 5: H
species[5] =
+1.50000000e+00
+7.05332819e-13 * tc[1]
-1.99591964e-15 * tc[2]
+2.30081632e-18 * tc[3]
-9.27732332e-22 * tc[4];
// species 6: O
species[6] =
+2.16826710e+00
-3.27931884e-03 * tc[1]
+6.64306396e-06 * tc[2]
-6.12806624e-09 * tc[3]
+2.11265971e-12 * tc[4];
// species 7: OH
species[7] =
+3.12530561e+00
-3.22544939e-03 * tc[1]
+6.52764691e-06 * tc[2]
-5.79853643e-09 * tc[3]
+2.06237379e-12 * tc[4];
// species 8: HO2
species[8] =
+3.30179801e+00
-4.74912051e-03 * tc[1]
+2.11582891e-05 * tc[2]
-2.42763894e-08 * tc[3]
+9.29225124e-12 * tc[4];
// species 9: H2O
species[9] =
+3.19864056e+00
-2.03643410e-03 * tc[1]
+6.52040211e-06 * tc[2]
-5.48797062e-09 * tc[3]
+1.77197817e-12 * tc[4];
// species 10: H2O2
species[10] =
+3.27611269e+00
-5.42822417e-04 * tc[1]
+1.67335701e-05 * tc[2]
-2.15770813e-08 * tc[3]
+8.62454363e-12 * tc[4];
// species 11: NO2
species[11] =
+2.94403120e+00
-1.58542900e-03 * tc[1]
+1.66578120e-05 * tc[2]
-2.04754260e-08 * tc[3]
+7.83505640e-12 * tc[4];
// species 12: NH3
species[12] =
+3.30177808e+00
-4.77127330e-03 * tc[1]
+2.19341619e-05 * tc[2]
-2.29856489e-08 * tc[3]
+8.28992268e-12 * tc[4];
// species 13: HNO
species[13] =
+3.53524750e+00
-5.68539720e-03 * tc[1]
+1.85198500e-05 * tc[2]
-1.71882730e-08 * tc[3]
+5.55832070e-12 * tc[4];
// species 14: N
species[14] =
+1.50307100e+00
-2.18001800e-05 * tc[1]
+5.42052900e-08 * tc[2]
-5.64756000e-11 * tc[3]
+2.09990400e-14 * tc[4];
// species 15: N2H
species[15] =
+3.34469270e+00
-4.84970720e-03 * tc[1]
+2.00594590e-05 * tc[2]
-2.17264640e-08 * tc[3]
+7.94695380e-12 * tc[4];
// species 16: NH2
species[16] =
+3.20556010e+00
-2.13552820e-03 * tc[1]
+7.26820210e-06 * tc[2]
-5.93027990e-09 * tc[3]
+1.80672180e-12 * tc[4];
// species 17: NH
species[17] =
+2.49290840e+00
+3.11791970e-04 * tc[1]
-1.48904840e-06 * tc[2]
+2.48164420e-09 * tc[3]
-1.03569670e-12 * tc[4];
// species 18: N2
species[18] =
+2.29867700e+00
+1.40824040e-03 * tc[1]
-3.96322200e-06 * tc[2]
+5.64151500e-09 * tc[3]
-2.44485400e-12 * tc[4];
// species 20: HE
species[20] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
} else {
// species 0: NO
species[0] =
+2.26071234e+00
+1.19101135e-03 * tc[1]
-4.29122646e-07 * tc[2]
+6.94481463e-11 * tc[3]
-4.03295681e-15 * tc[4];
// species 1: N2O
species[1] =
+3.82307290e+00
+2.62702510e-03 * tc[1]
-9.58508720e-07 * tc[2]
+1.60007120e-10 * tc[3]
-9.77523020e-15 * tc[4];
// species 2: O2
species[2] =
+2.28253784e+00
+1.48308754e-03 * tc[1]
-7.57966669e-07 * tc[2]
+2.09470555e-10 * tc[3]
-2.16717794e-14 * tc[4];
// species 3: H2
species[3] =
+2.33727920e+00
-4.94024731e-05 * tc[1]
+4.99456778e-07 * tc[2]
-1.79566394e-10 * tc[3]
+2.00255376e-14 * tc[4];
// species 4: AR
species[4] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 5: H
species[5] =
+1.50000001e+00
-2.30842973e-11 * tc[1]
+1.61561948e-14 * tc[2]
-4.73515235e-18 * tc[3]
+4.98197357e-22 * tc[4];
// species 6: O
species[6] =
+1.56942078e+00
-8.59741137e-05 * tc[1]
+4.19484589e-08 * tc[2]
-1.00177799e-11 * tc[3]
+1.22833691e-15 * tc[4];
// species 7: OH
species[7] =
+1.86472886e+00
+1.05650448e-03 * tc[1]
-2.59082758e-07 * tc[2]
+3.05218674e-11 * tc[3]
-1.33195876e-15 * tc[4];
// species 8: HO2
species[8] =
+3.01721090e+00
+2.23982013e-03 * tc[1]
-6.33658150e-07 * tc[2]
+1.14246370e-10 * tc[3]
-1.07908535e-14 * tc[4];
// species 9: H2O
species[9] =
+2.03399249e+00
+2.17691804e-03 * tc[1]
-1.64072518e-07 * tc[2]
-9.70419870e-11 * tc[3]
+1.68200992e-14 * tc[4];
// species 10: H2O2
species[10] =
+3.16500285e+00
+4.90831694e-03 * tc[1]
-1.90139225e-06 * tc[2]
+3.71185986e-10 * tc[3]
-2.87908305e-14 * tc[4];
// species 11: NO2
species[11] =
+3.88475400e+00
+2.17239550e-03 * tc[1]
-8.28069090e-07 * tc[2]
+1.57475100e-10 * tc[3]
-1.05108950e-14 * tc[4];
// species 12: NH3
species[12] =
+1.71709692e+00
+5.56856338e-03 * tc[1]
-1.76886396e-06 * tc[2]
+2.67417260e-10 * tc[3]
-1.52731419e-14 * tc[4];
// species 13: HNO
species[13] =
+2.16552290e+00
+3.00008620e-03 * tc[1]
-3.94366190e-07 * tc[2]
-3.85758150e-11 * tc[3]
+7.08071890e-15 * tc[4];
// species 14: N
species[14] =
+1.45026800e+00
+1.06614580e-04 * tc[1]
-7.46533700e-08 * tc[2]
+1.87965200e-11 * tc[3]
-1.02598390e-15 * tc[4];
// species 15: N2H
species[15] =
+2.76675450e+00
+2.89150810e-03 * tc[1]
-1.04166200e-06 * tc[2]
+1.68425940e-10 * tc[3]
-1.00918960e-14 * tc[4];
// species 16: NH2
species[16] =
+1.84766110e+00
+3.14284530e-03 * tc[1]
-8.98665570e-07 * tc[2]
+1.30323570e-10 * tc[3]
-7.48853560e-15 * tc[4];
// species 17: NH
species[17] =
+1.78369290e+00
+1.32984290e-03 * tc[1]
-4.24780470e-07 * tc[2]
+7.83485040e-11 * tc[3]
-5.50444700e-15 * tc[4];
// species 18: N2
species[18] =
+1.92664000e+00
+1.48797680e-03 * tc[1]
-5.68476000e-07 * tc[2]
+1.00970380e-10 * tc[3]
-6.75335100e-15 * tc[4];
// species 20: HE
species[20] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 19: H2NO
species[19] =
+1.53059000e+00
+8.59603500e-03 * tc[1]
-5.47103000e-06 * tc[2]
+2.27624900e-09 * tc[3]
-4.64807300e-13 * tc[4];
} else {
// species 19: H2NO
species[19] =
+4.67334600e+00
+2.29883700e-03 * tc[1]
-1.77444600e-07 * tc[2]
-1.10348200e-10 * tc[3]
+1.85976200e-14 * tc[4];
}
return;
}

// compute Cp/R at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void cp_R(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+4.21859896e+00
-4.63988124e-03 * tc[1]
+1.10443049e-05 * tc[2]
-9.34055507e-09 * tc[3]
+2.80554874e-12 * tc[4];
// species 1: N2O
species[1] =
+2.25715020e+00
+1.13047280e-02 * tc[1]
-1.36713190e-05 * tc[2]
+9.68198030e-09 * tc[3]
-2.93071820e-12 * tc[4];
// species 2: O2
species[2] =
+3.78245636e+00
-2.99673416e-03 * tc[1]
+9.84730201e-06 * tc[2]
-9.68129509e-09 * tc[3]
+3.24372837e-12 * tc[4];
// species 3: H2
species[3] =
+2.34433112e+00
+7.98052075e-03 * tc[1]
-1.94781510e-05 * tc[2]
+2.01572094e-08 * tc[3]
-7.37611761e-12 * tc[4];
// species 4: AR
species[4] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 5: H
species[5] =
+2.50000000e+00
+7.05332819e-13 * tc[1]
-1.99591964e-15 * tc[2]
+2.30081632e-18 * tc[3]
-9.27732332e-22 * tc[4];
// species 6: O
species[6] =
+3.16826710e+00
-3.27931884e-03 * tc[1]
+6.64306396e-06 * tc[2]
-6.12806624e-09 * tc[3]
+2.11265971e-12 * tc[4];
// species 7: OH
species[7] =
+4.12530561e+00
-3.22544939e-03 * tc[1]
+6.52764691e-06 * tc[2]
-5.79853643e-09 * tc[3]
+2.06237379e-12 * tc[4];
// species 8: HO2
species[8] =
+4.30179801e+00
-4.74912051e-03 * tc[1]
+2.11582891e-05 * tc[2]
-2.42763894e-08 * tc[3]
+9.29225124e-12 * tc[4];
// species 9: H2O
species[9] =
+4.19864056e+00
-2.03643410e-03 * tc[1]
+6.52040211e-06 * tc[2]
-5.48797062e-09 * tc[3]
+1.77197817e-12 * tc[4];
// species 10: H2O2
species[10] =
+4.27611269e+00
-5.42822417e-04 * tc[1]
+1.67335701e-05 * tc[2]
-2.15770813e-08 * tc[3]
+8.62454363e-12 * tc[4];
// species 11: NO2
species[11] =
+3.94403120e+00
-1.58542900e-03 * tc[1]
+1.66578120e-05 * tc[2]
-2.04754260e-08 * tc[3]
+7.83505640e-12 * tc[4];
// species 12: NH3
species[12] =
+4.30177808e+00
-4.77127330e-03 * tc[1]
+2.19341619e-05 * tc[2]
-2.29856489e-08 * tc[3]
+8.28992268e-12 * tc[4];
// species 13: HNO
species[13] =
+4.53524750e+00
-5.68539720e-03 * tc[1]
+1.85198500e-05 * tc[2]
-1.71882730e-08 * tc[3]
+5.55832070e-12 * tc[4];
// species 14: N
species[14] =
+2.50307100e+00
-2.18001800e-05 * tc[1]
+5.42052900e-08 * tc[2]
-5.64756000e-11 * tc[3]
+2.09990400e-14 * tc[4];
// species 15: N2H
species[15] =
+4.34469270e+00
-4.84970720e-03 * tc[1]
+2.00594590e-05 * tc[2]
-2.17264640e-08 * tc[3]
+7.94695380e-12 * tc[4];
// species 16: NH2
species[16] =
+4.20556010e+00
-2.13552820e-03 * tc[1]
+7.26820210e-06 * tc[2]
-5.93027990e-09 * tc[3]
+1.80672180e-12 * tc[4];
// species 17: NH
species[17] =
+3.49290840e+00
+3.11791970e-04 * tc[1]
-1.48904840e-06 * tc[2]
+2.48164420e-09 * tc[3]
-1.03569670e-12 * tc[4];
// species 18: N2
species[18] =
+3.29867700e+00
+1.40824040e-03 * tc[1]
-3.96322200e-06 * tc[2]
+5.64151500e-09 * tc[3]
-2.44485400e-12 * tc[4];
// species 20: HE
species[20] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
} else {
// species 0: NO
species[0] =
+3.26071234e+00
+1.19101135e-03 * tc[1]
-4.29122646e-07 * tc[2]
+6.94481463e-11 * tc[3]
-4.03295681e-15 * tc[4];
// species 1: N2O
species[1] =
+4.82307290e+00
+2.62702510e-03 * tc[1]
-9.58508720e-07 * tc[2]
+1.60007120e-10 * tc[3]
-9.77523020e-15 * tc[4];
// species 2: O2
species[2] =
+3.28253784e+00
+1.48308754e-03 * tc[1]
-7.57966669e-07 * tc[2]
+2.09470555e-10 * tc[3]
-2.16717794e-14 * tc[4];
// species 3: H2
species[3] =
+3.33727920e+00
-4.94024731e-05 * tc[1]
+4.99456778e-07 * tc[2]
-1.79566394e-10 * tc[3]
+2.00255376e-14 * tc[4];
// species 4: AR
species[4] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
// species 5: H
species[5] =
+2.50000001e+00
-2.30842973e-11 * tc[1]
+1.61561948e-14 * tc[2]
-4.73515235e-18 * tc[3]
+4.98197357e-22 * tc[4];
// species 6: O
species[6] =
+2.56942078e+00
-8.59741137e-05 * tc[1]
+4.19484589e-08 * tc[2]
-1.00177799e-11 * tc[3]
+1.22833691e-15 * tc[4];
// species 7: OH
species[7] =
+2.86472886e+00
+1.05650448e-03 * tc[1]
-2.59082758e-07 * tc[2]
+3.05218674e-11 * tc[3]
-1.33195876e-15 * tc[4];
// species 8: HO2
species[8] =
+4.01721090e+00
+2.23982013e-03 * tc[1]
-6.33658150e-07 * tc[2]
+1.14246370e-10 * tc[3]
-1.07908535e-14 * tc[4];
// species 9: H2O
species[9] =
+3.03399249e+00
+2.17691804e-03 * tc[1]
-1.64072518e-07 * tc[2]
-9.70419870e-11 * tc[3]
+1.68200992e-14 * tc[4];
// species 10: H2O2
species[10] =
+4.16500285e+00
+4.90831694e-03 * tc[1]
-1.90139225e-06 * tc[2]
+3.71185986e-10 * tc[3]
-2.87908305e-14 * tc[4];
// species 11: NO2
species[11] =
+4.88475400e+00
+2.17239550e-03 * tc[1]
-8.28069090e-07 * tc[2]
+1.57475100e-10 * tc[3]
-1.05108950e-14 * tc[4];
// species 12: NH3
species[12] =
+2.71709692e+00
+5.56856338e-03 * tc[1]
-1.76886396e-06 * tc[2]
+2.67417260e-10 * tc[3]
-1.52731419e-14 * tc[4];
// species 13: HNO
species[13] =
+3.16552290e+00
+3.00008620e-03 * tc[1]
-3.94366190e-07 * tc[2]
-3.85758150e-11 * tc[3]
+7.08071890e-15 * tc[4];
// species 14: N
species[14] =
+2.45026800e+00
+1.06614580e-04 * tc[1]
-7.46533700e-08 * tc[2]
+1.87965200e-11 * tc[3]
-1.02598390e-15 * tc[4];
// species 15: N2H
species[15] =
+3.76675450e+00
+2.89150810e-03 * tc[1]
-1.04166200e-06 * tc[2]
+1.68425940e-10 * tc[3]
-1.00918960e-14 * tc[4];
// species 16: NH2
species[16] =
+2.84766110e+00
+3.14284530e-03 * tc[1]
-8.98665570e-07 * tc[2]
+1.30323570e-10 * tc[3]
-7.48853560e-15 * tc[4];
// species 17: NH
species[17] =
+2.78369290e+00
+1.32984290e-03 * tc[1]
-4.24780470e-07 * tc[2]
+7.83485040e-11 * tc[3]
-5.50444700e-15 * tc[4];
// species 18: N2
species[18] =
+2.92664000e+00
+1.48797680e-03 * tc[1]
-5.68476000e-07 * tc[2]
+1.00970380e-10 * tc[3]
-6.75335100e-15 * tc[4];
// species 20: HE
species[20] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4];
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 19: H2NO
species[19] =
+2.53059000e+00
+8.59603500e-03 * tc[1]
-5.47103000e-06 * tc[2]
+2.27624900e-09 * tc[3]
-4.64807300e-13 * tc[4];
} else {
// species 19: H2NO
species[19] =
+5.67334600e+00
+2.29883700e-03 * tc[1]
-1.77444600e-07 * tc[2]
-1.10348200e-10 * tc[3]
+1.85976200e-14 * tc[4];
}
return;
}

// compute the g/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void gibbs(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];
const amrex::Real invT = 1 / T;

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+9.845099640000000e+03 * invT
+1.937988949999999e+00
-4.218598960000000e+00 * tc[0]
+2.319940620000000e-03 * tc[1]
-1.840717483333334e-06 * tc[2]
+7.783795891666667e-10 * tc[3]
-1.402774370000000e-13 * tc[4];
// species 1: N2O
species[1] =
+8.741774600000001e+03 * invT
-8.500841800000000e+00
-2.257150200000000e+00 * tc[0]
-5.652364000000000e-03 * tc[1]
+2.278553166666666e-06 * tc[2]
-8.068316916666668e-10 * tc[3]
+1.465359100000000e-13 * tc[4];
// species 2: O2
species[2] =
-1.063943560000000e+03 * invT
+1.247806300000001e-01
-3.782456360000000e+00 * tc[0]
+1.498367080000000e-03 * tc[1]
-1.641217001666667e-06 * tc[2]
+8.067745908333334e-10 * tc[3]
-1.621864185000000e-13 * tc[4];
// species 3: H2
species[3] =
-9.179351730000000e+02 * invT
+1.661320882000000e+00
-2.344331120000000e+00 * tc[0]
-3.990260375000000e-03 * tc[1]
+3.246358500000000e-06 * tc[2]
-1.679767450000000e-09 * tc[3]
+3.688058805000000e-13 * tc[4];
// species 4: AR
species[4] =
-7.453750000000000e+02 * invT
-1.866000000000000e+00
-2.500000000000000e+00 * tc[0]
-0.000000000000000e+00 * tc[1]
-0.000000000000000e+00 * tc[2]
-0.000000000000000e+00 * tc[3]
-0.000000000000000e+00 * tc[4];
// species 5: H
species[5] =
+2.547365990000000e+04 * invT
+2.946682853000000e+00
-2.500000000000000e+00 * tc[0]
-3.526664095000000e-13 * tc[1]
+3.326532733333333e-16 * tc[2]
-1.917346933333333e-19 * tc[3]
+4.638661660000000e-23 * tc[4];
// species 6: O
species[6] =
+2.912225920000000e+04 * invT
+1.116333640000000e+00
-3.168267100000000e+00 * tc[0]
+1.639659420000000e-03 * tc[1]
-1.107177326666667e-06 * tc[2]
+5.106721866666666e-10 * tc[3]
-1.056329855000000e-13 * tc[4];
// species 7: OH
species[7] =
+3.381538120000000e+03 * invT
+4.815738570000000e+00
-4.125305610000000e+00 * tc[0]
+1.612724695000000e-03 * tc[1]
-1.087941151666667e-06 * tc[2]
+4.832113691666666e-10 * tc[3]
-1.031186895000000e-13 * tc[4];
// species 8: HO2
species[8] =
+2.948080400000000e+02 * invT
+5.851355599999999e-01
-4.301798010000000e+00 * tc[0]
+2.374560255000000e-03 * tc[1]
-3.526381516666666e-06 * tc[2]
+2.023032450000000e-09 * tc[3]
-4.646125620000001e-13 * tc[4];
// species 9: H2O
species[9] =
-3.029372670000000e+04 * invT
+5.047672768000000e+00
-4.198640560000000e+00 * tc[0]
+1.018217050000000e-03 * tc[1]
-1.086733685000000e-06 * tc[2]
+4.573308850000000e-10 * tc[3]
-8.859890850000000e-14 * tc[4];
// species 10: H2O2
species[10] =
-1.770258210000000e+04 * invT
+8.410619499999998e-01
-4.276112690000000e+00 * tc[0]
+2.714112085000000e-04 * tc[1]
-2.788928350000000e-06 * tc[2]
+1.798090108333333e-09 * tc[3]
-4.312271815000000e-13 * tc[4];
// species 11: NO2
species[11] =
+2.896618000000000e+03 * invT
-2.367960700000000e+00
-3.944031200000000e+00 * tc[0]
+7.927145000000000e-04 * tc[1]
-2.776302000000000e-06 * tc[2]
+1.706285500000000e-09 * tc[3]
-3.917528200000000e-13 * tc[4];
// species 12: NH3
species[12] =
-6.748063940000000e+03 * invT
+4.992422473000000e+00
-4.301778080000000e+00 * tc[0]
+2.385636650000000e-03 * tc[1]
-3.655693650000000e-06 * tc[2]
+1.915470741666667e-09 * tc[3]
-4.144961340000000e-13 * tc[4];
// species 13: HNO
species[13] =
+1.103988100000000e+04 * invT
+2.792055599999999e+00
-4.535247500000000e+00 * tc[0]
+2.842698600000000e-03 * tc[1]
-3.086641666666667e-06 * tc[2]
+1.432356083333333e-09 * tc[3]
-2.779160350000000e-13 * tc[4];
// species 14: N
species[14] =
+5.609890000000000e+04 * invT
-1.664495000000000e+00
-2.503071000000000e+00 * tc[0]
+1.090009000000000e-05 * tc[1]
-9.034215000000001e-09 * tc[2]
+4.706300000000000e-12 * tc[3]
-1.049952000000000e-15 * tc[4];
// species 15: N2H
species[15] =
+2.879197300000000e+04 * invT
+1.366751600000001e+00
-4.344692700000000e+00 * tc[0]
+2.424853600000000e-03 * tc[1]
-3.343243166666667e-06 * tc[2]
+1.810538666666667e-09 * tc[3]
-3.973476900000000e-13 * tc[4];
// species 16: NH2
species[16] =
+2.153522300000000e+04 * invT
+4.352192410000000e+00
-4.205560100000000e+00 * tc[0]
+1.067764100000000e-03 * tc[1]
-1.211367016666667e-06 * tc[2]
+4.941899916666667e-10 * tc[3]
-9.033609000000001e-14 * tc[4];
// species 17: NH
species[17] =
+4.189429400000000e+04 * invT
+1.644580700000000e+00
-3.492908400000000e+00 * tc[0]
-1.558959850000000e-04 * tc[1]
+2.481747333333333e-07 * tc[2]
-2.068036833333333e-10 * tc[3]
+5.178483500000000e-14 * tc[4];
// species 18: N2
species[18] =
-1.020899900000000e+03 * invT
-6.516950000000001e-01
-3.298677000000000e+00 * tc[0]
-7.041202000000000e-04 * tc[1]
+6.605369999999999e-07 * tc[2]
-4.701262500000001e-10 * tc[3]
+1.222427000000000e-13 * tc[4];
// species 20: HE
species[20] =
-7.453750000000000e+02 * invT
+1.571276026000000e+00
-2.500000000000000e+00 * tc[0]
-0.000000000000000e+00 * tc[1]
-0.000000000000000e+00 * tc[2]
-0.000000000000000e+00 * tc[3]
-0.000000000000000e+00 * tc[4];
} else {
// species 0: NO
species[0] =
+9.921431320000000e+03 * invT
-3.108292840000000e+00
-3.260712340000000e+00 * tc[0]
-5.955056750000000e-04 * tc[1]
+7.152044099999999e-08 * tc[2]
-5.787345524999999e-12 * tc[3]
+2.016478405000000e-16 * tc[4];
// species 1: N2O
species[1] =
+8.073404700000000e+03 * invT
+7.024793700000000e+00
-4.823072900000000e+00 * tc[0]
-1.313512550000000e-03 * tc[1]
+1.597514533333333e-07 * tc[2]
-1.333392666666667e-11 * tc[3]
+4.887615100000000e-16 * tc[4];
// species 2: O2
species[2] =
-1.088457720000000e+03 * invT
-2.170693450000000e+00
-3.282537840000000e+00 * tc[0]
-7.415437700000000e-04 * tc[1]
+1.263277781666667e-07 * tc[2]
-1.745587958333333e-11 * tc[3]
+1.083588970000000e-15 * tc[4];
// species 3: H2
species[3] =
-9.501589220000000e+02 * invT
+6.542302510000000e+00
-3.337279200000000e+00 * tc[0]
+2.470123655000000e-05 * tc[1]
-8.324279633333333e-08 * tc[2]
+1.496386616666667e-11 * tc[3]
-1.001276880000000e-15 * tc[4];
// species 4: AR
species[4] =
-7.453750000000000e+02 * invT
-1.866000000000000e+00
-2.500000000000000e+00 * tc[0]
-0.000000000000000e+00 * tc[1]
-0.000000000000000e+00 * tc[2]
-0.000000000000000e+00 * tc[3]
-0.000000000000000e+00 * tc[4];
// species 5: H
species[5] =
+2.547365990000000e+04 * invT
+2.946682924000000e+00
-2.500000010000000e+00 * tc[0]
+1.154214865000000e-11 * tc[1]
-2.692699133333334e-15 * tc[2]
+3.945960291666667e-19 * tc[3]
-2.490986785000000e-23 * tc[4];
// species 6: O
species[6] =
+2.921757910000000e+04 * invT
-2.214917859999999e+00
-2.569420780000000e+00 * tc[0]
+4.298705685000000e-05 * tc[1]
-6.991409816666667e-09 * tc[2]
+8.348149916666666e-13 * tc[3]
-6.141684549999999e-17 * tc[4];
// species 7: OH
species[7] =
+3.718857740000000e+03 * invT
-2.836911870000000e+00
-2.864728860000000e+00 * tc[0]
-5.282522400000000e-04 * tc[1]
+4.318045966666667e-08 * tc[2]
-2.543488950000000e-12 * tc[3]
+6.659793800000000e-17 * tc[4];
// species 8: HO2
species[8] =
+1.118567130000000e+02 * invT
+2.321087500000001e-01
-4.017210900000000e+00 * tc[0]
-1.119910065000000e-03 * tc[1]
+1.056096916666667e-07 * tc[2]
-9.520530833333334e-12 * tc[3]
+5.395426750000000e-16 * tc[4];
// species 9: H2O
species[9] =
-3.000429710000000e+04 * invT
-1.932777610000000e+00
-3.033992490000000e+00 * tc[0]
-1.088459020000000e-03 * tc[1]
+2.734541966666666e-08 * tc[2]
+8.086832250000000e-12 * tc[3]
-8.410049600000000e-16 * tc[4];
// species 10: H2O2
species[10] =
-1.786178770000000e+04 * invT
+1.248846229999999e+00
-4.165002850000000e+00 * tc[0]
-2.454158470000000e-03 * tc[1]
+3.168987083333333e-07 * tc[2]
-3.093216550000000e-11 * tc[3]
+1.439541525000000e-15 * tc[4];
// species 11: NO2
species[11] =
+2.316498200000000e+03 * invT
+5.002170950000000e+00
-4.884754000000000e+00 * tc[0]
-1.086197750000000e-03 * tc[1]
+1.380115150000000e-07 * tc[2]
-1.312292500000000e-11 * tc[3]
+5.255447500000000e-16 * tc[4];
// species 12: NH3
species[12] =
-6.584519890000000e+03 * invT
-3.375801450000000e+00
-2.717096920000000e+00 * tc[0]
-2.784281690000000e-03 * tc[1]
+2.948106600000000e-07 * tc[2]
-2.228477166666666e-11 * tc[3]
+7.636570950000000e-16 * tc[4];
// species 13: HNO
species[13] =
+1.119442600000000e+04 * invT
-4.482260400000000e+00
-3.165522900000000e+00 * tc[0]
-1.500043100000000e-03 * tc[1]
+6.572769833333333e-08 * tc[2]
+3.214651250000000e-12 * tc[3]
-3.540359450000000e-16 * tc[4];
// species 14: N
species[14] =
+5.611604000000000e+04 * invT
-1.998490000000000e+00
-2.450268000000000e+00 * tc[0]
-5.330729000000000e-05 * tc[1]
+1.244222833333333e-08 * tc[2]
-1.566376666666667e-12 * tc[3]
+5.129919500000000e-17 * tc[4];
// species 15: N2H
species[15] =
+2.865069700000000e+04 * invT
-7.037523000000001e-01
-3.766754500000000e+00 * tc[0]
-1.445754050000000e-03 * tc[1]
+1.736103333333333e-07 * tc[2]
-1.403549500000000e-11 * tc[3]
+5.045948000000000e-16 * tc[4];
// species 16: NH2
species[16] =
+2.182391600000000e+04 * invT
-3.624152200000000e+00
-2.847661100000000e+00 * tc[0]
-1.571422650000000e-03 * tc[1]
+1.497775950000000e-07 * tc[2]
-1.086029750000000e-11 * tc[3]
+3.744267800000000e-16 * tc[4];
// species 17: NH
species[17] =
+4.213451400000000e+04 * invT
-2.957086900000000e+00
-2.783692900000000e+00 * tc[0]
-6.649214500000000e-04 * tc[1]
+7.079674500000000e-08 * tc[2]
-6.529041999999999e-12 * tc[3]
+2.752223500000000e-16 * tc[4];
// species 18: N2
species[18] =
-9.227977000000000e+02 * invT
-3.053888000000000e+00
-2.926640000000000e+00 * tc[0]
-7.439884000000000e-04 * tc[1]
+9.474600000000001e-08 * tc[2]
-8.414198333333333e-12 * tc[3]
+3.376675500000000e-16 * tc[4];
// species 20: HE
species[20] =
-7.453750000000000e+02 * invT
+1.571276026000000e+00
-2.500000000000000e+00 * tc[0]
-0.000000000000000e+00 * tc[1]
-0.000000000000000e+00 * tc[2]
-0.000000000000000e+00 * tc[3]
-0.000000000000000e+00 * tc[4];
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 19: H2NO
species[19] =
+6.868030000000000e+03 * invT
-8.735920000000000e+00
-2.530590000000000e+00 * tc[0]
-4.298017500000000e-03 * tc[1]
+9.118383333333333e-07 * tc[2]
-1.896874166666667e-10 * tc[3]
+2.324036500000000e-14 * tc[4];
} else {
// species 19: H2NO
species[19] =
+5.569325000000000e+03 * invT
+1.182688600000000e+01
-5.673346000000000e+00 * tc[0]
-1.149418500000000e-03 * tc[1]
+2.957410000000000e-08 * tc[2]
+9.195683333333332e-12 * tc[3]
-9.298810000000001e-16 * tc[4];
}
return;
}

// compute the a/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void helmholtz(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];
const amrex::Real invT = 1 / T;

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+9.84509964e+03 * invT
+9.37988950e-01
-4.21859896e+00 * tc[0]
+2.31994062e-03 * tc[1]
-1.84071748e-06 * tc[2]
+7.78379589e-10 * tc[3]
-1.40277437e-13 * tc[4];
// species 1: N2O
species[1] =
+8.74177460e+03 * invT
-9.50084180e+00
-2.25715020e+00 * tc[0]
-5.65236400e-03 * tc[1]
+2.27855317e-06 * tc[2]
-8.06831692e-10 * tc[3]
+1.46535910e-13 * tc[4];
// species 2: O2
species[2] =
-1.06394356e+03 * invT
-8.75219370e-01
-3.78245636e+00 * tc[0]
+1.49836708e-03 * tc[1]
-1.64121700e-06 * tc[2]
+8.06774591e-10 * tc[3]
-1.62186418e-13 * tc[4];
// species 3: H2
species[3] =
-9.17935173e+02 * invT
+6.61320882e-01
-2.34433112e+00 * tc[0]
-3.99026037e-03 * tc[1]
+3.24635850e-06 * tc[2]
-1.67976745e-09 * tc[3]
+3.68805881e-13 * tc[4];
// species 4: AR
species[4] =
-7.45375000e+02 * invT
-2.86600000e+00
-2.50000000e+00 * tc[0]
-0.00000000e+00 * tc[1]
-0.00000000e+00 * tc[2]
-0.00000000e+00 * tc[3]
-0.00000000e+00 * tc[4];
// species 5: H
species[5] =
+2.54736599e+04 * invT
+1.94668285e+00
-2.50000000e+00 * tc[0]
-3.52666409e-13 * tc[1]
+3.32653273e-16 * tc[2]
-1.91734693e-19 * tc[3]
+4.63866166e-23 * tc[4];
// species 6: O
species[6] =
+2.91222592e+04 * invT
+1.16333640e-01
-3.16826710e+00 * tc[0]
+1.63965942e-03 * tc[1]
-1.10717733e-06 * tc[2]
+5.10672187e-10 * tc[3]
-1.05632985e-13 * tc[4];
// species 7: OH
species[7] =
+3.38153812e+03 * invT
+3.81573857e+00
-4.12530561e+00 * tc[0]
+1.61272470e-03 * tc[1]
-1.08794115e-06 * tc[2]
+4.83211369e-10 * tc[3]
-1.03118689e-13 * tc[4];
// species 8: HO2
species[8] =
+2.94808040e+02 * invT
-4.14864440e-01
-4.30179801e+00 * tc[0]
+2.37456025e-03 * tc[1]
-3.52638152e-06 * tc[2]
+2.02303245e-09 * tc[3]
-4.64612562e-13 * tc[4];
// species 9: H2O
species[9] =
-3.02937267e+04 * invT
+4.04767277e+00
-4.19864056e+00 * tc[0]
+1.01821705e-03 * tc[1]
-1.08673369e-06 * tc[2]
+4.57330885e-10 * tc[3]
-8.85989085e-14 * tc[4];
// species 10: H2O2
species[10] =
-1.77025821e+04 * invT
-1.58938050e-01
-4.27611269e+00 * tc[0]
+2.71411208e-04 * tc[1]
-2.78892835e-06 * tc[2]
+1.79809011e-09 * tc[3]
-4.31227182e-13 * tc[4];
// species 11: NO2
species[11] =
+2.89661800e+03 * invT
-3.36796070e+00
-3.94403120e+00 * tc[0]
+7.92714500e-04 * tc[1]
-2.77630200e-06 * tc[2]
+1.70628550e-09 * tc[3]
-3.91752820e-13 * tc[4];
// species 12: NH3
species[12] =
-6.74806394e+03 * invT
+3.99242247e+00
-4.30177808e+00 * tc[0]
+2.38563665e-03 * tc[1]
-3.65569365e-06 * tc[2]
+1.91547074e-09 * tc[3]
-4.14496134e-13 * tc[4];
// species 13: HNO
species[13] =
+1.10398810e+04 * invT
+1.79205560e+00
-4.53524750e+00 * tc[0]
+2.84269860e-03 * tc[1]
-3.08664167e-06 * tc[2]
+1.43235608e-09 * tc[3]
-2.77916035e-13 * tc[4];
// species 14: N
species[14] =
+5.60989000e+04 * invT
-2.66449500e+00
-2.50307100e+00 * tc[0]
+1.09000900e-05 * tc[1]
-9.03421500e-09 * tc[2]
+4.70630000e-12 * tc[3]
-1.04995200e-15 * tc[4];
// species 15: N2H
species[15] =
+2.87919730e+04 * invT
+3.66751600e-01
-4.34469270e+00 * tc[0]
+2.42485360e-03 * tc[1]
-3.34324317e-06 * tc[2]
+1.81053867e-09 * tc[3]
-3.97347690e-13 * tc[4];
// species 16: NH2
species[16] =
+2.15352230e+04 * invT
+3.35219241e+00
-4.20556010e+00 * tc[0]
+1.06776410e-03 * tc[1]
-1.21136702e-06 * tc[2]
+4.94189992e-10 * tc[3]
-9.03360900e-14 * tc[4];
// species 17: NH
species[17] =
+4.18942940e+04 * invT
+6.44580700e-01
-3.49290840e+00 * tc[0]
-1.55895985e-04 * tc[1]
+2.48174733e-07 * tc[2]
-2.06803683e-10 * tc[3]
+5.17848350e-14 * tc[4];
// species 18: N2
species[18] =
-1.02089990e+03 * invT
-1.65169500e+00
-3.29867700e+00 * tc[0]
-7.04120200e-04 * tc[1]
+6.60537000e-07 * tc[2]
-4.70126250e-10 * tc[3]
+1.22242700e-13 * tc[4];
// species 20: HE
species[20] =
-7.45375000e+02 * invT
+5.71276026e-01
-2.50000000e+00 * tc[0]
-0.00000000e+00 * tc[1]
-0.00000000e+00 * tc[2]
-0.00000000e+00 * tc[3]
-0.00000000e+00 * tc[4];
} else {
// species 0: NO
species[0] =
+9.92143132e+03 * invT
-4.10829284e+00
-3.26071234e+00 * tc[0]
-5.95505675e-04 * tc[1]
+7.15204410e-08 * tc[2]
-5.78734552e-12 * tc[3]
+2.01647840e-16 * tc[4];
// species 1: N2O
species[1] =
+8.07340470e+03 * invT
+6.02479370e+00
-4.82307290e+00 * tc[0]
-1.31351255e-03 * tc[1]
+1.59751453e-07 * tc[2]
-1.33339267e-11 * tc[3]
+4.88761510e-16 * tc[4];
// species 2: O2
species[2] =
-1.08845772e+03 * invT
-3.17069345e+00
-3.28253784e+00 * tc[0]
-7.41543770e-04 * tc[1]
+1.26327778e-07 * tc[2]
-1.74558796e-11 * tc[3]
+1.08358897e-15 * tc[4];
// species 3: H2
species[3] =
-9.50158922e+02 * invT
+5.54230251e+00
-3.33727920e+00 * tc[0]
+2.47012365e-05 * tc[1]
-8.32427963e-08 * tc[2]
+1.49638662e-11 * tc[3]
-1.00127688e-15 * tc[4];
// species 4: AR
species[4] =
-7.45375000e+02 * invT
-2.86600000e+00
-2.50000000e+00 * tc[0]
-0.00000000e+00 * tc[1]
-0.00000000e+00 * tc[2]
-0.00000000e+00 * tc[3]
-0.00000000e+00 * tc[4];
// species 5: H
species[5] =
+2.54736599e+04 * invT
+1.94668292e+00
-2.50000001e+00 * tc[0]
+1.15421486e-11 * tc[1]
-2.69269913e-15 * tc[2]
+3.94596029e-19 * tc[3]
-2.49098679e-23 * tc[4];
// species 6: O
species[6] =
+2.92175791e+04 * invT
-3.21491786e+00
-2.56942078e+00 * tc[0]
+4.29870569e-05 * tc[1]
-6.99140982e-09 * tc[2]
+8.34814992e-13 * tc[3]
-6.14168455e-17 * tc[4];
// species 7: OH
species[7] =
+3.71885774e+03 * invT
-3.83691187e+00
-2.86472886e+00 * tc[0]
-5.28252240e-04 * tc[1]
+4.31804597e-08 * tc[2]
-2.54348895e-12 * tc[3]
+6.65979380e-17 * tc[4];
// species 8: HO2
species[8] =
+1.11856713e+02 * invT
-7.67891250e-01
-4.01721090e+00 * tc[0]
-1.11991006e-03 * tc[1]
+1.05609692e-07 * tc[2]
-9.52053083e-12 * tc[3]
+5.39542675e-16 * tc[4];
// species 9: H2O
species[9] =
-3.00042971e+04 * invT
-2.93277761e+00
-3.03399249e+00 * tc[0]
-1.08845902e-03 * tc[1]
+2.73454197e-08 * tc[2]
+8.08683225e-12 * tc[3]
-8.41004960e-16 * tc[4];
// species 10: H2O2
species[10] =
-1.78617877e+04 * invT
+2.48846230e-01
-4.16500285e+00 * tc[0]
-2.45415847e-03 * tc[1]
+3.16898708e-07 * tc[2]
-3.09321655e-11 * tc[3]
+1.43954153e-15 * tc[4];
// species 11: NO2
species[11] =
+2.31649820e+03 * invT
+4.00217095e+00
-4.88475400e+00 * tc[0]
-1.08619775e-03 * tc[1]
+1.38011515e-07 * tc[2]
-1.31229250e-11 * tc[3]
+5.25544750e-16 * tc[4];
// species 12: NH3
species[12] =
-6.58451989e+03 * invT
-4.37580145e+00
-2.71709692e+00 * tc[0]
-2.78428169e-03 * tc[1]
+2.94810660e-07 * tc[2]
-2.22847717e-11 * tc[3]
+7.63657095e-16 * tc[4];
// species 13: HNO
species[13] =
+1.11944260e+04 * invT
-5.48226040e+00
-3.16552290e+00 * tc[0]
-1.50004310e-03 * tc[1]
+6.57276983e-08 * tc[2]
+3.21465125e-12 * tc[3]
-3.54035945e-16 * tc[4];
// species 14: N
species[14] =
+5.61160400e+04 * invT
-2.99849000e+00
-2.45026800e+00 * tc[0]
-5.33072900e-05 * tc[1]
+1.24422283e-08 * tc[2]
-1.56637667e-12 * tc[3]
+5.12991950e-17 * tc[4];
// species 15: N2H
species[15] =
+2.86506970e+04 * invT
-1.70375230e+00
-3.76675450e+00 * tc[0]
-1.44575405e-03 * tc[1]
+1.73610333e-07 * tc[2]
-1.40354950e-11 * tc[3]
+5.04594800e-16 * tc[4];
// species 16: NH2
species[16] =
+2.18239160e+04 * invT
-4.62415220e+00
-2.84766110e+00 * tc[0]
-1.57142265e-03 * tc[1]
+1.49777595e-07 * tc[2]
-1.08602975e-11 * tc[3]
+3.74426780e-16 * tc[4];
// species 17: NH
species[17] =
+4.21345140e+04 * invT
-3.95708690e+00
-2.78369290e+00 * tc[0]
-6.64921450e-04 * tc[1]
+7.07967450e-08 * tc[2]
-6.52904200e-12 * tc[3]
+2.75222350e-16 * tc[4];
// species 18: N2
species[18] =
-9.22797700e+02 * invT
-4.05388800e+00
-2.92664000e+00 * tc[0]
-7.43988400e-04 * tc[1]
+9.47460000e-08 * tc[2]
-8.41419833e-12 * tc[3]
+3.37667550e-16 * tc[4];
// species 20: HE
species[20] =
-7.45375000e+02 * invT
+5.71276026e-01
-2.50000000e+00 * tc[0]
-0.00000000e+00 * tc[1]
-0.00000000e+00 * tc[2]
-0.00000000e+00 * tc[3]
-0.00000000e+00 * tc[4];
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 19: H2NO
species[19] =
+6.86803000e+03 * invT
-9.73592000e+00
-2.53059000e+00 * tc[0]
-4.29801750e-03 * tc[1]
+9.11838333e-07 * tc[2]
-1.89687417e-10 * tc[3]
+2.32403650e-14 * tc[4];
} else {
// species 19: H2NO
species[19] =
+5.56932500e+03 * invT
+1.08268860e+01
-5.67334600e+00 * tc[0]
-1.14941850e-03 * tc[1]
+2.95741000e-08 * tc[2]
+9.19568333e-12 * tc[3]
-9.29881000e-16 * tc[4];
}
return;
}

// compute the e/(RT) at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void speciesInternalEnergy(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];
const amrex::Real invT = 1 / T;

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+3.21859896e+00
-2.31994062e-03 * tc[1]
+3.68143497e-06 * tc[2]
-2.33513877e-09 * tc[3]
+5.61109748e-13 * tc[4]
+9.84509964e+03 * invT;
// species 1: N2O
species[1] =
+1.25715020e+00
+5.65236400e-03 * tc[1]
-4.55710633e-06 * tc[2]
+2.42049508e-09 * tc[3]
-5.86143640e-13 * tc[4]
+8.74177460e+03 * invT;
// species 2: O2
species[2] =
+2.78245636e+00
-1.49836708e-03 * tc[1]
+3.28243400e-06 * tc[2]
-2.42032377e-09 * tc[3]
+6.48745674e-13 * tc[4]
-1.06394356e+03 * invT;
// species 3: H2
species[3] =
+1.34433112e+00
+3.99026037e-03 * tc[1]
-6.49271700e-06 * tc[2]
+5.03930235e-09 * tc[3]
-1.47522352e-12 * tc[4]
-9.17935173e+02 * invT;
// species 4: AR
species[4] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
// species 5: H
species[5] =
+1.50000000e+00
+3.52666409e-13 * tc[1]
-6.65306547e-16 * tc[2]
+5.75204080e-19 * tc[3]
-1.85546466e-22 * tc[4]
+2.54736599e+04 * invT;
// species 6: O
species[6] =
+2.16826710e+00
-1.63965942e-03 * tc[1]
+2.21435465e-06 * tc[2]
-1.53201656e-09 * tc[3]
+4.22531942e-13 * tc[4]
+2.91222592e+04 * invT;
// species 7: OH
species[7] =
+3.12530561e+00
-1.61272470e-03 * tc[1]
+2.17588230e-06 * tc[2]
-1.44963411e-09 * tc[3]
+4.12474758e-13 * tc[4]
+3.38153812e+03 * invT;
// species 8: HO2
species[8] =
+3.30179801e+00
-2.37456025e-03 * tc[1]
+7.05276303e-06 * tc[2]
-6.06909735e-09 * tc[3]
+1.85845025e-12 * tc[4]
+2.94808040e+02 * invT;
// species 9: H2O
species[9] =
+3.19864056e+00
-1.01821705e-03 * tc[1]
+2.17346737e-06 * tc[2]
-1.37199266e-09 * tc[3]
+3.54395634e-13 * tc[4]
-3.02937267e+04 * invT;
// species 10: H2O2
species[10] =
+3.27611269e+00
-2.71411208e-04 * tc[1]
+5.57785670e-06 * tc[2]
-5.39427032e-09 * tc[3]
+1.72490873e-12 * tc[4]
-1.77025821e+04 * invT;
// species 11: NO2
species[11] =
+2.94403120e+00
-7.92714500e-04 * tc[1]
+5.55260400e-06 * tc[2]
-5.11885650e-09 * tc[3]
+1.56701128e-12 * tc[4]
+2.89661800e+03 * invT;
// species 12: NH3
species[12] =
+3.30177808e+00
-2.38563665e-03 * tc[1]
+7.31138730e-06 * tc[2]
-5.74641223e-09 * tc[3]
+1.65798454e-12 * tc[4]
-6.74806394e+03 * invT;
// species 13: HNO
species[13] =
+3.53524750e+00
-2.84269860e-03 * tc[1]
+6.17328333e-06 * tc[2]
-4.29706825e-09 * tc[3]
+1.11166414e-12 * tc[4]
+1.10398810e+04 * invT;
// species 14: N
species[14] =
+1.50307100e+00
-1.09000900e-05 * tc[1]
+1.80684300e-08 * tc[2]
-1.41189000e-11 * tc[3]
+4.19980800e-15 * tc[4]
+5.60989000e+04 * invT;
// species 15: N2H
species[15] =
+3.34469270e+00
-2.42485360e-03 * tc[1]
+6.68648633e-06 * tc[2]
-5.43161600e-09 * tc[3]
+1.58939076e-12 * tc[4]
+2.87919730e+04 * invT;
// species 16: NH2
species[16] =
+3.20556010e+00
-1.06776410e-03 * tc[1]
+2.42273403e-06 * tc[2]
-1.48256997e-09 * tc[3]
+3.61344360e-13 * tc[4]
+2.15352230e+04 * invT;
// species 17: NH
species[17] =
+2.49290840e+00
+1.55895985e-04 * tc[1]
-4.96349467e-07 * tc[2]
+6.20411050e-10 * tc[3]
-2.07139340e-13 * tc[4]
+4.18942940e+04 * invT;
// species 18: N2
species[18] =
+2.29867700e+00
+7.04120200e-04 * tc[1]
-1.32107400e-06 * tc[2]
+1.41037875e-09 * tc[3]
-4.88970800e-13 * tc[4]
-1.02089990e+03 * invT;
// species 20: HE
species[20] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
} else {
// species 0: NO
species[0] =
+2.26071234e+00
+5.95505675e-04 * tc[1]
-1.43040882e-07 * tc[2]
+1.73620366e-11 * tc[3]
-8.06591362e-16 * tc[4]
+9.92143132e+03 * invT;
// species 1: N2O
species[1] =
+3.82307290e+00
+1.31351255e-03 * tc[1]
-3.19502907e-07 * tc[2]
+4.00017800e-11 * tc[3]
-1.95504604e-15 * tc[4]
+8.07340470e+03 * invT;
// species 2: O2
species[2] =
+2.28253784e+00
+7.41543770e-04 * tc[1]
-2.52655556e-07 * tc[2]
+5.23676387e-11 * tc[3]
-4.33435588e-15 * tc[4]
-1.08845772e+03 * invT;
// species 3: H2
species[3] =
+2.33727920e+00
-2.47012365e-05 * tc[1]
+1.66485593e-07 * tc[2]
-4.48915985e-11 * tc[3]
+4.00510752e-15 * tc[4]
-9.50158922e+02 * invT;
// species 4: AR
species[4] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
// species 5: H
species[5] =
+1.50000001e+00
-1.15421486e-11 * tc[1]
+5.38539827e-15 * tc[2]
-1.18378809e-18 * tc[3]
+9.96394714e-23 * tc[4]
+2.54736599e+04 * invT;
// species 6: O
species[6] =
+1.56942078e+00
-4.29870569e-05 * tc[1]
+1.39828196e-08 * tc[2]
-2.50444497e-12 * tc[3]
+2.45667382e-16 * tc[4]
+2.92175791e+04 * invT;
// species 7: OH
species[7] =
+1.86472886e+00
+5.28252240e-04 * tc[1]
-8.63609193e-08 * tc[2]
+7.63046685e-12 * tc[3]
-2.66391752e-16 * tc[4]
+3.71885774e+03 * invT;
// species 8: HO2
species[8] =
+3.01721090e+00
+1.11991006e-03 * tc[1]
-2.11219383e-07 * tc[2]
+2.85615925e-11 * tc[3]
-2.15817070e-15 * tc[4]
+1.11856713e+02 * invT;
// species 9: H2O
species[9] =
+2.03399249e+00
+1.08845902e-03 * tc[1]
-5.46908393e-08 * tc[2]
-2.42604967e-11 * tc[3]
+3.36401984e-15 * tc[4]
-3.00042971e+04 * invT;
// species 10: H2O2
species[10] =
+3.16500285e+00
+2.45415847e-03 * tc[1]
-6.33797417e-07 * tc[2]
+9.27964965e-11 * tc[3]
-5.75816610e-15 * tc[4]
-1.78617877e+04 * invT;
// species 11: NO2
species[11] =
+3.88475400e+00
+1.08619775e-03 * tc[1]
-2.76023030e-07 * tc[2]
+3.93687750e-11 * tc[3]
-2.10217900e-15 * tc[4]
+2.31649820e+03 * invT;
// species 12: NH3
species[12] =
+1.71709692e+00
+2.78428169e-03 * tc[1]
-5.89621320e-07 * tc[2]
+6.68543150e-11 * tc[3]
-3.05462838e-15 * tc[4]
-6.58451989e+03 * invT;
// species 13: HNO
species[13] =
+2.16552290e+00
+1.50004310e-03 * tc[1]
-1.31455397e-07 * tc[2]
-9.64395375e-12 * tc[3]
+1.41614378e-15 * tc[4]
+1.11944260e+04 * invT;
// species 14: N
species[14] =
+1.45026800e+00
+5.33072900e-05 * tc[1]
-2.48844567e-08 * tc[2]
+4.69913000e-12 * tc[3]
-2.05196780e-16 * tc[4]
+5.61160400e+04 * invT;
// species 15: N2H
species[15] =
+2.76675450e+00
+1.44575405e-03 * tc[1]
-3.47220667e-07 * tc[2]
+4.21064850e-11 * tc[3]
-2.01837920e-15 * tc[4]
+2.86506970e+04 * invT;
// species 16: NH2
species[16] =
+1.84766110e+00
+1.57142265e-03 * tc[1]
-2.99555190e-07 * tc[2]
+3.25808925e-11 * tc[3]
-1.49770712e-15 * tc[4]
+2.18239160e+04 * invT;
// species 17: NH
species[17] =
+1.78369290e+00
+6.64921450e-04 * tc[1]
-1.41593490e-07 * tc[2]
+1.95871260e-11 * tc[3]
-1.10088940e-15 * tc[4]
+4.21345140e+04 * invT;
// species 18: N2
species[18] =
+1.92664000e+00
+7.43988400e-04 * tc[1]
-1.89492000e-07 * tc[2]
+2.52425950e-11 * tc[3]
-1.35067020e-15 * tc[4]
-9.22797700e+02 * invT;
// species 20: HE
species[20] =
+1.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 19: H2NO
species[19] =
+1.53059000e+00
+4.29801750e-03 * tc[1]
-1.82367667e-06 * tc[2]
+5.69062250e-10 * tc[3]
-9.29614600e-14 * tc[4]
+6.86803000e+03 * invT;
} else {
// species 19: H2NO
species[19] =
+4.67334600e+00
+1.14941850e-03 * tc[1]
-5.91482000e-08 * tc[2]
-2.75870500e-11 * tc[3]
+3.71952400e-15 * tc[4]
+5.56932500e+03 * invT;
}
return;
}

// compute the h/(RT) at the given temperature (Eq 20)
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void speciesEnthalpy(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];
const amrex::Real invT = 1 / T;

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+4.21859896e+00
-2.31994062e-03 * tc[1]
+3.68143497e-06 * tc[2]
-2.33513877e-09 * tc[3]
+5.61109748e-13 * tc[4]
+9.84509964e+03 * invT;
// species 1: N2O
species[1] =
+2.25715020e+00
+5.65236400e-03 * tc[1]
-4.55710633e-06 * tc[2]
+2.42049508e-09 * tc[3]
-5.86143640e-13 * tc[4]
+8.74177460e+03 * invT;
// species 2: O2
species[2] =
+3.78245636e+00
-1.49836708e-03 * tc[1]
+3.28243400e-06 * tc[2]
-2.42032377e-09 * tc[3]
+6.48745674e-13 * tc[4]
-1.06394356e+03 * invT;
// species 3: H2
species[3] =
+2.34433112e+00
+3.99026037e-03 * tc[1]
-6.49271700e-06 * tc[2]
+5.03930235e-09 * tc[3]
-1.47522352e-12 * tc[4]
-9.17935173e+02 * invT;
// species 4: AR
species[4] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
// species 5: H
species[5] =
+2.50000000e+00
+3.52666409e-13 * tc[1]
-6.65306547e-16 * tc[2]
+5.75204080e-19 * tc[3]
-1.85546466e-22 * tc[4]
+2.54736599e+04 * invT;
// species 6: O
species[6] =
+3.16826710e+00
-1.63965942e-03 * tc[1]
+2.21435465e-06 * tc[2]
-1.53201656e-09 * tc[3]
+4.22531942e-13 * tc[4]
+2.91222592e+04 * invT;
// species 7: OH
species[7] =
+4.12530561e+00
-1.61272470e-03 * tc[1]
+2.17588230e-06 * tc[2]
-1.44963411e-09 * tc[3]
+4.12474758e-13 * tc[4]
+3.38153812e+03 * invT;
// species 8: HO2
species[8] =
+4.30179801e+00
-2.37456025e-03 * tc[1]
+7.05276303e-06 * tc[2]
-6.06909735e-09 * tc[3]
+1.85845025e-12 * tc[4]
+2.94808040e+02 * invT;
// species 9: H2O
species[9] =
+4.19864056e+00
-1.01821705e-03 * tc[1]
+2.17346737e-06 * tc[2]
-1.37199266e-09 * tc[3]
+3.54395634e-13 * tc[4]
-3.02937267e+04 * invT;
// species 10: H2O2
species[10] =
+4.27611269e+00
-2.71411208e-04 * tc[1]
+5.57785670e-06 * tc[2]
-5.39427032e-09 * tc[3]
+1.72490873e-12 * tc[4]
-1.77025821e+04 * invT;
// species 11: NO2
species[11] =
+3.94403120e+00
-7.92714500e-04 * tc[1]
+5.55260400e-06 * tc[2]
-5.11885650e-09 * tc[3]
+1.56701128e-12 * tc[4]
+2.89661800e+03 * invT;
// species 12: NH3
species[12] =
+4.30177808e+00
-2.38563665e-03 * tc[1]
+7.31138730e-06 * tc[2]
-5.74641223e-09 * tc[3]
+1.65798454e-12 * tc[4]
-6.74806394e+03 * invT;
// species 13: HNO
species[13] =
+4.53524750e+00
-2.84269860e-03 * tc[1]
+6.17328333e-06 * tc[2]
-4.29706825e-09 * tc[3]
+1.11166414e-12 * tc[4]
+1.10398810e+04 * invT;
// species 14: N
species[14] =
+2.50307100e+00
-1.09000900e-05 * tc[1]
+1.80684300e-08 * tc[2]
-1.41189000e-11 * tc[3]
+4.19980800e-15 * tc[4]
+5.60989000e+04 * invT;
// species 15: N2H
species[15] =
+4.34469270e+00
-2.42485360e-03 * tc[1]
+6.68648633e-06 * tc[2]
-5.43161600e-09 * tc[3]
+1.58939076e-12 * tc[4]
+2.87919730e+04 * invT;
// species 16: NH2
species[16] =
+4.20556010e+00
-1.06776410e-03 * tc[1]
+2.42273403e-06 * tc[2]
-1.48256997e-09 * tc[3]
+3.61344360e-13 * tc[4]
+2.15352230e+04 * invT;
// species 17: NH
species[17] =
+3.49290840e+00
+1.55895985e-04 * tc[1]
-4.96349467e-07 * tc[2]
+6.20411050e-10 * tc[3]
-2.07139340e-13 * tc[4]
+4.18942940e+04 * invT;
// species 18: N2
species[18] =
+3.29867700e+00
+7.04120200e-04 * tc[1]
-1.32107400e-06 * tc[2]
+1.41037875e-09 * tc[3]
-4.88970800e-13 * tc[4]
-1.02089990e+03 * invT;
// species 20: HE
species[20] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
} else {
// species 0: NO
species[0] =
+3.26071234e+00
+5.95505675e-04 * tc[1]
-1.43040882e-07 * tc[2]
+1.73620366e-11 * tc[3]
-8.06591362e-16 * tc[4]
+9.92143132e+03 * invT;
// species 1: N2O
species[1] =
+4.82307290e+00
+1.31351255e-03 * tc[1]
-3.19502907e-07 * tc[2]
+4.00017800e-11 * tc[3]
-1.95504604e-15 * tc[4]
+8.07340470e+03 * invT;
// species 2: O2
species[2] =
+3.28253784e+00
+7.41543770e-04 * tc[1]
-2.52655556e-07 * tc[2]
+5.23676387e-11 * tc[3]
-4.33435588e-15 * tc[4]
-1.08845772e+03 * invT;
// species 3: H2
species[3] =
+3.33727920e+00
-2.47012365e-05 * tc[1]
+1.66485593e-07 * tc[2]
-4.48915985e-11 * tc[3]
+4.00510752e-15 * tc[4]
-9.50158922e+02 * invT;
// species 4: AR
species[4] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
// species 5: H
species[5] =
+2.50000001e+00
-1.15421486e-11 * tc[1]
+5.38539827e-15 * tc[2]
-1.18378809e-18 * tc[3]
+9.96394714e-23 * tc[4]
+2.54736599e+04 * invT;
// species 6: O
species[6] =
+2.56942078e+00
-4.29870569e-05 * tc[1]
+1.39828196e-08 * tc[2]
-2.50444497e-12 * tc[3]
+2.45667382e-16 * tc[4]
+2.92175791e+04 * invT;
// species 7: OH
species[7] =
+2.86472886e+00
+5.28252240e-04 * tc[1]
-8.63609193e-08 * tc[2]
+7.63046685e-12 * tc[3]
-2.66391752e-16 * tc[4]
+3.71885774e+03 * invT;
// species 8: HO2
species[8] =
+4.01721090e+00
+1.11991006e-03 * tc[1]
-2.11219383e-07 * tc[2]
+2.85615925e-11 * tc[3]
-2.15817070e-15 * tc[4]
+1.11856713e+02 * invT;
// species 9: H2O
species[9] =
+3.03399249e+00
+1.08845902e-03 * tc[1]
-5.46908393e-08 * tc[2]
-2.42604967e-11 * tc[3]
+3.36401984e-15 * tc[4]
-3.00042971e+04 * invT;
// species 10: H2O2
species[10] =
+4.16500285e+00
+2.45415847e-03 * tc[1]
-6.33797417e-07 * tc[2]
+9.27964965e-11 * tc[3]
-5.75816610e-15 * tc[4]
-1.78617877e+04 * invT;
// species 11: NO2
species[11] =
+4.88475400e+00
+1.08619775e-03 * tc[1]
-2.76023030e-07 * tc[2]
+3.93687750e-11 * tc[3]
-2.10217900e-15 * tc[4]
+2.31649820e+03 * invT;
// species 12: NH3
species[12] =
+2.71709692e+00
+2.78428169e-03 * tc[1]
-5.89621320e-07 * tc[2]
+6.68543150e-11 * tc[3]
-3.05462838e-15 * tc[4]
-6.58451989e+03 * invT;
// species 13: HNO
species[13] =
+3.16552290e+00
+1.50004310e-03 * tc[1]
-1.31455397e-07 * tc[2]
-9.64395375e-12 * tc[3]
+1.41614378e-15 * tc[4]
+1.11944260e+04 * invT;
// species 14: N
species[14] =
+2.45026800e+00
+5.33072900e-05 * tc[1]
-2.48844567e-08 * tc[2]
+4.69913000e-12 * tc[3]
-2.05196780e-16 * tc[4]
+5.61160400e+04 * invT;
// species 15: N2H
species[15] =
+3.76675450e+00
+1.44575405e-03 * tc[1]
-3.47220667e-07 * tc[2]
+4.21064850e-11 * tc[3]
-2.01837920e-15 * tc[4]
+2.86506970e+04 * invT;
// species 16: NH2
species[16] =
+2.84766110e+00
+1.57142265e-03 * tc[1]
-2.99555190e-07 * tc[2]
+3.25808925e-11 * tc[3]
-1.49770712e-15 * tc[4]
+2.18239160e+04 * invT;
// species 17: NH
species[17] =
+2.78369290e+00
+6.64921450e-04 * tc[1]
-1.41593490e-07 * tc[2]
+1.95871260e-11 * tc[3]
-1.10088940e-15 * tc[4]
+4.21345140e+04 * invT;
// species 18: N2
species[18] =
+2.92664000e+00
+7.43988400e-04 * tc[1]
-1.89492000e-07 * tc[2]
+2.52425950e-11 * tc[3]
-1.35067020e-15 * tc[4]
-9.22797700e+02 * invT;
// species 20: HE
species[20] =
+2.50000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
-7.45375000e+02 * invT;
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 19: H2NO
species[19] =
+2.53059000e+00
+4.29801750e-03 * tc[1]
-1.82367667e-06 * tc[2]
+5.69062250e-10 * tc[3]
-9.29614600e-14 * tc[4]
+6.86803000e+03 * invT;
} else {
// species 19: H2NO
species[19] =
+5.67334600e+00
+1.14941850e-03 * tc[1]
-5.91482000e-08 * tc[2]
-2.75870500e-11 * tc[3]
+3.71952400e-15 * tc[4]
+5.56932500e+03 * invT;
}
return;
}

// compute the S/R at the given temperature (Eq 21)
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void speciesEntropy(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
+4.21859896e+00 * tc[0]
-4.63988124e-03 * tc[1]
+5.52215245e-06 * tc[2]
-3.11351836e-09 * tc[3]
+7.01387185e-13 * tc[4]
+2.28061001e+00 ;
// species 1: N2O
species[1] =
+2.25715020e+00 * tc[0]
+1.13047280e-02 * tc[1]
-6.83565950e-06 * tc[2]
+3.22732677e-09 * tc[3]
-7.32679550e-13 * tc[4]
+1.07579920e+01 ;
// species 2: O2
species[2] =
+3.78245636e+00 * tc[0]
-2.99673416e-03 * tc[1]
+4.92365101e-06 * tc[2]
-3.22709836e-09 * tc[3]
+8.10932092e-13 * tc[4]
+3.65767573e+00 ;
// species 3: H2
species[3] =
+2.34433112e+00 * tc[0]
+7.98052075e-03 * tc[1]
-9.73907550e-06 * tc[2]
+6.71906980e-09 * tc[3]
-1.84402940e-12 * tc[4]
+6.83010238e-01 ;
// species 4: AR
species[4] =
+2.50000000e+00 * tc[0]
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
+4.36600000e+00 ;
// species 5: H
species[5] =
+2.50000000e+00 * tc[0]
+7.05332819e-13 * tc[1]
-9.97959820e-16 * tc[2]
+7.66938773e-19 * tc[3]
-2.31933083e-22 * tc[4]
-4.46682853e-01 ;
// species 6: O
species[6] =
+3.16826710e+00 * tc[0]
-3.27931884e-03 * tc[1]
+3.32153198e-06 * tc[2]
-2.04268875e-09 * tc[3]
+5.28164927e-13 * tc[4]
+2.05193346e+00 ;
// species 7: OH
species[7] =
+4.12530561e+00 * tc[0]
-3.22544939e-03 * tc[1]
+3.26382346e-06 * tc[2]
-1.93284548e-09 * tc[3]
+5.15593447e-13 * tc[4]
-6.90432960e-01 ;
// species 8: HO2
species[8] =
+4.30179801e+00 * tc[0]
-4.74912051e-03 * tc[1]
+1.05791445e-05 * tc[2]
-8.09212980e-09 * tc[3]
+2.32306281e-12 * tc[4]
+3.71666245e+00 ;
// species 9: H2O
species[9] =
+4.19864056e+00 * tc[0]
-2.03643410e-03 * tc[1]
+3.26020105e-06 * tc[2]
-1.82932354e-09 * tc[3]
+4.42994543e-13 * tc[4]
-8.49032208e-01 ;
// species 10: H2O2
species[10] =
+4.27611269e+00 * tc[0]
-5.42822417e-04 * tc[1]
+8.36678505e-06 * tc[2]
-7.19236043e-09 * tc[3]
+2.15613591e-12 * tc[4]
+3.43505074e+00 ;
// species 11: NO2
species[11] =
+3.94403120e+00 * tc[0]
-1.58542900e-03 * tc[1]
+8.32890600e-06 * tc[2]
-6.82514200e-09 * tc[3]
+1.95876410e-12 * tc[4]
+6.31199190e+00 ;
// species 12: NH3
species[12] =
+4.30177808e+00 * tc[0]
-4.77127330e-03 * tc[1]
+1.09670809e-05 * tc[2]
-7.66188297e-09 * tc[3]
+2.07248067e-12 * tc[4]
-6.90644393e-01 ;
// species 13: HNO
species[13] =
+4.53524750e+00 * tc[0]
-5.68539720e-03 * tc[1]
+9.25992500e-06 * tc[2]
-5.72942433e-09 * tc[3]
+1.38958017e-12 * tc[4]
+1.74319190e+00 ;
// species 14: N
species[14] =
+2.50307100e+00 * tc[0]
-2.18001800e-05 * tc[1]
+2.71026450e-08 * tc[2]
-1.88252000e-11 * tc[3]
+5.24976000e-15 * tc[4]
+4.16756600e+00 ;
// species 15: N2H
species[15] =
+4.34469270e+00 * tc[0]
-4.84970720e-03 * tc[1]
+1.00297295e-05 * tc[2]
-7.24215467e-09 * tc[3]
+1.98673845e-12 * tc[4]
+2.97794110e+00 ;
// species 16: NH2
species[16] =
+4.20556010e+00 * tc[0]
-2.13552820e-03 * tc[1]
+3.63410105e-06 * tc[2]
-1.97675997e-09 * tc[3]
+4.51680450e-13 * tc[4]
-1.46632310e-01 ;
// species 17: NH
species[17] =
+3.49290840e+00 * tc[0]
+3.11791970e-04 * tc[1]
-7.44524200e-07 * tc[2]
+8.27214733e-10 * tc[3]
-2.58924175e-13 * tc[4]
+1.84832770e+00 ;
// species 18: N2
species[18] =
+3.29867700e+00 * tc[0]
+1.40824040e-03 * tc[1]
-1.98161100e-06 * tc[2]
+1.88050500e-09 * tc[3]
-6.11213500e-13 * tc[4]
+3.95037200e+00 ;
// species 20: HE
species[20] =
+2.50000000e+00 * tc[0]
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
+9.28723974e-01 ;
} else {
// species 0: NO
species[0] =
+3.26071234e+00 * tc[0]
+1.19101135e-03 * tc[1]
-2.14561323e-07 * tc[2]
+2.31493821e-11 * tc[3]
-1.00823920e-15 * tc[4]
+6.36900518e+00 ;
// species 1: N2O
species[1] =
+4.82307290e+00 * tc[0]
+2.62702510e-03 * tc[1]
-4.79254360e-07 * tc[2]
+5.33357067e-11 * tc[3]
-2.44380755e-15 * tc[4]
-2.20172080e+00 ;
// species 2: O2
species[2] =
+3.28253784e+00 * tc[0]
+1.48308754e-03 * tc[1]
-3.78983334e-07 * tc[2]
+6.98235183e-11 * tc[3]
-5.41794485e-15 * tc[4]
+5.45323129e+00 ;
// species 3: H2
species[3] =
+3.33727920e+00 * tc[0]
-4.94024731e-05 * tc[1]
+2.49728389e-07 * tc[2]
-5.98554647e-11 * tc[3]
+5.00638440e-15 * tc[4]
-3.20502331e+00 ;
// species 4: AR
species[4] =
+2.50000000e+00 * tc[0]
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
+4.36600000e+00 ;
// species 5: H
species[5] =
+2.50000001e+00 * tc[0]
-2.30842973e-11 * tc[1]
+8.07809740e-15 * tc[2]
-1.57838412e-18 * tc[3]
+1.24549339e-22 * tc[4]
-4.46682914e-01 ;
// species 6: O
species[6] =
+2.56942078e+00 * tc[0]
-8.59741137e-05 * tc[1]
+2.09742295e-08 * tc[2]
-3.33925997e-12 * tc[3]
+3.07084227e-16 * tc[4]
+4.78433864e+00 ;
// species 7: OH
species[7] =
+2.86472886e+00 * tc[0]
+1.05650448e-03 * tc[1]
-1.29541379e-07 * tc[2]
+1.01739558e-11 * tc[3]
-3.32989690e-16 * tc[4]
+5.70164073e+00 ;
// species 8: HO2
species[8] =
+4.01721090e+00 * tc[0]
+2.23982013e-03 * tc[1]
-3.16829075e-07 * tc[2]
+3.80821233e-11 * tc[3]
-2.69771337e-15 * tc[4]
+3.78510215e+00 ;
// species 9: H2O
species[9] =
+3.03399249e+00 * tc[0]
+2.17691804e-03 * tc[1]
-8.20362590e-08 * tc[2]
-3.23473290e-11 * tc[3]
+4.20502480e-15 * tc[4]
+4.96677010e+00 ;
// species 10: H2O2
species[10] =
+4.16500285e+00 * tc[0]
+4.90831694e-03 * tc[1]
-9.50696125e-07 * tc[2]
+1.23728662e-10 * tc[3]
-7.19770763e-15 * tc[4]
+2.91615662e+00 ;
// species 11: NO2
species[11] =
+4.88475400e+00 * tc[0]
+2.17239550e-03 * tc[1]
-4.14034545e-07 * tc[2]
+5.24917000e-11 * tc[3]
-2.62772375e-15 * tc[4]
-1.17416950e-01 ;
// species 12: NH3
species[12] =
+2.71709692e+00 * tc[0]
+5.56856338e-03 * tc[1]
-8.84431980e-07 * tc[2]
+8.91390867e-11 * tc[3]
-3.81828547e-15 * tc[4]
+6.09289837e+00 ;
// species 13: HNO
species[13] =
+3.16552290e+00 * tc[0]
+3.00008620e-03 * tc[1]
-1.97183095e-07 * tc[2]
-1.28586050e-11 * tc[3]
+1.77017972e-15 * tc[4]
+7.64778330e+00 ;
// species 14: N
species[14] =
+2.45026800e+00 * tc[0]
+1.06614580e-04 * tc[1]
-3.73266850e-08 * tc[2]
+6.26550667e-12 * tc[3]
-2.56495975e-16 * tc[4]
+4.44875800e+00 ;
// species 15: N2H
species[15] =
+3.76675450e+00 * tc[0]
+2.89150810e-03 * tc[1]
-5.20831000e-07 * tc[2]
+5.61419800e-11 * tc[3]
-2.52297400e-15 * tc[4]
+4.47050680e+00 ;
// species 16: NH2
species[16] =
+2.84766110e+00 * tc[0]
+3.14284530e-03 * tc[1]
-4.49332785e-07 * tc[2]
+4.34411900e-11 * tc[3]
-1.87213390e-15 * tc[4]
+6.47181330e+00 ;
// species 17: NH
species[17] =
+2.78369290e+00 * tc[0]
+1.32984290e-03 * tc[1]
-2.12390235e-07 * tc[2]
+2.61161680e-11 * tc[3]
-1.37611175e-15 * tc[4]
+5.74077980e+00 ;
// species 18: N2
species[18] =
+2.92664000e+00 * tc[0]
+1.48797680e-03 * tc[1]
-2.84238000e-07 * tc[2]
+3.36567933e-11 * tc[3]
-1.68833775e-15 * tc[4]
+5.98052800e+00 ;
// species 20: HE
species[20] =
+2.50000000e+00 * tc[0]
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3]
+0.00000000e+00 * tc[4]
+9.28723974e-01 ;
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 19: H2NO
species[19] =
+2.53059000e+00 * tc[0]
+8.59603500e-03 * tc[1]
-2.73551500e-06 * tc[2]
+7.58749667e-10 * tc[3]
-1.16201825e-13 * tc[4]
+1.12665100e+01 ;
} else {
// species 19: H2NO
species[19] =
+5.67334600e+00 * tc[0]
+2.29883700e-03 * tc[1]
-8.87223000e-08 * tc[2]
-3.67827333e-11 * tc[3]
+4.64940500e-15 * tc[4]
-6.15354000e+00 ;
}
return;
}

// Returns the mean specific heat at CP (Eq. 33)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCPBL(amrex::Real *  T, amrex::Real *  x,  amrex::Real *  cpbl)
{
int id; // loop counter
amrex::Real result = 0; 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real cpor[21]; //  temporary storage
cp_R(cpor, tc);

// perform dot product
for (id = 0; id < 21; ++id) {
result += x[id]*cpor[id];
}

*cpbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CP (Eq. 34)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCPBS(amrex::Real *  T, amrex::Real *  y,  amrex::Real *  cpbs)
{
amrex::Real result = 0; 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real cpor[21], tresult[21]; //  temporary storage
amrex::Real imw[21];

get_imw(imw);

cp_R(cpor, tc);

for (int i = 0; i < 21; i++)
{
tresult[i] = cpor[i]*y[i]*imw[i];

}
for (int i = 0; i < 21; i++)
{
result += tresult[i];
}

*cpbs = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 35)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCVBL(amrex::Real *  T, amrex::Real *  x,  amrex::Real *  cvbl)
{
int id; // loop counter
amrex::Real result = 0; 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real cvor[21]; //  temporary storage
cv_R(cvor, tc);

// perform dot product
for (id = 0; id < 21; ++id) {
result += x[id]*cvor[id];
}

*cvbl = result * 8.31446261815324e+07;
}

// Returns the mean specific heat at CV (Eq. 36)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCVBS(amrex::Real *  T, amrex::Real *  y,  amrex::Real *  cvbs)
{
amrex::Real result = 0; 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real cvor[21]; //  temporary storage
amrex::Real imw[21];

get_imw(imw);

cv_R(cvor, tc);

// multiply by y/molecularweight
result += cvor[0]*y[0]*imw[0]; // NO
result += cvor[1]*y[1]*imw[1]; // N2O
result += cvor[2]*y[2]*imw[2]; // O2
result += cvor[3]*y[3]*imw[3]; // H2
result += cvor[4]*y[4]*imw[4]; // AR
result += cvor[5]*y[5]*imw[5]; // H
result += cvor[6]*y[6]*imw[6]; // O
result += cvor[7]*y[7]*imw[7]; // OH
result += cvor[8]*y[8]*imw[8]; // HO2
result += cvor[9]*y[9]*imw[9]; // H2O
result += cvor[10]*y[10]*imw[10]; // H2O2
result += cvor[11]*y[11]*imw[11]; // NO2
result += cvor[12]*y[12]*imw[12]; // NH3
result += cvor[13]*y[13]*imw[13]; // HNO
result += cvor[14]*y[14]*imw[14]; // N
result += cvor[15]*y[15]*imw[15]; // N2H
result += cvor[16]*y[16]*imw[16]; // NH2
result += cvor[17]*y[17]*imw[17]; // NH
result += cvor[18]*y[18]*imw[18]; // N2
result += cvor[19]*y[19]*imw[19]; // H2NO
result += cvor[20]*y[20]*imw[20]; // HE

*cvbs = result * 8.31446261815324e+07;
}

// Returns the mean enthalpy of the mixture in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKHBML(amrex::Real *  T, amrex::Real *  x,  amrex::Real *  hbml)
{
int id; // loop counter
amrex::Real result = 0; 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real hml[21]; //  temporary storage
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
speciesEnthalpy(hml, tc);

// perform dot product
for (id = 0; id < 21; ++id) {
result += x[id]*hml[id];
}

*hbml = result * RT;
}

// Returns mean enthalpy of mixture in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKHBMS(amrex::Real *  T, amrex::Real *  y,  amrex::Real *  hbms)
{
amrex::Real result = 0;
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real hml[21], tmp[21]; //  temporary storage
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
amrex::Real imw[21];

get_imw(imw);

speciesEnthalpy(hml, tc);

int id;
for (id = 0; id < 21; ++id) {
tmp[id] = y[id]*hml[id]*imw[id];
}
for (id = 0; id < 21; ++id) {
result += tmp[id];
}

*hbms = result * RT;
}

// get mean internal energy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKUBML(amrex::Real *  T, amrex::Real *  x,  amrex::Real *  ubml)
{
int id; // loop counter
amrex::Real result = 0; 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real uml[21]; //  temporary energy array
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
speciesInternalEnergy(uml, tc);

// perform dot product
for (id = 0; id < 21; ++id) {
result += x[id]*uml[id];
}

*ubml = result * RT;
}

// get mean internal energy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKUBMS(amrex::Real *  T, amrex::Real *  y,  amrex::Real *  ubms)
{
amrex::Real result = 0;
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real ums[21]; //  temporary energy array
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
amrex::Real imw[21];

get_imw(imw);

speciesInternalEnergy(ums, tc);

// perform dot product + scaling by wt
result += y[0]*ums[0]*imw[0]; // NO
result += y[1]*ums[1]*imw[1]; // N2O
result += y[2]*ums[2]*imw[2]; // O2
result += y[3]*ums[3]*imw[3]; // H2
result += y[4]*ums[4]*imw[4]; // AR
result += y[5]*ums[5]*imw[5]; // H
result += y[6]*ums[6]*imw[6]; // O
result += y[7]*ums[7]*imw[7]; // OH
result += y[8]*ums[8]*imw[8]; // HO2
result += y[9]*ums[9]*imw[9]; // H2O
result += y[10]*ums[10]*imw[10]; // H2O2
result += y[11]*ums[11]*imw[11]; // NO2
result += y[12]*ums[12]*imw[12]; // NH3
result += y[13]*ums[13]*imw[13]; // HNO
result += y[14]*ums[14]*imw[14]; // N
result += y[15]*ums[15]*imw[15]; // N2H
result += y[16]*ums[16]*imw[16]; // NH2
result += y[17]*ums[17]*imw[17]; // NH
result += y[18]*ums[18]*imw[18]; // N2
result += y[19]*ums[19]*imw[19]; // H2NO
result += y[20]*ums[20]*imw[20]; // HE

*ubms = result * RT;
}

// get mixture entropy in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKSBML(amrex::Real *  P, amrex::Real *  T, amrex::Real *  x,  amrex::Real *  sbml)
{
int id; // loop counter
amrex::Real result = 0; 
// Log of normalized pressure in cgs units dynes/cm^2 by Patm
amrex::Real logPratio = log ( *P / 1013250.0 ); 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { log(tT), tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real sor[21]; //  temporary storage
speciesEntropy(sor, tc);

// Compute Eq 42
for (id = 0; id < 21; ++id) {
result += x[id]*(sor[id]-log((x[id]+1e-100))-logPratio);
}

*sbml = result * 8.31446261815324e+07;
}

// get mixture entropy in mass units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKSBMS(amrex::Real *  P, amrex::Real *  T, amrex::Real *  y,  amrex::Real *  sbms)
{
amrex::Real result = 0; 
// Log of normalized pressure in cgs units dynes/cm^2 by Patm
amrex::Real logPratio = log ( *P / 1013250.0 ); 
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { log(tT), tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real sor[21]; //  temporary storage
amrex::Real x[21]; //  need a ytx conversion
amrex::Real YOW = 0; // See Eq 4, 6 in CK Manual
amrex::Real imw[21];

get_imw(imw);

// Compute inverse of mean molecular wt first
YOW += y[0]*imw[0]; // NO
YOW += y[1]*imw[1]; // N2O
YOW += y[2]*imw[2]; // O2
YOW += y[3]*imw[3]; // H2
YOW += y[4]*imw[4]; // AR
YOW += y[5]*imw[5]; // H
YOW += y[6]*imw[6]; // O
YOW += y[7]*imw[7]; // OH
YOW += y[8]*imw[8]; // HO2
YOW += y[9]*imw[9]; // H2O
YOW += y[10]*imw[10]; // H2O2
YOW += y[11]*imw[11]; // NO2
YOW += y[12]*imw[12]; // NH3
YOW += y[13]*imw[13]; // HNO
YOW += y[14]*imw[14]; // N
YOW += y[15]*imw[15]; // N2H
YOW += y[16]*imw[16]; // NH2
YOW += y[17]*imw[17]; // NH
YOW += y[18]*imw[18]; // N2
YOW += y[19]*imw[19]; // H2NO
YOW += y[20]*imw[20]; // HE
// Now compute y to x conversion
x[0] = y[0]/(30.006000*YOW); 
x[1] = y[1]/(44.013000*YOW); 
x[2] = y[2]/(31.998000*YOW); 
x[3] = y[3]/(2.016000*YOW); 
x[4] = y[4]/(39.950000*YOW); 
x[5] = y[5]/(1.008000*YOW); 
x[6] = y[6]/(15.999000*YOW); 
x[7] = y[7]/(17.007000*YOW); 
x[8] = y[8]/(33.006000*YOW); 
x[9] = y[9]/(18.015000*YOW); 
x[10] = y[10]/(34.014000*YOW); 
x[11] = y[11]/(46.005000*YOW); 
x[12] = y[12]/(17.031000*YOW); 
x[13] = y[13]/(31.014000*YOW); 
x[14] = y[14]/(14.007000*YOW); 
x[15] = y[15]/(29.022000*YOW); 
x[16] = y[16]/(16.023000*YOW); 
x[17] = y[17]/(15.015000*YOW); 
x[18] = y[18]/(28.014000*YOW); 
x[19] = y[19]/(32.022000*YOW); 
x[20] = y[20]/(4.002602*YOW); 
speciesEntropy(sor, tc);
// Perform computation in Eq 42 and 43
result += x[0]*(sor[0]-log((x[0]+1e-100))-logPratio);
result += x[1]*(sor[1]-log((x[1]+1e-100))-logPratio);
result += x[2]*(sor[2]-log((x[2]+1e-100))-logPratio);
result += x[3]*(sor[3]-log((x[3]+1e-100))-logPratio);
result += x[4]*(sor[4]-log((x[4]+1e-100))-logPratio);
result += x[5]*(sor[5]-log((x[5]+1e-100))-logPratio);
result += x[6]*(sor[6]-log((x[6]+1e-100))-logPratio);
result += x[7]*(sor[7]-log((x[7]+1e-100))-logPratio);
result += x[8]*(sor[8]-log((x[8]+1e-100))-logPratio);
result += x[9]*(sor[9]-log((x[9]+1e-100))-logPratio);
result += x[10]*(sor[10]-log((x[10]+1e-100))-logPratio);
result += x[11]*(sor[11]-log((x[11]+1e-100))-logPratio);
result += x[12]*(sor[12]-log((x[12]+1e-100))-logPratio);
result += x[13]*(sor[13]-log((x[13]+1e-100))-logPratio);
result += x[14]*(sor[14]-log((x[14]+1e-100))-logPratio);
result += x[15]*(sor[15]-log((x[15]+1e-100))-logPratio);
result += x[16]*(sor[16]-log((x[16]+1e-100))-logPratio);
result += x[17]*(sor[17]-log((x[17]+1e-100))-logPratio);
result += x[18]*(sor[18]-log((x[18]+1e-100))-logPratio);
result += x[19]*(sor[19]-log((x[19]+1e-100))-logPratio);
result += x[20]*(sor[20]-log((x[20]+1e-100))-logPratio);
// Scale by R/W
*sbms = result * 8.31446261815324e+07 * YOW;
}

//  get temperature given internal energy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void GET_T_GIVEN_EY(amrex::Real *  e, amrex::Real *  y, amrex::Real *  t, int * ierr)
{
#ifdef CONVERGENCE
const int maxiter = 5000;
const amrex::Real tol  = 1.e-12;
#else
const int maxiter = 200;
const amrex::Real tol  = 1.e-6;
#endif
amrex::Real ein  = *e;
amrex::Real tmin = 90;// max lower bound for thermo def
amrex::Real tmax = 4000;// min upper bound for thermo def
amrex::Real e1,emin,emax,cv,t1,dt;
int i;//  loop counter
CKUBMS(&tmin, y, &emin);
CKUBMS(&tmax, y, &emax);
if (ein < emin) {
// Linear Extrapolation below tmin
CKCVBS(&tmin, y, &cv);
*t = tmin - (emin-ein)/cv;
*ierr = 1;
return;
}
if (ein > emax) {
// Linear Extrapolation above tmax
CKCVBS(&tmax, y, &cv);
*t = tmax - (emax-ein)/cv;
*ierr = 1;
return;
}
t1 = *t;
if (t1 < tmin || t1 > tmax) {
t1 = tmin + (tmax-tmin)/(emax-emin)*(ein-emin);
}
for (i = 0; i < maxiter; ++i) {
CKUBMS(&t1,y,&e1);
CKCVBS(&t1,y,&cv);
dt = (ein - e1) / cv;
if (dt > 100.) { dt = 100.; }
else if (dt < -100.) { dt = -100.; }
else if (fabs(dt) < tol) break;
else if (t1+dt == t1) break;
t1 += dt;
}
*t = t1;
*ierr = 0;
return;
}

//  get temperature given enthalpy in mass units and mass fracs
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void GET_T_GIVEN_HY(amrex::Real *  h, amrex::Real *  y, amrex::Real *  t, int * ierr)
{
#ifdef CONVERGENCE
const int maxiter = 5000;
const amrex::Real tol  = 1.e-12;
#else
const int maxiter = 200;
const amrex::Real tol  = 1.e-6;
#endif
amrex::Real hin  = *h;
amrex::Real tmin = 90;// max lower bound for thermo def
amrex::Real tmax = 4000;// min upper bound for thermo def
amrex::Real h1,hmin,hmax,cp,t1,dt;
int i;//  loop counter
CKHBMS(&tmin, y, &hmin);
CKHBMS(&tmax, y, &hmax);
if (hin < hmin) {
// Linear Extrapolation below tmin
CKCPBS(&tmin, y, &cp);
*t = tmin - (hmin-hin)/cp;
*ierr = 1;
return;
}
if (hin > hmax) {
// Linear Extrapolation above tmax
CKCPBS(&tmax, y, &cp);
*t = tmax - (hmax-hin)/cp;
*ierr = 1;
return;
}
t1 = *t;
if (t1 < tmin || t1 > tmax) {
t1 = tmin + (tmax-tmin)/(hmax-hmin)*(hin-hmin);
}
for (i = 0; i < maxiter; ++i) {
CKHBMS(&t1,y,&h1);
CKCPBS(&t1,y,&cp);
dt = (hin - h1) / cp;
if (dt > 100.) { dt = 100.; }
else if (dt < -100.) { dt = -100.; }
else if (fabs(dt) < tol) break;
else if (t1+dt == t1) break;
t1 += dt;
}
*t = t1;
*ierr = 0;
return;
}

// Compute P = rhoRT/W(x)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKPX(amrex::Real *  rho, amrex::Real *  T, amrex::Real *  x, amrex::Real *  P)
{
amrex::Real XW = 0;//  To hold mean molecular wt
XW += x[0]*30.006000; // NO
XW += x[1]*44.013000; // N2O
XW += x[2]*31.998000; // O2
XW += x[3]*2.016000; // H2
XW += x[4]*39.950000; // AR
XW += x[5]*1.008000; // H
XW += x[6]*15.999000; // O
XW += x[7]*17.007000; // OH
XW += x[8]*33.006000; // HO2
XW += x[9]*18.015000; // H2O
XW += x[10]*34.014000; // H2O2
XW += x[11]*46.005000; // NO2
XW += x[12]*17.031000; // NH3
XW += x[13]*31.014000; // HNO
XW += x[14]*14.007000; // N
XW += x[15]*29.022000; // N2H
XW += x[16]*16.023000; // NH2
XW += x[17]*15.015000; // NH
XW += x[18]*28.014000; // N2
XW += x[19]*32.022000; // H2NO
XW += x[20]*4.002602; // HE
*P = *rho * 8.31446261815324e+07 * (*T) / XW; // P = rho*R*T/W

return;
}

// Compute P = rhoRT/W(y)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKPY(amrex::Real *  rho, amrex::Real *  T, amrex::Real *  y,  amrex::Real *  P)
{
amrex::Real YOW = 0;//  for computing mean MW
amrex::Real imw[21];

get_imw(imw);

YOW += y[0]*imw[0]; // NO
YOW += y[1]*imw[1]; // N2O
YOW += y[2]*imw[2]; // O2
YOW += y[3]*imw[3]; // H2
YOW += y[4]*imw[4]; // AR
YOW += y[5]*imw[5]; // H
YOW += y[6]*imw[6]; // O
YOW += y[7]*imw[7]; // OH
YOW += y[8]*imw[8]; // HO2
YOW += y[9]*imw[9]; // H2O
YOW += y[10]*imw[10]; // H2O2
YOW += y[11]*imw[11]; // NO2
YOW += y[12]*imw[12]; // NH3
YOW += y[13]*imw[13]; // HNO
YOW += y[14]*imw[14]; // N
YOW += y[15]*imw[15]; // N2H
YOW += y[16]*imw[16]; // NH2
YOW += y[17]*imw[17]; // NH
YOW += y[18]*imw[18]; // N2
YOW += y[19]*imw[19]; // H2NO
YOW += y[20]*imw[20]; // HE
*P = *rho * 8.31446261815324e+07 * (*T) * YOW; // P = rho*R*T/W

return;
}

// Compute P = rhoRT/W(c)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKPC(amrex::Real *  rho, amrex::Real *  T, amrex::Real *  c,  amrex::Real *  P)
{
int id; // loop counter
// See Eq 5 in CK Manual
amrex::Real W = 0;
amrex::Real sumC = 0;
W += c[0]*30.006000; // NO
W += c[1]*44.013000; // N2O
W += c[2]*31.998000; // O2
W += c[3]*2.016000; // H2
W += c[4]*39.950000; // AR
W += c[5]*1.008000; // H
W += c[6]*15.999000; // O
W += c[7]*17.007000; // OH
W += c[8]*33.006000; // HO2
W += c[9]*18.015000; // H2O
W += c[10]*34.014000; // H2O2
W += c[11]*46.005000; // NO2
W += c[12]*17.031000; // NH3
W += c[13]*31.014000; // HNO
W += c[14]*14.007000; // N
W += c[15]*29.022000; // N2H
W += c[16]*16.023000; // NH2
W += c[17]*15.015000; // NH
W += c[18]*28.014000; // N2
W += c[19]*32.022000; // H2NO
W += c[20]*4.002602; // HE

for (id = 0; id < 21; ++id) {
sumC += c[id];
}
*P = *rho * 8.31446261815324e+07 * (*T) * sumC / W; // P = rho*R*T/W

return;
}

// Compute rho = PW(x)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKRHOX(amrex::Real *  P, amrex::Real *  T, amrex::Real *  x,  amrex::Real *  rho)
{
amrex::Real XW = 0;//  To hold mean molecular wt
XW += x[0]*30.006000; // NO
XW += x[1]*44.013000; // N2O
XW += x[2]*31.998000; // O2
XW += x[3]*2.016000; // H2
XW += x[4]*39.950000; // AR
XW += x[5]*1.008000; // H
XW += x[6]*15.999000; // O
XW += x[7]*17.007000; // OH
XW += x[8]*33.006000; // HO2
XW += x[9]*18.015000; // H2O
XW += x[10]*34.014000; // H2O2
XW += x[11]*46.005000; // NO2
XW += x[12]*17.031000; // NH3
XW += x[13]*31.014000; // HNO
XW += x[14]*14.007000; // N
XW += x[15]*29.022000; // N2H
XW += x[16]*16.023000; // NH2
XW += x[17]*15.015000; // NH
XW += x[18]*28.014000; // N2
XW += x[19]*32.022000; // H2NO
XW += x[20]*4.002602; // HE
*rho = *P * XW / (8.31446261815324e+07 * (*T)); // rho = P*W/(R*T)

return;
}

// Compute rho = P*W(y)/RT
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKRHOY(amrex::Real *  P, amrex::Real *  T, amrex::Real *  y,  amrex::Real *  rho)
{
amrex::Real YOW = 0;
amrex::Real tmp[21];
amrex::Real imw[21];

get_imw(imw);

for (int i = 0; i < 21; i++)
{
tmp[i] = y[i]*imw[i];
}
for (int i = 0; i < 21; i++)
{
YOW += tmp[i];
}

*rho = *P / (8.31446261815324e+07 * (*T) * YOW);// rho = P*W/(R*T)
return;
}

// Compute rho = P*W(c)/(R*T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKRHOC(amrex::Real *  P, amrex::Real *  T, amrex::Real *  c,  amrex::Real *  rho)
{
int id; // loop counter
// See Eq 5 in CK Manual
amrex::Real W = 0;
amrex::Real sumC = 0;
W += c[0]*30.006000; // NO
W += c[1]*44.013000; // N2O
W += c[2]*31.998000; // O2
W += c[3]*2.016000; // H2
W += c[4]*39.950000; // AR
W += c[5]*1.008000; // H
W += c[6]*15.999000; // O
W += c[7]*17.007000; // OH
W += c[8]*33.006000; // HO2
W += c[9]*18.015000; // H2O
W += c[10]*34.014000; // H2O2
W += c[11]*46.005000; // NO2
W += c[12]*17.031000; // NH3
W += c[13]*31.014000; // HNO
W += c[14]*14.007000; // N
W += c[15]*29.022000; // N2H
W += c[16]*16.023000; // NH2
W += c[17]*15.015000; // NH
W += c[18]*28.014000; // N2
W += c[19]*32.022000; // H2NO
W += c[20]*4.002602; // HE

for (id = 0; id < 21; ++id) {
sumC += c[id];
}
*rho = *P * W / (sumC * (*T) * 8.31446261815324e+07); // rho = PW/(R*T)

return;
}

// get molecular weight for all species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKWT( amrex::Real *  wt)
{
get_mw(wt);
}

// given y[species]: mass fractions
// s mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKMMWY(amrex::Real *  y,  amrex::Real *  wtm)
{
amrex::Real YOW = 0;
amrex::Real tmp[21];
amrex::Real imw[21];

get_imw(imw);

for (int i = 0; i < 21; i++)
{
tmp[i] = y[i]*imw[i];
}
for (int i = 0; i < 21; i++)
{
YOW += tmp[i];
}

*wtm = 1.0 / YOW;
return;
}

// given x[species]: mole fractions
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKMMWX(amrex::Real *  x,  amrex::Real *  wtm)
{
amrex::Real XW = 0;//  see Eq 4 in CK Manual
XW += x[0]*30.006000; // NO
XW += x[1]*44.013000; // N2O
XW += x[2]*31.998000; // O2
XW += x[3]*2.016000; // H2
XW += x[4]*39.950000; // AR
XW += x[5]*1.008000; // H
XW += x[6]*15.999000; // O
XW += x[7]*17.007000; // OH
XW += x[8]*33.006000; // HO2
XW += x[9]*18.015000; // H2O
XW += x[10]*34.014000; // H2O2
XW += x[11]*46.005000; // NO2
XW += x[12]*17.031000; // NH3
XW += x[13]*31.014000; // HNO
XW += x[14]*14.007000; // N
XW += x[15]*29.022000; // N2H
XW += x[16]*16.023000; // NH2
XW += x[17]*15.015000; // NH
XW += x[18]*28.014000; // N2
XW += x[19]*32.022000; // H2NO
XW += x[20]*4.002602; // HE
*wtm = XW;

return;
}

// given c[species]: molar concentration
// returns mean molecular weight (gm/mole)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKMMWC(amrex::Real *  c,  amrex::Real *  wtm)
{
int id; // loop counter
// See Eq 5 in CK Manual
amrex::Real W = 0;
amrex::Real sumC = 0;
W += c[0]*30.006000; // NO
W += c[1]*44.013000; // N2O
W += c[2]*31.998000; // O2
W += c[3]*2.016000; // H2
W += c[4]*39.950000; // AR
W += c[5]*1.008000; // H
W += c[6]*15.999000; // O
W += c[7]*17.007000; // OH
W += c[8]*33.006000; // HO2
W += c[9]*18.015000; // H2O
W += c[10]*34.014000; // H2O2
W += c[11]*46.005000; // NO2
W += c[12]*17.031000; // NH3
W += c[13]*31.014000; // HNO
W += c[14]*14.007000; // N
W += c[15]*29.022000; // N2H
W += c[16]*16.023000; // NH2
W += c[17]*15.015000; // NH
W += c[18]*28.014000; // N2
W += c[19]*32.022000; // H2NO
W += c[20]*4.002602; // HE

for (id = 0; id < 21; ++id) {
sumC += c[id];
}
//  CK provides no guard against divison by zero
*wtm = W/sumC;

return;
}

// get Cp/R as a function of T 
// for all species (Eq 19)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCPOR(amrex::Real *  T, amrex::Real *  cpor)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
cp_R(cpor, tc);
}

// get H/RT as a function of T 
// for all species (Eq 20)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKHORT(amrex::Real *  T, amrex::Real *  hort)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
speciesEnthalpy(hort, tc);
}

// get S/R as a function of T 
// for all species (Eq 21)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKSOR(amrex::Real *  T, amrex::Real *  sor)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { log(tT), tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
speciesEntropy(sor, tc);
}

// convert y[species] (mass fracs) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKYTX(amrex::Real *  y,  amrex::Real *  x)
{
amrex::Real YOW = 0;
amrex::Real tmp[21];
amrex::Real imw[21];

get_imw(imw);

for (int i = 0; i < 21; i++)
{
tmp[i] = y[i]*imw[i];
}
for (int i = 0; i < 21; i++)
{
YOW += tmp[i];
}

amrex::Real YOWINV = 1.0/YOW;

for (int i = 0; i < 21; i++)
{
x[i] = y[i]*imw[i]*YOWINV;
}
return;
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKYTCP(amrex::Real *  P, amrex::Real *  T, amrex::Real *  y,  amrex::Real *  c)
{
amrex::Real YOW = 0;
amrex::Real PWORT;
amrex::Real imw[21];

get_imw(imw);

// Compute inverse of mean molecular wt first
for (int i = 0; i < 21; i++)
{
c[i] = y[i]*imw[i];
}
for (int i = 0; i < 21; i++)
{
YOW += c[i];
}

// PW/RT (see Eq. 7)
PWORT = (*P)/(YOW * 8.31446261815324e+07 * (*T)); 
// Now compute conversion

for (int i = 0; i < 21; i++)
{
c[i] = PWORT * y[i] * imw[i];
}
return;
}

// convert y[species] (mass fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKYTCR(amrex::Real *  rho, amrex::Real * /*T*/, amrex::Real * y,  amrex::Real * c)
{
amrex::Real imw[21];

get_imw(imw);

for (int i = 0; i < 21; i++)
{
c[i] = (*rho)  * y[i] * imw[i];
}
}

// convert x[species] (mole fracs) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKXTY(amrex::Real *  x,  amrex::Real *  y)
{
amrex::Real XW = 0; // See Eq 4, 9 in CK Manual
// Compute mean molecular wt first
XW += x[0]*30.006000; // NO
XW += x[1]*44.013000; // N2O
XW += x[2]*31.998000; // O2
XW += x[3]*2.016000; // H2
XW += x[4]*39.950000; // AR
XW += x[5]*1.008000; // H
XW += x[6]*15.999000; // O
XW += x[7]*17.007000; // OH
XW += x[8]*33.006000; // HO2
XW += x[9]*18.015000; // H2O
XW += x[10]*34.014000; // H2O2
XW += x[11]*46.005000; // NO2
XW += x[12]*17.031000; // NH3
XW += x[13]*31.014000; // HNO
XW += x[14]*14.007000; // N
XW += x[15]*29.022000; // N2H
XW += x[16]*16.023000; // NH2
XW += x[17]*15.015000; // NH
XW += x[18]*28.014000; // N2
XW += x[19]*32.022000; // H2NO
XW += x[20]*4.002602; // HE
// Now compute conversion
amrex::Real XWinv = 1.0/XW;
y[0] = x[0]*30.006000*XWinv; 
y[1] = x[1]*44.013000*XWinv; 
y[2] = x[2]*31.998000*XWinv; 
y[3] = x[3]*2.016000*XWinv; 
y[4] = x[4]*39.950000*XWinv; 
y[5] = x[5]*1.008000*XWinv; 
y[6] = x[6]*15.999000*XWinv; 
y[7] = x[7]*17.007000*XWinv; 
y[8] = x[8]*33.006000*XWinv; 
y[9] = x[9]*18.015000*XWinv; 
y[10] = x[10]*34.014000*XWinv; 
y[11] = x[11]*46.005000*XWinv; 
y[12] = x[12]*17.031000*XWinv; 
y[13] = x[13]*31.014000*XWinv; 
y[14] = x[14]*14.007000*XWinv; 
y[15] = x[15]*29.022000*XWinv; 
y[16] = x[16]*16.023000*XWinv; 
y[17] = x[17]*15.015000*XWinv; 
y[18] = x[18]*28.014000*XWinv; 
y[19] = x[19]*32.022000*XWinv; 
y[20] = x[20]*4.002602*XWinv; 

return;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKXTCP(amrex::Real *  P, amrex::Real *  T, amrex::Real *  x,  amrex::Real *  c)
{
int id; // loop counter
amrex::Real PORT = (*P)/(8.31446261815324e+07 * (*T)); // P/RT

// Compute conversion, see Eq 10
for (id = 0; id < 21; ++id) {
c[id] = x[id]*PORT;
}

return;
}

// convert x[species] (mole fracs) to c[species] (molar conc)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKXTCR(amrex::Real *  rho, amrex::Real * /*T*/, amrex::Real *  x, amrex::Real *  c)
{
int id; // loop counter
amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
amrex::Real ROW; 
// Compute mean molecular wt first
XW += x[0]*30.006000; // NO
XW += x[1]*44.013000; // N2O
XW += x[2]*31.998000; // O2
XW += x[3]*2.016000; // H2
XW += x[4]*39.950000; // AR
XW += x[5]*1.008000; // H
XW += x[6]*15.999000; // O
XW += x[7]*17.007000; // OH
XW += x[8]*33.006000; // HO2
XW += x[9]*18.015000; // H2O
XW += x[10]*34.014000; // H2O2
XW += x[11]*46.005000; // NO2
XW += x[12]*17.031000; // NH3
XW += x[13]*31.014000; // HNO
XW += x[14]*14.007000; // N
XW += x[15]*29.022000; // N2H
XW += x[16]*16.023000; // NH2
XW += x[17]*15.015000; // NH
XW += x[18]*28.014000; // N2
XW += x[19]*32.022000; // H2NO
XW += x[20]*4.002602; // HE
ROW = (*rho) / XW;

// Compute conversion, see Eq 11
for (id = 0; id < 21; ++id) {
c[id] = x[id]*ROW;
}

return;
}

// convert c[species] (molar conc) to x[species] (mole fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCTX(amrex::Real *  c, amrex::Real *  x)
{
int id; // loop counter
amrex::Real sumC = 0; 

// compute sum of c 
for (id = 0; id < 21; ++id) {
sumC += c[id];
}

//  See Eq 13 
amrex::Real sumCinv = 1.0/sumC;
for (id = 0; id < 21; ++id) {
x[id] = c[id]*sumCinv;
}

return;
}

// convert c[species] (molar conc) to y[species] (mass fracs)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCTY(amrex::Real *  c, amrex::Real *  y)
{
amrex::Real CW = 0; // See Eq 12 in CK Manual
// compute denominator in eq 12 first
CW += c[0]*30.006000; // NO
CW += c[1]*44.013000; // N2O
CW += c[2]*31.998000; // O2
CW += c[3]*2.016000; // H2
CW += c[4]*39.950000; // AR
CW += c[5]*1.008000; // H
CW += c[6]*15.999000; // O
CW += c[7]*17.007000; // OH
CW += c[8]*33.006000; // HO2
CW += c[9]*18.015000; // H2O
CW += c[10]*34.014000; // H2O2
CW += c[11]*46.005000; // NO2
CW += c[12]*17.031000; // NH3
CW += c[13]*31.014000; // HNO
CW += c[14]*14.007000; // N
CW += c[15]*29.022000; // N2H
CW += c[16]*16.023000; // NH2
CW += c[17]*15.015000; // NH
CW += c[18]*28.014000; // N2
CW += c[19]*32.022000; // H2NO
CW += c[20]*4.002602; // HE
// Now compute conversion
amrex::Real CWinv = 1.0/CW;
y[0] = c[0]*30.006000*CWinv; 
y[1] = c[1]*44.013000*CWinv; 
y[2] = c[2]*31.998000*CWinv; 
y[3] = c[3]*2.016000*CWinv; 
y[4] = c[4]*39.950000*CWinv; 
y[5] = c[5]*1.008000*CWinv; 
y[6] = c[6]*15.999000*CWinv; 
y[7] = c[7]*17.007000*CWinv; 
y[8] = c[8]*33.006000*CWinv; 
y[9] = c[9]*18.015000*CWinv; 
y[10] = c[10]*34.014000*CWinv; 
y[11] = c[11]*46.005000*CWinv; 
y[12] = c[12]*17.031000*CWinv; 
y[13] = c[13]*31.014000*CWinv; 
y[14] = c[14]*14.007000*CWinv; 
y[15] = c[15]*29.022000*CWinv; 
y[16] = c[16]*16.023000*CWinv; 
y[17] = c[17]*15.015000*CWinv; 
y[18] = c[18]*28.014000*CWinv; 
y[19] = c[19]*32.022000*CWinv; 
y[20] = c[20]*4.002602*CWinv; 

return;
}

// get specific heat at constant volume as a function 
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCVML(amrex::Real *  T,  amrex::Real *  cvml)
{
int id; // loop counter
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
cv_R(cvml, tc);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
cvml[id] *= 8.31446261815324e+07;
}
}

// get specific heat at constant pressure as a 
// function of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCPML(amrex::Real *  T,  amrex::Real *  cpml)
{
int id; // loop counter
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
cp_R(cpml, tc);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
cpml[id] *= 8.31446261815324e+07;
}
}

// get internal energy as a function 
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKUML(amrex::Real *  T,  amrex::Real *  uml)
{
int id; // loop counter
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
speciesInternalEnergy(uml, tc);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
uml[id] *= RT;
}
}

// get enthalpy as a function 
// of T for all species (molar units)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKHML(amrex::Real *  T,  amrex::Real *  hml)
{
int id; // loop counter
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
speciesEnthalpy(hml, tc);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
hml[id] *= RT;
}
}

// Returns the standard-state entropies in molar units
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKSML(amrex::Real *  T,  amrex::Real *  sml)
{
int id; // loop counter
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { log(tT), tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
speciesEntropy(sml, tc);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
sml[id] *= 8.31446261815324e+07;
}
}

// Returns the specific heats at constant volume
// in mass units (Eq. 29)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCVMS(amrex::Real *  T,  amrex::Real *  cvms)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
cv_R(cvms, tc);
// multiply by R/molecularweight
cvms[0] *= 2.770933352713870e+06; // NO
cvms[1] *= 1.889092454082485e+06; // N2O
cvms[2] *= 2.598431970171023e+06; // O2
cvms[3] *= 4.124237409798234e+07; // H2
cvms[4] *= 2.081217176008320e+06; // AR
cvms[5] *= 8.248474819596468e+07; // H
cvms[6] *= 5.196863940342046e+06; // O
cvms[7] *= 4.888847308845322e+06; // OH
cvms[8] *= 2.519076112874398e+06; // HO2
cvms[9] *= 4.615299815794193e+06; // H2O
cvms[10] *= 2.444423654422661e+06; // H2O2
cvms[11] *= 1.807295428356318e+06; // NO2
cvms[12] *= 4.881957969674852e+06; // NH3
cvms[13] *= 2.680873998243773e+06; // HNO
cvms[14] *= 5.935933903157878e+06; // N
cvms[15] *= 2.864882715923520e+06; // N2H
cvms[16] *= 5.189079834084279e+06; // NH2
cvms[17] *= 5.537437641127699e+06; // NH
cvms[18] *= 2.967966951578939e+06; // N2
cvms[19] *= 2.596484485089389e+06; // H2NO
cvms[20] *= 2.077264394049980e+07; // HE
}

// Returns the specific heats at constant pressure
// in mass units (Eq. 26)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKCPMS(amrex::Real *  T,  amrex::Real *  cpms)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
cp_R(cpms, tc);
// multiply by R/molecularweight
cpms[0] *= 2.770933352713870e+06; // NO
cpms[1] *= 1.889092454082485e+06; // N2O
cpms[2] *= 2.598431970171023e+06; // O2
cpms[3] *= 4.124237409798234e+07; // H2
cpms[4] *= 2.081217176008320e+06; // AR
cpms[5] *= 8.248474819596468e+07; // H
cpms[6] *= 5.196863940342046e+06; // O
cpms[7] *= 4.888847308845322e+06; // OH
cpms[8] *= 2.519076112874398e+06; // HO2
cpms[9] *= 4.615299815794193e+06; // H2O
cpms[10] *= 2.444423654422661e+06; // H2O2
cpms[11] *= 1.807295428356318e+06; // NO2
cpms[12] *= 4.881957969674852e+06; // NH3
cpms[13] *= 2.680873998243773e+06; // HNO
cpms[14] *= 5.935933903157878e+06; // N
cpms[15] *= 2.864882715923520e+06; // N2H
cpms[16] *= 5.189079834084279e+06; // NH2
cpms[17] *= 5.537437641127699e+06; // NH
cpms[18] *= 2.967966951578939e+06; // N2
cpms[19] *= 2.596484485089389e+06; // H2NO
cpms[20] *= 2.077264394049980e+07; // HE
}

// Returns internal energy in mass units (Eq 30.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKUMS(amrex::Real *  T,  amrex::Real *  ums)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
amrex::Real imw[21];

get_imw(imw);

speciesInternalEnergy(ums, tc);

for (int i = 0; i < 21; i++)
{
ums[i] *= RT*imw[i];
}
}

// Returns enthalpy in mass units (Eq 27.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKHMS(amrex::Real *  T,  amrex::Real *  hms)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { 0, tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
amrex::Real RT = 8.31446261815324e+07*tT; // R*T
amrex::Real imw[21];

get_imw(imw);

speciesEnthalpy(hms, tc);

for (int i = 0; i < 21; i++)
{
hms[i] *= RT*imw[i];
}
}

// Returns the entropies in mass units (Eq 28.)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKSMS(amrex::Real *  T,  amrex::Real *  sms)
{
amrex::Real tT = *T; // temporary temperature
const amrex::Real tc[5] = { log(tT), tT, tT*tT, tT*tT*tT, tT*tT*tT*tT }; // temperature cache
speciesEntropy(sms, tc);
// multiply by R/molecularweight
sms[0] *= 2.770933352713870e+06; // NO
sms[1] *= 1.889092454082485e+06; // N2O
sms[2] *= 2.598431970171023e+06; // O2
sms[3] *= 4.124237409798234e+07; // H2
sms[4] *= 2.081217176008320e+06; // AR
sms[5] *= 8.248474819596468e+07; // H
sms[6] *= 5.196863940342046e+06; // O
sms[7] *= 4.888847308845322e+06; // OH
sms[8] *= 2.519076112874398e+06; // HO2
sms[9] *= 4.615299815794193e+06; // H2O
sms[10] *= 2.444423654422661e+06; // H2O2
sms[11] *= 1.807295428356318e+06; // NO2
sms[12] *= 4.881957969674852e+06; // NH3
sms[13] *= 2.680873998243773e+06; // HNO
sms[14] *= 5.935933903157878e+06; // N
sms[15] *= 2.864882715923520e+06; // N2H
sms[16] *= 5.189079834084279e+06; // NH2
sms[17] *= 5.537437641127699e+06; // NH
sms[18] *= 2.967966951578939e+06; // N2
sms[19] *= 2.596484485089389e+06; // H2NO
sms[20] *= 2.077264394049980e+07; // HE
}

// GPU version of productionRate: no more use of thermo namespace vectors 
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void comp_qfqr(amrex::Real *  qf, amrex::Real * qr, amrex::Real * sc, amrex::Real * sc_qss, const amrex::Real * tc, amrex::Real invT)
{

// reaction 49: H + O2 (+M) <=> HO2 (+M)
qf[0] = sc[2]*sc[5];
qr[0] = sc[8];

// reaction 56: 2 OH (+M) <=> H2O2 (+M)
qf[1] = (sc[7] * sc[7]);
qr[1] = sc[10];

// reaction 22: N2H (+M) <=> H + N2 (+M)
qf[2] = sc[15];
qr[2] = sc[5]*sc[18];

// reaction 26: H + NO (+M) <=> HNO (+M)
qf[3] = sc[0]*sc[5];
qr[3] = sc[13];

// reaction 29: N2O (+M) <=> N2 + O (+M)
qf[4] = sc[1];
qr[4] = sc[6]*sc[18];

// reaction 17: NH3 + M <=> H + NH2 + M
qf[5] = sc[12];
qr[5] = sc[5]*sc[16];

// reaction 34: NO2 + M <=> NO + O + M
qf[6] = sc[11];
qr[6] = sc[0]*sc[6];

// reaction 45: 2 H + M <=> H2 + M
qf[7] = (sc[5] * sc[5]);
qr[7] = sc[3];

// reaction 46: H + OH + M <=> H2O + M
qf[8] = sc[5]*sc[7];
qr[8] = sc[9];

// reaction 47: 2 O + M <=> O2 + M
qf[9] = (sc[6] * sc[6]);
qr[9] = sc[2];

// reaction 48: H + O + M <=> OH + M
qf[10] = sc[5]*sc[6];
qr[10] = sc[7];

// reaction 0: N2 + O <=> N + NO
qf[11] = sc[6]*sc[18];
qr[11] = sc[0]*sc[14];

// reaction 1: N + O2 <=> NO + O
qf[12] = sc[2]*sc[14];
qr[12] = sc[0]*sc[6];

// reaction 2: N + OH <=> H + NO
qf[13] = sc[7]*sc[14];
qr[13] = sc[0]*sc[5];

// reaction 3: H + NH <=> H2 + N
qf[14] = sc[5]*sc[17];
qr[14] = sc[3]*sc[14];

// reaction 4: NH + O <=> H + NO
qf[15] = sc[6]*sc[17];
qr[15] = sc[0]*sc[5];

// reaction 5: NH + OH <=> H + HNO
qf[16] = sc[7]*sc[17];
qr[16] = sc[5]*sc[13];

// reaction 6: NH + OH <=> H2O + N
qf[17] = sc[7]*sc[17];
qr[17] = sc[9]*sc[14];

// reaction 7: NH + O2 <=> HNO + O
qf[18] = sc[2]*sc[17];
qr[18] = sc[6]*sc[13];

// reaction 8: NH + NO <=> H + N2O
qf[19] = sc[0]*sc[17];
qr[19] = sc[1]*sc[5];

// reaction 9: NH + NO <=> N2 + OH
qf[20] = sc[0]*sc[17];
qr[20] = sc[7]*sc[18];

// reaction 10: H + NH2 <=> H2 + NH
qf[21] = sc[5]*sc[16];
qr[21] = sc[3]*sc[17];

// reaction 11: NH2 + O <=> H + HNO
qf[22] = sc[6]*sc[16];
qr[22] = sc[5]*sc[13];

// reaction 12: NH2 + O2 <=> H2NO + O
qf[23] = sc[2]*sc[16];
qr[23] = sc[6]*sc[19];

// reaction 13: NH2 + OH <=> H2O + NH
qf[24] = sc[7]*sc[16];
qr[24] = sc[9]*sc[17];

// reaction 14: N + NH2 <=> 2 H + N2
qf[25] = sc[14]*sc[16];
qr[25] = (sc[5] * sc[5])*sc[18];

// reaction 15: NH2 + NO <=> H2O + N2
qf[26] = sc[0]*sc[16];
qr[26] = sc[9]*sc[18];

// reaction 16: NH2 + NO <=> N2H + OH
qf[27] = sc[0]*sc[16];
qr[27] = sc[7]*sc[15];

// reaction 18: H + NH3 <=> H2 + NH2
qf[28] = sc[5]*sc[12];
qr[28] = sc[3]*sc[16];

// reaction 19: NH3 + O <=> NH2 + OH
qf[29] = sc[6]*sc[12];
qr[29] = sc[7]*sc[16];

// reaction 20: NH3 + OH <=> H2O + NH2
qf[30] = sc[7]*sc[12];
qr[30] = sc[9]*sc[16];

// reaction 21: N2H + O2 <=> HO2 + N2
qf[31] = sc[2]*sc[15];
qr[31] = sc[8]*sc[18];

// reaction 23: H + N2H <=> H2 + N2
qf[32] = sc[5]*sc[15];
qr[32] = sc[3]*sc[18];

// reaction 24: N2H + O <=> H + N2O
qf[33] = sc[6]*sc[15];
qr[33] = sc[1]*sc[5];

// reaction 25: N2H + OH <=> H2O + N2
qf[34] = sc[7]*sc[15];
qr[34] = sc[9]*sc[18];

// reaction 27: H + HNO <=> H2 + NO
qf[35] = sc[5]*sc[13];
qr[35] = sc[0]*sc[3];

// reaction 28: HNO + OH <=> H2O + NO
qf[36] = sc[7]*sc[13];
qr[36] = sc[0]*sc[9];

// reaction 30: H + N2O <=> N2 + OH
qf[37] = sc[1]*sc[5];
qr[37] = sc[7]*sc[18];

// reaction 31: H + N2O <=> N2 + OH
qf[38] = sc[1]*sc[5];
qr[38] = sc[7]*sc[18];

// reaction 32: N2O + O <=> 2 NO
qf[39] = sc[1]*sc[6];
qr[39] = (sc[0] * sc[0]);

// reaction 33: N2O + OH <=> HO2 + N2
qf[40] = sc[1]*sc[7];
qr[40] = sc[8]*sc[18];

// reaction 35: HO2 + NO <=> NO2 + OH
qf[41] = sc[0]*sc[8];
qr[41] = sc[7]*sc[11];

// reaction 36: H + NO2 <=> NO + OH
qf[42] = sc[5]*sc[11];
qr[42] = sc[0]*sc[7];

// reaction 37: NO2 + O <=> NO + O2
qf[43] = sc[6]*sc[11];
qr[43] = sc[0]*sc[2];

// reaction 38: H2NO + O <=> HNO + OH
qf[44] = sc[6]*sc[19];
qr[44] = sc[7]*sc[13];

// reaction 39: H2NO + O2 <=> HNO + HO2
qf[45] = sc[2]*sc[19];
qr[45] = sc[8]*sc[13];

// reaction 40: H2NO + HO2 <=> H2O2 + HNO
qf[46] = sc[8]*sc[19];
qr[46] = sc[10]*sc[13];

// reaction 41: H + O2 <=> O + OH
qf[47] = sc[2]*sc[5];
qr[47] = sc[6]*sc[7];

// reaction 42: H2 + O <=> H + OH
qf[48] = sc[3]*sc[6];
qr[48] = sc[5]*sc[7];

// reaction 43: H2 + OH <=> H + H2O
qf[49] = sc[3]*sc[7];
qr[49] = sc[5]*sc[9];

// reaction 44: H2O + O <=> 2 OH
qf[50] = sc[6]*sc[9];
qr[50] = (sc[7] * sc[7]);

// reaction 50: H + HO2 <=> 2 OH
qf[51] = sc[5]*sc[8];
qr[51] = (sc[7] * sc[7]);

// reaction 51: H + HO2 <=> H2 + O2
qf[52] = sc[5]*sc[8];
qr[52] = sc[2]*sc[3];

// reaction 52: H + HO2 <=> H2O + O
qf[53] = sc[5]*sc[8];
qr[53] = sc[6]*sc[9];

// reaction 53: HO2 + O <=> O2 + OH
qf[54] = sc[6]*sc[8];
qr[54] = sc[2]*sc[7];

// reaction 54: HO2 + OH <=> H2O + O2
qf[55] = sc[7]*sc[8];
qr[55] = sc[2]*sc[9];

// reaction 55: HO2 + OH <=> H2O + O2
qf[56] = sc[7]*sc[8];
qr[56] = sc[2]*sc[9];

// reaction 57: 2 HO2 <=> H2O2 + O2
qf[57] = (sc[8] * sc[8]);
qr[57] = sc[2]*sc[10];

// reaction 58: 2 HO2 <=> H2O2 + O2
qf[58] = (sc[8] * sc[8]);
qr[58] = sc[2]*sc[10];

// reaction 59: H + H2O2 <=> H2 + HO2
qf[59] = sc[5]*sc[10];
qr[59] = sc[3]*sc[8];

// reaction 60: H + H2O2 <=> H2O + OH
qf[60] = sc[5]*sc[10];
qr[60] = sc[7]*sc[9];

// reaction 61: H2O2 + OH <=> H2O + HO2
qf[61] = sc[7]*sc[10];
qr[61] = sc[8]*sc[9];

// reaction 62: H2O2 + OH <=> H2O + HO2
qf[62] = sc[7]*sc[10];
qr[62] = sc[8]*sc[9];

// reaction 63: H2O2 + O <=> HO2 + OH
qf[63] = sc[6]*sc[10];
qr[63] = sc[7]*sc[8];

// compute the mixture concentration
amrex::Real mixture = 0.0;
for (int i = 0; i < 21; ++i) {
mixture += sc[i];
}

// compute the Gibbs free energy
amrex::Real g_RT[21];
gibbs(g_RT, tc);

// reference concentration: P_atm / (RT) in inverse mol/m^3
amrex::Real refC = 101325 / 8.31446 * invT;
amrex::Real refCinv = 1 / refC;

// Evaluate the kfs
amrex::Real k_f, k_r, Corr;
amrex::Real redP, F, logPred, logFcent, troe_c, troe_n, troe, F_troe;

// reaction 0:  N2 + O <=> N + NO
k_f = 14700000
           * exp((0.3) * tc[0] - (37885.5775072734) * invT);
qf[11] *= k_f;
qr[11] *= k_f * exp(-(-g_RT[0] + g_RT[6] - g_RT[14] + g_RT[18]));
// reaction 1:  N + O2 <=> NO + O
k_f = 6400
           * exp((1) * tc[0] - (3163.1444787486) * invT);
qf[12] *= k_f;
qr[12] *= k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[6] + g_RT[14]));
// reaction 2:  N + OH <=> H + NO
k_f = 38000000
           ;
qf[13] *= k_f;
qr[13] *= k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[7] + g_RT[14]));
// reaction 3:  H + NH <=> H2 + N
k_f = 100000000
           ;
qf[14] *= k_f;
qr[14] *= k_f * exp(-(-g_RT[3] + g_RT[5] - g_RT[14] + g_RT[17]));
// reaction 4:  NH + O <=> H + NO
k_f = 92000000
           ;
qf[15] *= k_f;
qr[15] *= k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[6] + g_RT[17]));
// reaction 5:  NH + OH <=> H + HNO
k_f = 40000000
           ;
qf[16] *= k_f;
qr[16] *= k_f * exp(-(-g_RT[5] + g_RT[7] - g_RT[13] + g_RT[17]));
// reaction 6:  NH + OH <=> H2O + N
k_f = 500000
           * exp((0.5) * tc[0] - (1006.67487560903) * invT);
qf[17] *= k_f;
qr[17] *= k_f * exp(-(g_RT[7] - g_RT[9] - g_RT[14] + g_RT[17]));
// reaction 7:  NH + O2 <=> HNO + O
k_f = 0.46
           * exp((2) * tc[0] - (3271.39141572985) * invT);
qf[18] *= k_f;
qr[18] *= k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[17]));
// reaction 8:  NH + NO <=> H + N2O
k_f = 180000000
           * exp((-0.351) * tc[0] - (-122.784866456352) * invT);
qf[19] *= k_f;
qr[19] *= k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[5] + g_RT[17]));
// reaction 9:  NH + NO <=> N2 + OH
k_f = 22000000
           * exp((-0.23) * tc[0]);
qf[20] *= k_f;
qr[20] *= k_f * exp(-(g_RT[0] - g_RT[7] + g_RT[17] - g_RT[18]));
// reaction 10:  H + NH2 <=> H2 + NH
k_f = 40000000
           * exp(-(1837.75229568549) * invT);
qf[21] *= k_f;
qr[21] *= k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[16] - g_RT[17]));
// reaction 11:  NH2 + O <=> H + HNO
k_f = 660000000
           * exp((-0.5) * tc[0]);
qf[22] *= k_f;
qr[22] *= k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[13] + g_RT[16]));
// reaction 12:  NH2 + O2 <=> H2NO + O
k_f = 260000
           * exp((0.4872) * tc[0] - (14618.4441416271) * invT);
qf[23] *= k_f;
qr[23] *= k_f * exp(-(g_RT[2] - g_RT[6] + g_RT[16] - g_RT[19]));
// reaction 13:  NH2 + OH <=> H2O + NH
k_f = 4
           * exp((2) * tc[0] - (503.93626563682) * invT);
qf[24] *= k_f;
qr[24] *= k_f * exp(-(g_RT[7] - g_RT[9] + g_RT[16] - g_RT[17]));
// reaction 14:  N + NH2 <=> 2 H + N2
k_f = 70000000
           ;
qf[25] *= k_f;
qr[25] *= k_f * exp(-(-2.000000*g_RT[5] + g_RT[14] + g_RT[16] - g_RT[18])) * (refCinv);
// reaction 15:  NH2 + NO <=> H2O + N2
k_f = 280000000000000
           * exp((-2.654) * tc[0] - (633.046565582337) * invT);
qf[26] *= k_f;
qr[26] *= k_f * exp(-(g_RT[0] - g_RT[9] + g_RT[16] - g_RT[18]));
// reaction 16:  NH2 + NO <=> N2H + OH
k_f = 31000000
           * exp((-0.48) * tc[0] - (593.795665649569) * invT);
qf[27] *= k_f;
qr[27] *= k_f * exp(-(g_RT[0] - g_RT[7] - g_RT[15] + g_RT[16]));
// reaction 17:  NH3 + M <=> H + NH2 + M
k_f = 22000000000
           * exp(-(47026.2214081167) * invT);
Corr  = mixture;
qf[5] *= Corr * k_f;
qr[5] *= Corr * k_f * exp(-(-g_RT[5] + g_RT[12] - g_RT[16])) * (refCinv);
// reaction 18:  H + NH3 <=> H2 + NH2
k_f = 0.64
           * exp((2.39) * tc[0] - (5123.57093322397) * invT);
qf[28] *= k_f;
qr[28] *= k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[12] - g_RT[16]));
// reaction 19:  NH3 + O <=> NH2 + OH
k_f = 9.4
           * exp((1.94) * tc[0] - (3253.35109826075) * invT);
qf[29] *= k_f;
qr[29] *= k_f * exp(-(g_RT[6] - g_RT[7] + g_RT[12] - g_RT[16]));
// reaction 20:  NH3 + OH <=> H2O + NH2
k_f = 2.04
           * exp((2.04) * tc[0] - (285.042048178425) * invT);
qf[30] *= k_f;
qr[30] *= k_f * exp(-(g_RT[7] - g_RT[9] + g_RT[12] - g_RT[16]));
// reaction 21:  N2H + O2 <=> HO2 + N2
k_f = 200000000
           ;
qf[31] *= k_f;
qr[31] *= k_f * exp(-(g_RT[2] - g_RT[8] + g_RT[15] - g_RT[18]));
// reaction 22:  N2H (+M) <=> H + N2 (+M)
k_f = 65000000
           ;
Corr  = mixture;
redP = Corr / k_f * 50000000 
           ;
Corr = redP / (1. + redP);
qf[2] *= Corr * k_f;
qr[2] *= Corr * k_f * exp(-(-g_RT[5] + g_RT[15] - g_RT[18])) * (refCinv);
// reaction 23:  H + N2H <=> H2 + N2
k_f = 100000000
           ;
qf[32] *= k_f;
qr[32] *= k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[15] - g_RT[18]));
// reaction 24:  N2H + O <=> H + N2O
k_f = 100000000
           ;
qf[33] *= k_f;
qr[33] *= k_f * exp(-(-g_RT[1] - g_RT[5] + g_RT[6] + g_RT[15]));
// reaction 25:  N2H + OH <=> H2O + N2
k_f = 50000000
           ;
qf[34] *= k_f;
qr[34] *= k_f * exp(-(g_RT[7] - g_RT[9] + g_RT[15] - g_RT[18]));
// reaction 26:  H + NO (+M) <=> HNO (+M)
k_f = 1500000000
           * exp((-0.4) * tc[0]);
Corr  = mixture + (-0.5)*sc[4] + (4)*sc[9];
redP = Corr / k_f * 430 
           * exp(0.206  * tc[0] - (-782.486818826365) *invT);
Corr = redP / (1. + redP);
qf[3] *= Corr * k_f;
qr[3] *= Corr * k_f * exp(-(g_RT[0] + g_RT[5] - g_RT[13])) * (refC);
// reaction 27:  H + HNO <=> H2 + NO
k_f = 440000
           * exp((0.72) * tc[0] - (327.141154439648) * invT);
qf[35] *= k_f;
qr[35] *= k_f * exp(-(-g_RT[0] - g_RT[3] + g_RT[5] + g_RT[13]));
// reaction 28:  HNO + OH <=> H2O + NO
k_f = 36000000
           ;
qf[36] *= k_f;
qr[36] *= k_f * exp(-(-g_RT[0] + g_RT[7] - g_RT[9] + g_RT[13]));
// reaction 29:  N2O (+M) <=> N2 + O (+M)
k_f = 800000000000
           * exp(-(31511.1760043586) * invT);
Corr  = mixture;
redP = Corr / k_f * 200000000 
           * exp(- (28504.3859758422) *invT);
Corr = redP / (1. + redP);
qf[4] *= Corr * k_f;
qr[4] *= Corr * k_f * exp(-(g_RT[1] - g_RT[6] - g_RT[18])) * (refCinv);
// reaction 30:  H + N2O <=> N2 + OH
k_f = 33100
           * exp(-(2561.37282894602) * invT);
qf[37] *= k_f;
qr[37] *= k_f * exp(-(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[18]));
// reaction 31:  H + N2O <=> N2 + OH
k_f = 783000000
           * exp(-(9757.37114995351) * invT);
qf[38] *= k_f;
qr[38] *= k_f * exp(-(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[18]));
// reaction 32:  N2O + O <=> 2 NO
k_f = 91500000
           * exp(-(13935.5791261301) * invT);
qf[39] *= k_f;
qr[39] *= k_f * exp(-(-2.000000*g_RT[0] + g_RT[1] + g_RT[6]));
// reaction 33:  N2O + OH <=> HO2 + N2
k_f = 20000000
           * exp(-(20128.6666321888) * invT);
qf[40] *= k_f;
qr[40] *= k_f * exp(-(g_RT[1] + g_RT[7] - g_RT[8] - g_RT[18]));
// reaction 34:  NO2 + M <=> NO + O + M
k_f = 11000000000
           * exp(-(33194.9792254745) * invT);
qf[6] *= k_f;
qr[6] *= k_f * exp(-(-g_RT[0] - g_RT[6] + g_RT[11])) * (refCinv);
// reaction 35:  HO2 + NO <=> NO2 + OH
k_f = 2100000
           * exp(-(-241.745286252587) * invT);
qf[41] *= k_f;
qr[41] *= k_f * exp(-(g_RT[0] - g_RT[7] + g_RT[8] - g_RT[11]));
// reaction 36:  H + NO2 <=> NO + OH
k_f = 350000000
           * exp(-(755.308086706252) * invT);
qf[42] *= k_f;
qr[42] *= k_f * exp(-(-g_RT[0] + g_RT[5] - g_RT[7] + g_RT[11]));
// reaction 37:  NO2 + O <=> NO + O2
k_f = 10000000
           * exp(-(301.879677816251) * invT);
qf[43] *= k_f;
qr[43] *= k_f * exp(-(-g_RT[0] - g_RT[2] + g_RT[6] + g_RT[11]));
// reaction 38:  H2NO + O <=> HNO + OH
k_f = 30
           * exp((2) * tc[0] - (1006.43333160944) * invT);
qf[44] *= k_f;
qr[44] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[19]));
// reaction 39:  H2NO + O2 <=> HNO + HO2
k_f = 3000000
           * exp(-(12580.416645118) * invT);
qf[45] *= k_f;
qr[45] *= k_f * exp(-(g_RT[2] - g_RT[8] - g_RT[13] + g_RT[19]));
// reaction 40:  H2NO + HO2 <=> H2O2 + HNO
k_f = 0.029
           * exp((2.69) * tc[0] - (-805.146665287552) * invT);
qf[46] *= k_f;
qr[46] *= k_f * exp(-(g_RT[8] - g_RT[10] - g_RT[13] + g_RT[19]));
// reaction 41:  H + O2 <=> O + OH
k_f = 35200000000
           * exp((-0.7) * tc[0] - (8589.80280978675) * invT);
qf[47] *= k_f;
qr[47] *= k_f * exp(-(g_RT[2] + g_RT[5] - g_RT[6] - g_RT[7]));
// reaction 42:  H2 + O <=> H + OH
k_f = 0.0506
           * exp((2.67) * tc[0] - (3165.54985441114) * invT);
qf[48] *= k_f;
qr[48] *= k_f * exp(-(g_RT[3] - g_RT[5] + g_RT[6] - g_RT[7]));
// reaction 43:  H2 + OH <=> H + H2O
k_f = 1170
           * exp((1.3) * tc[0] - (1829.33348086658) * invT);
qf[49] *= k_f;
qr[49] *= k_f * exp(-(g_RT[3] - g_RT[5] + g_RT[7] - g_RT[9]));
// reaction 44:  H2O + O <=> 2 OH
k_f = 0.7
           * exp((2.33) * tc[0] - (7320.93695479349) * invT);
qf[50] *= k_f;
qr[50] *= k_f * exp(-(g_RT[6] - 2.000000*g_RT[7] + g_RT[9]));
// reaction 45:  2 H + M <=> H2 + M
k_f = 1300000
           * exp((-1) * tc[0]);
Corr  = mixture + (1.5)*sc[3] + (-0.5)*sc[4] + (11)*sc[9] + (-0.5)*sc[20];
qf[7] *= Corr * k_f;
qr[7] *= Corr * k_f * exp(-(-g_RT[3] + 2.000000*g_RT[5])) * (refC);
// reaction 46:  H + OH + M <=> H2O + M
k_f = 40000000000
           * exp((-2) * tc[0]);
Corr  = mixture + (1.5)*sc[3] + (-0.62)*sc[4] + (11)*sc[9] + (-0.62)*sc[20];
qf[8] *= Corr * k_f;
qr[8] *= Corr * k_f * exp(-(g_RT[5] + g_RT[7] - g_RT[9])) * (refC);
// reaction 47:  2 O + M <=> O2 + M
k_f = 6170
           * exp((-0.5) * tc[0]);
Corr  = mixture + (1.5)*sc[3] + (-0.8)*sc[4] + (11)*sc[9] + (-0.8)*sc[20];
qf[9] *= Corr * k_f;
qr[9] *= Corr * k_f * exp(-(-g_RT[2] + 2.000000*g_RT[6])) * (refC);
// reaction 48:  H + O + M <=> OH + M
k_f = 4710000
           * exp((-1) * tc[0]);
Corr  = mixture + (1.5)*sc[3] + (-0.25)*sc[4] + (11)*sc[9] + (-0.25)*sc[20];
qf[10] *= Corr * k_f;
qr[10] *= Corr * k_f * exp(-(g_RT[5] + g_RT[6] - g_RT[7])) * (refC);
// reaction 49:  H + O2 (+M) <=> HO2 (+M)
k_f = 4650000
           * exp((0.44) * tc[0]);
Corr  = mixture + (1.5)*sc[3] + (-0.3)*sc[4] + (15)*sc[9] + (-0.3)*sc[20];
redP = Corr / k_f * 57500000 
           * exp(-1.4  * tc[0]);
F = redP / (1.0 + redP);
logPred = log10(redP);
logFcent = log10(
    (0.5)*exp(-tc[1] * 1e+30)
    + 0.5 * exp(-tc[1] * 1e-30)
    + 0.0);
troe_c = -0.4 - 0.67 * logFcent;
troe_n = 0.75 - 1.27 * logFcent;
troe = (troe_c + logPred) / (troe_n - 0.14*(troe_c + logPred));
F_troe = exp(M_LN10 * logFcent / (1.0 + troe*troe));
Corr = F * F_troe;
qf[0] *= Corr * k_f;
qr[0] *= Corr * k_f * exp(-(g_RT[2] + g_RT[5] - g_RT[8])) * (refC);
// reaction 50:  H + HO2 <=> 2 OH
k_f = 70800000
           * exp(-(148.413691245786) * invT);
qf[51] *= k_f;
qr[51] *= k_f * exp(-(g_RT[5] - 2.000000*g_RT[7] + g_RT[8]));
// reaction 51:  H + HO2 <=> H2 + O2
k_f = 16600000
           * exp(-(414.096994290704) * invT);
qf[52] *= k_f;
qr[52] *= k_f * exp(-(-g_RT[2] - g_RT[3] + g_RT[5] + g_RT[8]));
// reaction 52:  H + HO2 <=> H2O + O
k_f = 31000000
           * exp(-(865.955367183394) * invT);
qf[53] *= k_f;
qr[53] *= k_f * exp(-(g_RT[5] - g_RT[6] + g_RT[8] - g_RT[9]));
// reaction 53:  HO2 + O <=> O2 + OH
k_f = 20000000
           ;
qf[54] *= k_f;
qr[54] *= k_f * exp(-(-g_RT[2] + g_RT[6] - g_RT[7] + g_RT[8]));
// reaction 54:  HO2 + OH <=> H2O + O2
k_f = 7000000
           * exp(-(-550.846123223136) * invT);
qf[55] *= k_f;
qr[55] *= k_f * exp(-(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9]));
// reaction 55:  HO2 + OH <=> H2O + O2
k_f = 450000000
           * exp(-(5500.02228874582) * invT);
qf[56] *= k_f;
qr[56] *= k_f * exp(-(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9]));
// reaction 56:  2 OH (+M) <=> H2O2 (+M)
k_f = 95500000
           * exp((-0.27) * tc[0]);
Corr  = mixture + (1.5)*sc[3] + (-0.3)*sc[4] + (5)*sc[9] + (5)*sc[10] + (-0.6)*sc[20];
redP = Corr / k_f * 27600000000000 
           * exp(-3.2  * tc[0]);
F = redP / (1.0 + redP);
logPred = log10(redP);
logFcent = log10(
    (0.43)*exp(-tc[1] * 1e-30)
    + 0.57 * exp(-tc[1] * 1e+30)
    + 0.0);
troe_c = -0.4 - 0.67 * logFcent;
troe_n = 0.75 - 1.27 * logFcent;
troe = (troe_c + logPred) / (troe_n - 0.14*(troe_c + logPred));
F_troe = exp(M_LN10 * logFcent / (1.0 + troe*troe));
Corr = F * F_troe;
qf[1] *= Corr * k_f;
qr[1] *= Corr * k_f * exp(-(2.000000*g_RT[7] - g_RT[10])) * (refC);
// reaction 57:  2 HO2 <=> H2O2 + O2
k_f = 103000000
           * exp(-(5556.55364898232) * invT);
qf[57] *= k_f;
qr[57] *= k_f * exp(-(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10]));
// reaction 58:  2 HO2 <=> H2O2 + O2
k_f = 194000
           * exp(-(-709.002089118902) * invT);
qf[58] *= k_f;
qr[58] *= k_f * exp(-(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10]));
// reaction 59:  H + H2O2 <=> H2 + HO2
k_f = 23000000
           * exp(-(4000.59765398081) * invT);
qf[59] *= k_f;
qr[59] *= k_f * exp(-(-g_RT[3] + g_RT[5] - g_RT[8] + g_RT[10]));
// reaction 60:  H + H2O2 <=> H2O + OH
k_f = 10000000
           * exp(-(1804.07703640984) * invT);
qf[60] *= k_f;
qr[60] *= k_f * exp(-(g_RT[5] - g_RT[7] - g_RT[9] + g_RT[10]));
// reaction 61:  H2O2 + OH <=> H2O + HO2
k_f = 1740000
           * exp(-(721.627795263942) * invT);
qf[61] *= k_f;
qr[61] *= k_f * exp(-(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10]));
// reaction 62:  H2O2 + OH <=> H2O + HO2
k_f = 75900000
           * exp(-(3659.86461739778) * invT);
qf[62] *= k_f;
qr[62] *= k_f * exp(-(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10]));
// reaction 63:  H2O2 + O <=> HO2 + OH
k_f = 9.63
           * exp((2) * tc[0] - (2008.53899989296) * invT);
qf[63] *= k_f;
qr[63] *= k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[8] + g_RT[10]));


return;
}

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void  productionRate(amrex::Real * wdot, amrex::Real * sc, amrex::Real T)
{
const amrex::Real tc[5] = { log(T), T, T*T, T*T*T, T*T*T*T };// temperature cache
const amrex::Real invT = 1.0 / tc[1];

// reference concentration: P_atm / (RT) in inverse mol/m^3
const amrex::Real refC = 101325 / 8.31446 * invT;
const amrex::Real refCinv = 1 / refC;

for (int i = 0; i < 21; ++i) {
wdot[i] = 0.0;
}

// compute the mixture concentration
amrex::Real mixture = 0.0;
for (int i = 0; i < 21; ++i) {
mixture += sc[i];
}

// compute the Gibbs free energy
amrex::Real g_RT[21];
gibbs(g_RT, tc);

{
// reaction 49:  H + O2 (+M) <=> HO2 (+M)
const amrex::Real k_f = 4650000
           * exp((0.44) * tc[0]);
amrex::Real Corr = mixture + (1.5)*sc[3] + (-0.3)*sc[4] + (15)*sc[9] + (-0.3)*sc[20];
const amrex::Real redP = Corr / k_f * 57500000 
           * exp(-1.4 * tc[0]);
const amrex::Real F = redP / (1.0 + redP);
const amrex::Real logPred = log10(redP);
const amrex::Real logFcent = log10(
    0.5 * exp(-tc[1] * 1e+30)
    + 0.5 * exp(-tc[1] * 1e-30)
    + 0.0);
const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
const amrex::Real troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
const amrex::Real F_troe = exp(M_LN10 *logFcent / (1.0 + troe * troe));
Corr = F * F_troe;
const amrex::Real qf = Corr * k_f * (sc[2]*sc[5]);
const amrex::Real qr = Corr * k_f * exp(-(g_RT[2] + g_RT[5] - g_RT[8])) * (refC) * (sc[8]);
const amrex::Real qdot = qf - qr;
wdot[2] -= qdot;
wdot[5] -= qdot;
wdot[8] += qdot;
}

{
// reaction 56:  2 OH (+M) <=> H2O2 (+M)
const amrex::Real k_f = 95500000
           * exp((-0.27) * tc[0]);
amrex::Real Corr = mixture + (1.5)*sc[3] + (-0.3)*sc[4] + (5)*sc[9] + (5)*sc[10] + (-0.6)*sc[20];
const amrex::Real redP = Corr / k_f * 27600000000000 
           * exp(-3.2 * tc[0]);
const amrex::Real F = redP / (1.0 + redP);
const amrex::Real logPred = log10(redP);
const amrex::Real logFcent = log10(
    0.43 * exp(-tc[1] * 1e-30)
    + 0.57 * exp(-tc[1] * 1e+30)
    + 0.0);
const amrex::Real troe_c = -0.4 - 0.67 * logFcent;
const amrex::Real troe_n = 0.75 - 1.27 * logFcent;
const amrex::Real troe = (troe_c + logPred) / (troe_n - 0.14 * (troe_c + logPred));
const amrex::Real F_troe = exp(M_LN10 *logFcent / (1.0 + troe * troe));
Corr = F * F_troe;
const amrex::Real qf = Corr * k_f * ((sc[7] * sc[7]));
const amrex::Real qr = Corr * k_f * exp(-(2.000000*g_RT[7] - g_RT[10])) * (refC) * (sc[10]);
const amrex::Real qdot = qf - qr;
wdot[7] -= 2.000000 * qdot;
wdot[10] += qdot;
}

{
// reaction 22:  N2H (+M) <=> H + N2 (+M)
const amrex::Real k_f = 65000000
           ;
amrex::Real Corr = mixture;
const amrex::Real redP = Corr / k_f * 50000000 
           ;
Corr = redP / (1.0 + redP);
const amrex::Real qf = Corr * k_f * (sc[15]);
const amrex::Real qr = Corr * k_f * exp(-(-g_RT[5] + g_RT[15] - g_RT[18])) * (refCinv) * (sc[5]*sc[18]);
const amrex::Real qdot = qf - qr;
wdot[5] += qdot;
wdot[15] -= qdot;
wdot[18] += qdot;
}

{
// reaction 26:  H + NO (+M) <=> HNO (+M)
const amrex::Real k_f = 1500000000
           * exp((-0.4) * tc[0]);
amrex::Real Corr = mixture + (-0.5)*sc[4] + (4)*sc[9];
const amrex::Real redP = Corr / k_f * 430 
           * exp(0.206 * tc[0] - -782.486818826365 * invT);
Corr = redP / (1.0 + redP);
const amrex::Real qf = Corr * k_f * (sc[0]*sc[5]);
const amrex::Real qr = Corr * k_f * exp(-(g_RT[0] + g_RT[5] - g_RT[13])) * (refC) * (sc[13]);
const amrex::Real qdot = qf - qr;
wdot[0] -= qdot;
wdot[5] -= qdot;
wdot[13] += qdot;
}

{
// reaction 29:  N2O (+M) <=> N2 + O (+M)
const amrex::Real k_f = 800000000000
           * exp(-(31511.1760043586) * invT);
amrex::Real Corr = mixture;
const amrex::Real redP = Corr / k_f * 200000000 
           * exp(- 28504.3859758422 * invT);
Corr = redP / (1.0 + redP);
const amrex::Real qf = Corr * k_f * (sc[1]);
const amrex::Real qr = Corr * k_f * exp(-(g_RT[1] - g_RT[6] - g_RT[18])) * (refCinv) * (sc[6]*sc[18]);
const amrex::Real qdot = qf - qr;
wdot[1] -= qdot;
wdot[6] += qdot;
wdot[18] += qdot;
}

{
// reaction 17:  NH3 + M <=> H + NH2 + M
const amrex::Real k_f = 22000000000
           * exp(-(47026.2214081167) * invT);
const amrex::Real Corr = mixture;
const amrex::Real qf = Corr * k_f * (sc[12]);
const amrex::Real qr = Corr * k_f * exp(-(-g_RT[5] + g_RT[12] - g_RT[16])) * (refCinv) * (sc[5]*sc[16]);
const amrex::Real qdot = qf - qr;
wdot[5] += qdot;
wdot[12] -= qdot;
wdot[16] += qdot;
}

{
// reaction 34:  NO2 + M <=> NO + O + M
const amrex::Real k_f = 11000000000
           * exp(-(33194.9792254745) * invT);
const amrex::Real Corr = mixture + (15.25)*sc[9];
const amrex::Real qf = Corr * k_f * (sc[11]);
const amrex::Real qr = Corr * k_f * exp(-(-g_RT[0] - g_RT[6] + g_RT[11])) * (refCinv) * (sc[0]*sc[6]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[6] += qdot;
wdot[11] -= qdot;
}

{
// reaction 45:  2 H + M <=> H2 + M
const amrex::Real k_f = 1300000
           * exp((-1) * tc[0]);
const amrex::Real Corr = mixture + (1.5)*sc[3] + (-0.5)*sc[4] + (11)*sc[9] + (-0.5)*sc[20];
const amrex::Real qf = Corr * k_f * ((sc[5] * sc[5]));
const amrex::Real qr = Corr * k_f * exp(-(-g_RT[3] + 2.000000*g_RT[5])) * (refC) * (sc[3]);
const amrex::Real qdot = qf - qr;
wdot[3] += qdot;
wdot[5] -= 2.000000 * qdot;
}

{
// reaction 46:  H + OH + M <=> H2O + M
const amrex::Real k_f = 40000000000
           * exp((-2) * tc[0]);
const amrex::Real Corr = mixture + (1.5)*sc[3] + (-0.62)*sc[4] + (11)*sc[9] + (-0.62)*sc[20];
const amrex::Real qf = Corr * k_f * (sc[5]*sc[7]);
const amrex::Real qr = Corr * k_f * exp(-(g_RT[5] + g_RT[7] - g_RT[9])) * (refC) * (sc[9]);
const amrex::Real qdot = qf - qr;
wdot[5] -= qdot;
wdot[7] -= qdot;
wdot[9] += qdot;
}

{
// reaction 47:  2 O + M <=> O2 + M
const amrex::Real k_f = 6170
           * exp((-0.5) * tc[0]);
const amrex::Real Corr = mixture + (1.5)*sc[3] + (-0.8)*sc[4] + (11)*sc[9] + (-0.8)*sc[20];
const amrex::Real qf = Corr * k_f * ((sc[6] * sc[6]));
const amrex::Real qr = Corr * k_f * exp(-(-g_RT[2] + 2.000000*g_RT[6])) * (refC) * (sc[2]);
const amrex::Real qdot = qf - qr;
wdot[2] += qdot;
wdot[6] -= 2.000000 * qdot;
}

{
// reaction 48:  H + O + M <=> OH + M
const amrex::Real k_f = 4710000
           * exp((-1) * tc[0]);
const amrex::Real Corr = mixture + (1.5)*sc[3] + (-0.25)*sc[4] + (11)*sc[9] + (-0.25)*sc[20];
const amrex::Real qf = Corr * k_f * (sc[5]*sc[6]);
const amrex::Real qr = Corr * k_f * exp(-(g_RT[5] + g_RT[6] - g_RT[7])) * (refC) * (sc[7]);
const amrex::Real qdot = qf - qr;
wdot[5] -= qdot;
wdot[6] -= qdot;
wdot[7] += qdot;
}

{
// reaction 0:  N2 + O <=> N + NO
const amrex::Real k_f = 14700000
           * exp((0.3) * tc[0] - (37885.5775072734) * invT);
const amrex::Real qf = k_f * (sc[6]*sc[18]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] + g_RT[6] - g_RT[14] + g_RT[18])) * (sc[0]*sc[14]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[6] -= qdot;
wdot[14] += qdot;
wdot[18] -= qdot;
}

{
// reaction 1:  N + O2 <=> NO + O
const amrex::Real k_f = 6400
           * exp((1) * tc[0] - (3163.1444787486) * invT);
const amrex::Real qf = k_f * (sc[2]*sc[14]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] + g_RT[2] - g_RT[6] + g_RT[14])) * (sc[0]*sc[6]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[2] -= qdot;
wdot[6] += qdot;
wdot[14] -= qdot;
}

{
// reaction 2:  N + OH <=> H + NO
const amrex::Real k_f = 38000000
           ;
const amrex::Real qf = k_f * (sc[7]*sc[14]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[7] + g_RT[14])) * (sc[0]*sc[5]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[5] += qdot;
wdot[7] -= qdot;
wdot[14] -= qdot;
}

{
// reaction 3:  H + NH <=> H2 + N
const amrex::Real k_f = 100000000
           ;
const amrex::Real qf = k_f * (sc[5]*sc[17]);
const amrex::Real qr = k_f * exp(-(-g_RT[3] + g_RT[5] - g_RT[14] + g_RT[17])) * (sc[3]*sc[14]);
const amrex::Real qdot = qf - qr;
wdot[3] += qdot;
wdot[5] -= qdot;
wdot[14] += qdot;
wdot[17] -= qdot;
}

{
// reaction 4:  NH + O <=> H + NO
const amrex::Real k_f = 92000000
           ;
const amrex::Real qf = k_f * (sc[6]*sc[17]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] - g_RT[5] + g_RT[6] + g_RT[17])) * (sc[0]*sc[5]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[5] += qdot;
wdot[6] -= qdot;
wdot[17] -= qdot;
}

{
// reaction 5:  NH + OH <=> H + HNO
const amrex::Real k_f = 40000000
           ;
const amrex::Real qf = k_f * (sc[7]*sc[17]);
const amrex::Real qr = k_f * exp(-(-g_RT[5] + g_RT[7] - g_RT[13] + g_RT[17])) * (sc[5]*sc[13]);
const amrex::Real qdot = qf - qr;
wdot[5] += qdot;
wdot[7] -= qdot;
wdot[13] += qdot;
wdot[17] -= qdot;
}

{
// reaction 6:  NH + OH <=> H2O + N
const amrex::Real k_f = 500000
           * exp((0.5) * tc[0] - (1006.67487560903) * invT);
const amrex::Real qf = k_f * (sc[7]*sc[17]);
const amrex::Real qr = k_f * exp(-(g_RT[7] - g_RT[9] - g_RT[14] + g_RT[17])) * (sc[9]*sc[14]);
const amrex::Real qdot = qf - qr;
wdot[7] -= qdot;
wdot[9] += qdot;
wdot[14] += qdot;
wdot[17] -= qdot;
}

{
// reaction 7:  NH + O2 <=> HNO + O
const amrex::Real k_f = 0.46
           * exp((2) * tc[0] - (3271.39141572985) * invT);
const amrex::Real qf = k_f * (sc[2]*sc[17]);
const amrex::Real qr = k_f * exp(-(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[17])) * (sc[6]*sc[13]);
const amrex::Real qdot = qf - qr;
wdot[2] -= qdot;
wdot[6] += qdot;
wdot[13] += qdot;
wdot[17] -= qdot;
}

{
// reaction 8:  NH + NO <=> H + N2O
const amrex::Real k_f = 180000000
           * exp((-0.351) * tc[0] - (-122.784866456352) * invT);
const amrex::Real qf = k_f * (sc[0]*sc[17]);
const amrex::Real qr = k_f * exp(-(g_RT[0] - g_RT[1] - g_RT[5] + g_RT[17])) * (sc[1]*sc[5]);
const amrex::Real qdot = qf - qr;
wdot[0] -= qdot;
wdot[1] += qdot;
wdot[5] += qdot;
wdot[17] -= qdot;
}

{
// reaction 9:  NH + NO <=> N2 + OH
const amrex::Real k_f = 22000000
           * exp((-0.23) * tc[0]);
const amrex::Real qf = k_f * (sc[0]*sc[17]);
const amrex::Real qr = k_f * exp(-(g_RT[0] - g_RT[7] + g_RT[17] - g_RT[18])) * (sc[7]*sc[18]);
const amrex::Real qdot = qf - qr;
wdot[0] -= qdot;
wdot[7] += qdot;
wdot[17] -= qdot;
wdot[18] += qdot;
}

{
// reaction 10:  H + NH2 <=> H2 + NH
const amrex::Real k_f = 40000000
           * exp(-(1837.75229568549) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[16]);
const amrex::Real qr = k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[16] - g_RT[17])) * (sc[3]*sc[17]);
const amrex::Real qdot = qf - qr;
wdot[3] += qdot;
wdot[5] -= qdot;
wdot[16] -= qdot;
wdot[17] += qdot;
}

{
// reaction 11:  NH2 + O <=> H + HNO
const amrex::Real k_f = 660000000
           * exp((-0.5) * tc[0]);
const amrex::Real qf = k_f * (sc[6]*sc[16]);
const amrex::Real qr = k_f * exp(-(-g_RT[5] + g_RT[6] - g_RT[13] + g_RT[16])) * (sc[5]*sc[13]);
const amrex::Real qdot = qf - qr;
wdot[5] += qdot;
wdot[6] -= qdot;
wdot[13] += qdot;
wdot[16] -= qdot;
}

{
// reaction 12:  NH2 + O2 <=> H2NO + O
const amrex::Real k_f = 260000
           * exp((0.4872) * tc[0] - (14618.4441416271) * invT);
const amrex::Real qf = k_f * (sc[2]*sc[16]);
const amrex::Real qr = k_f * exp(-(g_RT[2] - g_RT[6] + g_RT[16] - g_RT[19])) * (sc[6]*sc[19]);
const amrex::Real qdot = qf - qr;
wdot[2] -= qdot;
wdot[6] += qdot;
wdot[16] -= qdot;
wdot[19] += qdot;
}

{
// reaction 13:  NH2 + OH <=> H2O + NH
const amrex::Real k_f = 4
           * exp((2) * tc[0] - (503.93626563682) * invT);
const amrex::Real qf = k_f * (sc[7]*sc[16]);
const amrex::Real qr = k_f * exp(-(g_RT[7] - g_RT[9] + g_RT[16] - g_RT[17])) * (sc[9]*sc[17]);
const amrex::Real qdot = qf - qr;
wdot[7] -= qdot;
wdot[9] += qdot;
wdot[16] -= qdot;
wdot[17] += qdot;
}

{
// reaction 14:  N + NH2 <=> 2 H + N2
const amrex::Real k_f = 70000000
           ;
const amrex::Real qf = k_f * (sc[14]*sc[16]);
const amrex::Real qr = k_f * exp(-(-2.000000*g_RT[5] + g_RT[14] + g_RT[16] - g_RT[18])) * (refCinv) * ((sc[5] * sc[5])*sc[18]);
const amrex::Real qdot = qf - qr;
wdot[5] += 2.000000 * qdot;
wdot[14] -= qdot;
wdot[16] -= qdot;
wdot[18] += qdot;
}

{
// reaction 15:  NH2 + NO <=> H2O + N2
const amrex::Real k_f = 280000000000000
           * exp((-2.654) * tc[0] - (633.046565582337) * invT);
const amrex::Real qf = k_f * (sc[0]*sc[16]);
const amrex::Real qr = k_f * exp(-(g_RT[0] - g_RT[9] + g_RT[16] - g_RT[18])) * (sc[9]*sc[18]);
const amrex::Real qdot = qf - qr;
wdot[0] -= qdot;
wdot[9] += qdot;
wdot[16] -= qdot;
wdot[18] += qdot;
}

{
// reaction 16:  NH2 + NO <=> N2H + OH
const amrex::Real k_f = 31000000
           * exp((-0.48) * tc[0] - (593.795665649569) * invT);
const amrex::Real qf = k_f * (sc[0]*sc[16]);
const amrex::Real qr = k_f * exp(-(g_RT[0] - g_RT[7] - g_RT[15] + g_RT[16])) * (sc[7]*sc[15]);
const amrex::Real qdot = qf - qr;
wdot[0] -= qdot;
wdot[7] += qdot;
wdot[15] += qdot;
wdot[16] -= qdot;
}

{
// reaction 18:  H + NH3 <=> H2 + NH2
const amrex::Real k_f = 0.64
           * exp((2.39) * tc[0] - (5123.57093322397) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[12]);
const amrex::Real qr = k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[12] - g_RT[16])) * (sc[3]*sc[16]);
const amrex::Real qdot = qf - qr;
wdot[3] += qdot;
wdot[5] -= qdot;
wdot[12] -= qdot;
wdot[16] += qdot;
}

{
// reaction 19:  NH3 + O <=> NH2 + OH
const amrex::Real k_f = 9.4
           * exp((1.94) * tc[0] - (3253.35109826075) * invT);
const amrex::Real qf = k_f * (sc[6]*sc[12]);
const amrex::Real qr = k_f * exp(-(g_RT[6] - g_RT[7] + g_RT[12] - g_RT[16])) * (sc[7]*sc[16]);
const amrex::Real qdot = qf - qr;
wdot[6] -= qdot;
wdot[7] += qdot;
wdot[12] -= qdot;
wdot[16] += qdot;
}

{
// reaction 20:  NH3 + OH <=> H2O + NH2
const amrex::Real k_f = 2.04
           * exp((2.04) * tc[0] - (285.042048178425) * invT);
const amrex::Real qf = k_f * (sc[7]*sc[12]);
const amrex::Real qr = k_f * exp(-(g_RT[7] - g_RT[9] + g_RT[12] - g_RT[16])) * (sc[9]*sc[16]);
const amrex::Real qdot = qf - qr;
wdot[7] -= qdot;
wdot[9] += qdot;
wdot[12] -= qdot;
wdot[16] += qdot;
}

{
// reaction 21:  N2H + O2 <=> HO2 + N2
const amrex::Real k_f = 200000000
           ;
const amrex::Real qf = k_f * (sc[2]*sc[15]);
const amrex::Real qr = k_f * exp(-(g_RT[2] - g_RT[8] + g_RT[15] - g_RT[18])) * (sc[8]*sc[18]);
const amrex::Real qdot = qf - qr;
wdot[2] -= qdot;
wdot[8] += qdot;
wdot[15] -= qdot;
wdot[18] += qdot;
}

{
// reaction 23:  H + N2H <=> H2 + N2
const amrex::Real k_f = 100000000
           ;
const amrex::Real qf = k_f * (sc[5]*sc[15]);
const amrex::Real qr = k_f * exp(-(-g_RT[3] + g_RT[5] + g_RT[15] - g_RT[18])) * (sc[3]*sc[18]);
const amrex::Real qdot = qf - qr;
wdot[3] += qdot;
wdot[5] -= qdot;
wdot[15] -= qdot;
wdot[18] += qdot;
}

{
// reaction 24:  N2H + O <=> H + N2O
const amrex::Real k_f = 100000000
           ;
const amrex::Real qf = k_f * (sc[6]*sc[15]);
const amrex::Real qr = k_f * exp(-(-g_RT[1] - g_RT[5] + g_RT[6] + g_RT[15])) * (sc[1]*sc[5]);
const amrex::Real qdot = qf - qr;
wdot[1] += qdot;
wdot[5] += qdot;
wdot[6] -= qdot;
wdot[15] -= qdot;
}

{
// reaction 25:  N2H + OH <=> H2O + N2
const amrex::Real k_f = 50000000
           ;
const amrex::Real qf = k_f * (sc[7]*sc[15]);
const amrex::Real qr = k_f * exp(-(g_RT[7] - g_RT[9] + g_RT[15] - g_RT[18])) * (sc[9]*sc[18]);
const amrex::Real qdot = qf - qr;
wdot[7] -= qdot;
wdot[9] += qdot;
wdot[15] -= qdot;
wdot[18] += qdot;
}

{
// reaction 27:  H + HNO <=> H2 + NO
const amrex::Real k_f = 440000
           * exp((0.72) * tc[0] - (327.141154439648) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[13]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] - g_RT[3] + g_RT[5] + g_RT[13])) * (sc[0]*sc[3]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[3] += qdot;
wdot[5] -= qdot;
wdot[13] -= qdot;
}

{
// reaction 28:  HNO + OH <=> H2O + NO
const amrex::Real k_f = 36000000
           ;
const amrex::Real qf = k_f * (sc[7]*sc[13]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] + g_RT[7] - g_RT[9] + g_RT[13])) * (sc[0]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[7] -= qdot;
wdot[9] += qdot;
wdot[13] -= qdot;
}

{
// reaction 30:  H + N2O <=> N2 + OH
const amrex::Real k_f = 33100
           * exp(-(2561.37282894602) * invT);
const amrex::Real qf = k_f * (sc[1]*sc[5]);
const amrex::Real qr = k_f * exp(-(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[18])) * (sc[7]*sc[18]);
const amrex::Real qdot = qf - qr;
wdot[1] -= qdot;
wdot[5] -= qdot;
wdot[7] += qdot;
wdot[18] += qdot;
}

{
// reaction 31:  H + N2O <=> N2 + OH
const amrex::Real k_f = 783000000
           * exp(-(9757.37114995351) * invT);
const amrex::Real qf = k_f * (sc[1]*sc[5]);
const amrex::Real qr = k_f * exp(-(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[18])) * (sc[7]*sc[18]);
const amrex::Real qdot = qf - qr;
wdot[1] -= qdot;
wdot[5] -= qdot;
wdot[7] += qdot;
wdot[18] += qdot;
}

{
// reaction 32:  N2O + O <=> 2 NO
const amrex::Real k_f = 91500000
           * exp(-(13935.5791261301) * invT);
const amrex::Real qf = k_f * (sc[1]*sc[6]);
const amrex::Real qr = k_f * exp(-(-2.000000*g_RT[0] + g_RT[1] + g_RT[6])) * ((sc[0] * sc[0]));
const amrex::Real qdot = qf - qr;
wdot[0] += 2.000000 * qdot;
wdot[1] -= qdot;
wdot[6] -= qdot;
}

{
// reaction 33:  N2O + OH <=> HO2 + N2
const amrex::Real k_f = 20000000
           * exp(-(20128.6666321888) * invT);
const amrex::Real qf = k_f * (sc[1]*sc[7]);
const amrex::Real qr = k_f * exp(-(g_RT[1] + g_RT[7] - g_RT[8] - g_RT[18])) * (sc[8]*sc[18]);
const amrex::Real qdot = qf - qr;
wdot[1] -= qdot;
wdot[7] -= qdot;
wdot[8] += qdot;
wdot[18] += qdot;
}

{
// reaction 35:  HO2 + NO <=> NO2 + OH
const amrex::Real k_f = 2100000
           * exp(-(-241.745286252587) * invT);
const amrex::Real qf = k_f * (sc[0]*sc[8]);
const amrex::Real qr = k_f * exp(-(g_RT[0] - g_RT[7] + g_RT[8] - g_RT[11])) * (sc[7]*sc[11]);
const amrex::Real qdot = qf - qr;
wdot[0] -= qdot;
wdot[7] += qdot;
wdot[8] -= qdot;
wdot[11] += qdot;
}

{
// reaction 36:  H + NO2 <=> NO + OH
const amrex::Real k_f = 350000000
           * exp(-(755.308086706252) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[11]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] + g_RT[5] - g_RT[7] + g_RT[11])) * (sc[0]*sc[7]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[5] -= qdot;
wdot[7] += qdot;
wdot[11] -= qdot;
}

{
// reaction 37:  NO2 + O <=> NO + O2
const amrex::Real k_f = 10000000
           * exp(-(301.879677816251) * invT);
const amrex::Real qf = k_f * (sc[6]*sc[11]);
const amrex::Real qr = k_f * exp(-(-g_RT[0] - g_RT[2] + g_RT[6] + g_RT[11])) * (sc[0]*sc[2]);
const amrex::Real qdot = qf - qr;
wdot[0] += qdot;
wdot[2] += qdot;
wdot[6] -= qdot;
wdot[11] -= qdot;
}

{
// reaction 38:  H2NO + O <=> HNO + OH
const amrex::Real k_f = 30
           * exp((2) * tc[0] - (1006.43333160944) * invT);
const amrex::Real qf = k_f * (sc[6]*sc[19]);
const amrex::Real qr = k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[19])) * (sc[7]*sc[13]);
const amrex::Real qdot = qf - qr;
wdot[6] -= qdot;
wdot[7] += qdot;
wdot[13] += qdot;
wdot[19] -= qdot;
}

{
// reaction 39:  H2NO + O2 <=> HNO + HO2
const amrex::Real k_f = 3000000
           * exp(-(12580.416645118) * invT);
const amrex::Real qf = k_f * (sc[2]*sc[19]);
const amrex::Real qr = k_f * exp(-(g_RT[2] - g_RT[8] - g_RT[13] + g_RT[19])) * (sc[8]*sc[13]);
const amrex::Real qdot = qf - qr;
wdot[2] -= qdot;
wdot[8] += qdot;
wdot[13] += qdot;
wdot[19] -= qdot;
}

{
// reaction 40:  H2NO + HO2 <=> H2O2 + HNO
const amrex::Real k_f = 0.029
           * exp((2.69) * tc[0] - (-805.146665287552) * invT);
const amrex::Real qf = k_f * (sc[8]*sc[19]);
const amrex::Real qr = k_f * exp(-(g_RT[8] - g_RT[10] - g_RT[13] + g_RT[19])) * (sc[10]*sc[13]);
const amrex::Real qdot = qf - qr;
wdot[8] -= qdot;
wdot[10] += qdot;
wdot[13] += qdot;
wdot[19] -= qdot;
}

{
// reaction 41:  H + O2 <=> O + OH
const amrex::Real k_f = 35200000000
           * exp((-0.7) * tc[0] - (8589.80280978675) * invT);
const amrex::Real qf = k_f * (sc[2]*sc[5]);
const amrex::Real qr = k_f * exp(-(g_RT[2] + g_RT[5] - g_RT[6] - g_RT[7])) * (sc[6]*sc[7]);
const amrex::Real qdot = qf - qr;
wdot[2] -= qdot;
wdot[5] -= qdot;
wdot[6] += qdot;
wdot[7] += qdot;
}

{
// reaction 42:  H2 + O <=> H + OH
const amrex::Real k_f = 0.0506
           * exp((2.67) * tc[0] - (3165.54985441114) * invT);
const amrex::Real qf = k_f * (sc[3]*sc[6]);
const amrex::Real qr = k_f * exp(-(g_RT[3] - g_RT[5] + g_RT[6] - g_RT[7])) * (sc[5]*sc[7]);
const amrex::Real qdot = qf - qr;
wdot[3] -= qdot;
wdot[5] += qdot;
wdot[6] -= qdot;
wdot[7] += qdot;
}

{
// reaction 43:  H2 + OH <=> H + H2O
const amrex::Real k_f = 1170
           * exp((1.3) * tc[0] - (1829.33348086658) * invT);
const amrex::Real qf = k_f * (sc[3]*sc[7]);
const amrex::Real qr = k_f * exp(-(g_RT[3] - g_RT[5] + g_RT[7] - g_RT[9])) * (sc[5]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[3] -= qdot;
wdot[5] += qdot;
wdot[7] -= qdot;
wdot[9] += qdot;
}

{
// reaction 44:  H2O + O <=> 2 OH
const amrex::Real k_f = 0.7
           * exp((2.33) * tc[0] - (7320.93695479349) * invT);
const amrex::Real qf = k_f * (sc[6]*sc[9]);
const amrex::Real qr = k_f * exp(-(g_RT[6] - 2.000000*g_RT[7] + g_RT[9])) * ((sc[7] * sc[7]));
const amrex::Real qdot = qf - qr;
wdot[6] -= qdot;
wdot[7] += 2.000000 * qdot;
wdot[9] -= qdot;
}

{
// reaction 50:  H + HO2 <=> 2 OH
const amrex::Real k_f = 70800000
           * exp(-(148.413691245786) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[8]);
const amrex::Real qr = k_f * exp(-(g_RT[5] - 2.000000*g_RT[7] + g_RT[8])) * ((sc[7] * sc[7]));
const amrex::Real qdot = qf - qr;
wdot[5] -= qdot;
wdot[7] += 2.000000 * qdot;
wdot[8] -= qdot;
}

{
// reaction 51:  H + HO2 <=> H2 + O2
const amrex::Real k_f = 16600000
           * exp(-(414.096994290704) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[8]);
const amrex::Real qr = k_f * exp(-(-g_RT[2] - g_RT[3] + g_RT[5] + g_RT[8])) * (sc[2]*sc[3]);
const amrex::Real qdot = qf - qr;
wdot[2] += qdot;
wdot[3] += qdot;
wdot[5] -= qdot;
wdot[8] -= qdot;
}

{
// reaction 52:  H + HO2 <=> H2O + O
const amrex::Real k_f = 31000000
           * exp(-(865.955367183394) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[8]);
const amrex::Real qr = k_f * exp(-(g_RT[5] - g_RT[6] + g_RT[8] - g_RT[9])) * (sc[6]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[5] -= qdot;
wdot[6] += qdot;
wdot[8] -= qdot;
wdot[9] += qdot;
}

{
// reaction 53:  HO2 + O <=> O2 + OH
const amrex::Real k_f = 20000000
           ;
const amrex::Real qf = k_f * (sc[6]*sc[8]);
const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[6] - g_RT[7] + g_RT[8])) * (sc[2]*sc[7]);
const amrex::Real qdot = qf - qr;
wdot[2] += qdot;
wdot[6] -= qdot;
wdot[7] += qdot;
wdot[8] -= qdot;
}

{
// reaction 54:  HO2 + OH <=> H2O + O2
const amrex::Real k_f = 7000000
           * exp(-(-550.846123223136) * invT);
const amrex::Real qf = k_f * (sc[7]*sc[8]);
const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9])) * (sc[2]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[2] += qdot;
wdot[7] -= qdot;
wdot[8] -= qdot;
wdot[9] += qdot;
}

{
// reaction 55:  HO2 + OH <=> H2O + O2
const amrex::Real k_f = 450000000
           * exp(-(5500.02228874582) * invT);
const amrex::Real qf = k_f * (sc[7]*sc[8]);
const amrex::Real qr = k_f * exp(-(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9])) * (sc[2]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[2] += qdot;
wdot[7] -= qdot;
wdot[8] -= qdot;
wdot[9] += qdot;
}

{
// reaction 57:  2 HO2 <=> H2O2 + O2
const amrex::Real k_f = 103000000
           * exp(-(5556.55364898232) * invT);
const amrex::Real qf = k_f * ((sc[8] * sc[8]));
const amrex::Real qr = k_f * exp(-(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10])) * (sc[2]*sc[10]);
const amrex::Real qdot = qf - qr;
wdot[2] += qdot;
wdot[8] -= 2.000000 * qdot;
wdot[10] += qdot;
}

{
// reaction 58:  2 HO2 <=> H2O2 + O2
const amrex::Real k_f = 194000
           * exp(-(-709.002089118902) * invT);
const amrex::Real qf = k_f * ((sc[8] * sc[8]));
const amrex::Real qr = k_f * exp(-(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10])) * (sc[2]*sc[10]);
const amrex::Real qdot = qf - qr;
wdot[2] += qdot;
wdot[8] -= 2.000000 * qdot;
wdot[10] += qdot;
}

{
// reaction 59:  H + H2O2 <=> H2 + HO2
const amrex::Real k_f = 23000000
           * exp(-(4000.59765398081) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[10]);
const amrex::Real qr = k_f * exp(-(-g_RT[3] + g_RT[5] - g_RT[8] + g_RT[10])) * (sc[3]*sc[8]);
const amrex::Real qdot = qf - qr;
wdot[3] += qdot;
wdot[5] -= qdot;
wdot[8] += qdot;
wdot[10] -= qdot;
}

{
// reaction 60:  H + H2O2 <=> H2O + OH
const amrex::Real k_f = 10000000
           * exp(-(1804.07703640984) * invT);
const amrex::Real qf = k_f * (sc[5]*sc[10]);
const amrex::Real qr = k_f * exp(-(g_RT[5] - g_RT[7] - g_RT[9] + g_RT[10])) * (sc[7]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[5] -= qdot;
wdot[7] += qdot;
wdot[9] += qdot;
wdot[10] -= qdot;
}

{
// reaction 61:  H2O2 + OH <=> H2O + HO2
const amrex::Real k_f = 1740000
           * exp(-(721.627795263942) * invT);
const amrex::Real qf = k_f * (sc[7]*sc[10]);
const amrex::Real qr = k_f * exp(-(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10])) * (sc[8]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[7] -= qdot;
wdot[8] += qdot;
wdot[9] += qdot;
wdot[10] -= qdot;
}

{
// reaction 62:  H2O2 + OH <=> H2O + HO2
const amrex::Real k_f = 75900000
           * exp(-(3659.86461739778) * invT);
const amrex::Real qf = k_f * (sc[7]*sc[10]);
const amrex::Real qr = k_f * exp(-(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10])) * (sc[8]*sc[9]);
const amrex::Real qdot = qf - qr;
wdot[7] -= qdot;
wdot[8] += qdot;
wdot[9] += qdot;
wdot[10] -= qdot;
}

{
// reaction 63:  H2O2 + O <=> HO2 + OH
const amrex::Real k_f = 9.63
           * exp((2) * tc[0] - (2008.53899989296) * invT);
const amrex::Real qf = k_f * (sc[6]*sc[10]);
const amrex::Real qr = k_f * exp(-(g_RT[6] - g_RT[7] - g_RT[8] + g_RT[10])) * (sc[7]*sc[8]);
const amrex::Real qdot = qf - qr;
wdot[6] -= qdot;
wdot[7] += qdot;
wdot[8] += qdot;
wdot[10] -= qdot;
}


return;
}


// compute the production rate for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKWC(amrex::Real *  T, amrex::Real *  C,  amrex::Real *  wdot)
{
int id; // loop counter

// convert to SI
for (id = 0; id < 21; ++id) {
C[id] *= 1.0e6;
}

// convert to chemkin units
productionRate(wdot, C, *T);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
C[id] *= 1.0e-6;
wdot[id] *= 1.0e-6;
}
}

// Returns the molar production rate of species
// Given P, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKWYP(amrex::Real *  P, amrex::Real *  T, amrex::Real *  y,  amrex::Real *  wdot)
{
int id; // loop counter
amrex::Real c[21]; // temporary storage
amrex::Real YOW = 0; 
amrex::Real PWORT; 
amrex::Real imw[21];

get_imw(imw);

// Compute inverse of mean molecular wt first
YOW += y[0]*imw[0]; // NO
YOW += y[1]*imw[1]; // N2O
YOW += y[2]*imw[2]; // O2
YOW += y[3]*imw[3]; // H2
YOW += y[4]*imw[4]; // AR
YOW += y[5]*imw[5]; // H
YOW += y[6]*imw[6]; // O
YOW += y[7]*imw[7]; // OH
YOW += y[8]*imw[8]; // HO2
YOW += y[9]*imw[9]; // H2O
YOW += y[10]*imw[10]; // H2O2
YOW += y[11]*imw[11]; // NO2
YOW += y[12]*imw[12]; // NH3
YOW += y[13]*imw[13]; // HNO
YOW += y[14]*imw[14]; // N
YOW += y[15]*imw[15]; // N2H
YOW += y[16]*imw[16]; // NH2
YOW += y[17]*imw[17]; // NH
YOW += y[18]*imw[18]; // N2
YOW += y[19]*imw[19]; // H2NO
YOW += y[20]*imw[20]; // HE
// PW/RT (see Eq. 7)
PWORT = (*P)/(YOW * 8.31446261815324e+07 * (*T)); 
// multiply by 1e6 so c goes to SI
PWORT *= 1e6; 
// Now compute conversion (and go to SI)
c[0] = PWORT * y[0]*imw[0]; 
c[1] = PWORT * y[1]*imw[1]; 
c[2] = PWORT * y[2]*imw[2]; 
c[3] = PWORT * y[3]*imw[3]; 
c[4] = PWORT * y[4]*imw[4]; 
c[5] = PWORT * y[5]*imw[5]; 
c[6] = PWORT * y[6]*imw[6]; 
c[7] = PWORT * y[7]*imw[7]; 
c[8] = PWORT * y[8]*imw[8]; 
c[9] = PWORT * y[9]*imw[9]; 
c[10] = PWORT * y[10]*imw[10]; 
c[11] = PWORT * y[11]*imw[11]; 
c[12] = PWORT * y[12]*imw[12]; 
c[13] = PWORT * y[13]*imw[13]; 
c[14] = PWORT * y[14]*imw[14]; 
c[15] = PWORT * y[15]*imw[15]; 
c[16] = PWORT * y[16]*imw[16]; 
c[17] = PWORT * y[17]*imw[17]; 
c[18] = PWORT * y[18]*imw[18]; 
c[19] = PWORT * y[19]*imw[19]; 
c[20] = PWORT * y[20]*imw[20]; 

// convert to chemkin units
productionRate(wdot, c, *T);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
wdot[id] *= 1.0e-6;
}
}

// Returns the molar production rate of species
// Given P, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKWXP(amrex::Real *  P, amrex::Real *  T, amrex::Real *  x,  amrex::Real *  wdot)
{
int id; // loop counter
amrex::Real c[21]; // temporary storage
amrex::Real PORT = 1e6 * (*P)/(8.31446261815324e+07 * (*T)); // 1e6 * P/RT so c goes to SI units

// Compute conversion, see Eq 10
for (id = 0; id < 21; ++id) {
c[id] = x[id]*PORT;
}

// convert to chemkin units
productionRate(wdot, c, *T);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
wdot[id] *= 1.0e-6;
}
}

// Returns the molar production rate of species
// Given rho, T, and mass fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKWYR(amrex::Real *  rho, amrex::Real *  T, amrex::Real *  y,  amrex::Real *  wdot)
{
int id; // loop counter
amrex::Real c[21]; // temporary storage
amrex::Real imw[21];

get_imw(imw);

// See Eq 8 with an extra 1e6 so c goes to SI
c[0] = 1e6 * (*rho) * y[0]*imw[0]; 
c[1] = 1e6 * (*rho) * y[1]*imw[1]; 
c[2] = 1e6 * (*rho) * y[2]*imw[2]; 
c[3] = 1e6 * (*rho) * y[3]*imw[3]; 
c[4] = 1e6 * (*rho) * y[4]*imw[4]; 
c[5] = 1e6 * (*rho) * y[5]*imw[5]; 
c[6] = 1e6 * (*rho) * y[6]*imw[6]; 
c[7] = 1e6 * (*rho) * y[7]*imw[7]; 
c[8] = 1e6 * (*rho) * y[8]*imw[8]; 
c[9] = 1e6 * (*rho) * y[9]*imw[9]; 
c[10] = 1e6 * (*rho) * y[10]*imw[10]; 
c[11] = 1e6 * (*rho) * y[11]*imw[11]; 
c[12] = 1e6 * (*rho) * y[12]*imw[12]; 
c[13] = 1e6 * (*rho) * y[13]*imw[13]; 
c[14] = 1e6 * (*rho) * y[14]*imw[14]; 
c[15] = 1e6 * (*rho) * y[15]*imw[15]; 
c[16] = 1e6 * (*rho) * y[16]*imw[16]; 
c[17] = 1e6 * (*rho) * y[17]*imw[17]; 
c[18] = 1e6 * (*rho) * y[18]*imw[18]; 
c[19] = 1e6 * (*rho) * y[19]*imw[19]; 
c[20] = 1e6 * (*rho) * y[20]*imw[20]; 

// call productionRate
productionRate(wdot, c, *T);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
wdot[id] *= 1.0e-6;
}
}

// Returns the molar production rate of species
// Given rho, T, and mole fractions
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void CKWXR(amrex::Real *  rho, amrex::Real *  T, amrex::Real *  x,  amrex::Real *  wdot)
{
int id; // loop counter
amrex::Real c[21]; // temporary storage
amrex::Real XW = 0; // See Eq 4, 11 in CK Manual
amrex::Real ROW; 
// Compute mean molecular wt first
XW += x[0]*30.006000; // NO
XW += x[1]*44.013000; // N2O
XW += x[2]*31.998000; // O2
XW += x[3]*2.016000; // H2
XW += x[4]*39.950000; // AR
XW += x[5]*1.008000; // H
XW += x[6]*15.999000; // O
XW += x[7]*17.007000; // OH
XW += x[8]*33.006000; // HO2
XW += x[9]*18.015000; // H2O
XW += x[10]*34.014000; // H2O2
XW += x[11]*46.005000; // NO2
XW += x[12]*17.031000; // NH3
XW += x[13]*31.014000; // HNO
XW += x[14]*14.007000; // N
XW += x[15]*29.022000; // N2H
XW += x[16]*16.023000; // NH2
XW += x[17]*15.015000; // NH
XW += x[18]*28.014000; // N2
XW += x[19]*32.022000; // H2NO
XW += x[20]*4.002602; // HE
// Extra 1e6 factor to take c to SI
ROW = 1e6*(*rho) / XW;

// Compute conversion, see Eq 11
for (id = 0; id < 21; ++id) {
c[id] = x[id]*ROW;
}

// convert to chemkin units
productionRate(wdot, c, *T);

// convert to chemkin units
for (id = 0; id < 21; ++id) {
wdot[id] *= 1.0e-6;
}
}

//  species unit charge number 
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRG(int * kcharge)
{
kcharge[0] = 0;// NO
kcharge[1] = 0;// N2O
kcharge[2] = 0;// O2
kcharge[3] = 0;// H2
kcharge[4] = 0;// AR
kcharge[5] = 0;// H
kcharge[6] = 0;// O
kcharge[7] = 0;// OH
kcharge[8] = 0;// HO2
kcharge[9] = 0;// H2O
kcharge[10] = 0;// H2O2
kcharge[11] = 0;// NO2
kcharge[12] = 0;// NH3
kcharge[13] = 0;// HNO
kcharge[14] = 0;// N
kcharge[15] = 0;// N2H
kcharge[16] = 0;// NH2
kcharge[17] = 0;// NH
kcharge[18] = 0;// N2
kcharge[19] = 0;// H2NO
kcharge[20] = 0;// HE
}

//  species charge per unit mass 
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void
CKCHRGMASS(amrex::Real * zk)
{
amrex::Real imw[21];
get_imw(imw);

int kchrg[21];
CKCHRG(kchrg);

for (int id = 0; id < 21; ++id) {
zk[id] = 6.02214076e+23 * 1.60217663e-19 * kchrg[id] * imw[id];
}
}

// compute d(Cp/R)/dT and d(Cv/R)/dT at the given temperature
// tc contains precomputed powers of T, tc[0] = log(T)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void dcvpRdT(amrex::Real * species, const amrex::Real *  tc)
{

// temperature
const amrex::Real T = tc[1];

// species with midpoint at T=1000 kelvin
if (T < 1000) {
// species 0: NO
species[0] =
-4.63988124e-03
+2.20886098e-05 * tc[1]
-2.80216652e-08 * tc[2]
+1.12221950e-11 * tc[3];
// species 1: N2O
species[1] =
+1.13047280e-02
-2.73426380e-05 * tc[1]
+2.90459409e-08 * tc[2]
-1.17228728e-11 * tc[3];
// species 2: O2
species[2] =
-2.99673416e-03
+1.96946040e-05 * tc[1]
-2.90438853e-08 * tc[2]
+1.29749135e-11 * tc[3];
// species 3: H2
species[3] =
+7.98052075e-03
-3.89563020e-05 * tc[1]
+6.04716282e-08 * tc[2]
-2.95044704e-11 * tc[3];
// species 4: AR
species[4] =
+0.00000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3];
// species 5: H
species[5] =
+7.05332819e-13
-3.99183928e-15 * tc[1]
+6.90244896e-18 * tc[2]
-3.71092933e-21 * tc[3];
// species 6: O
species[6] =
-3.27931884e-03
+1.32861279e-05 * tc[1]
-1.83841987e-08 * tc[2]
+8.45063884e-12 * tc[3];
// species 7: OH
species[7] =
-3.22544939e-03
+1.30552938e-05 * tc[1]
-1.73956093e-08 * tc[2]
+8.24949516e-12 * tc[3];
// species 8: HO2
species[8] =
-4.74912051e-03
+4.23165782e-05 * tc[1]
-7.28291682e-08 * tc[2]
+3.71690050e-11 * tc[3];
// species 9: H2O
species[9] =
-2.03643410e-03
+1.30408042e-05 * tc[1]
-1.64639119e-08 * tc[2]
+7.08791268e-12 * tc[3];
// species 10: H2O2
species[10] =
-5.42822417e-04
+3.34671402e-05 * tc[1]
-6.47312439e-08 * tc[2]
+3.44981745e-11 * tc[3];
// species 11: NO2
species[11] =
-1.58542900e-03
+3.33156240e-05 * tc[1]
-6.14262780e-08 * tc[2]
+3.13402256e-11 * tc[3];
// species 12: NH3
species[12] =
-4.77127330e-03
+4.38683238e-05 * tc[1]
-6.89569467e-08 * tc[2]
+3.31596907e-11 * tc[3];
// species 13: HNO
species[13] =
-5.68539720e-03
+3.70397000e-05 * tc[1]
-5.15648190e-08 * tc[2]
+2.22332828e-11 * tc[3];
// species 14: N
species[14] =
-2.18001800e-05
+1.08410580e-07 * tc[1]
-1.69426800e-10 * tc[2]
+8.39961600e-14 * tc[3];
// species 15: N2H
species[15] =
-4.84970720e-03
+4.01189180e-05 * tc[1]
-6.51793920e-08 * tc[2]
+3.17878152e-11 * tc[3];
// species 16: NH2
species[16] =
-2.13552820e-03
+1.45364042e-05 * tc[1]
-1.77908397e-08 * tc[2]
+7.22688720e-12 * tc[3];
// species 17: NH
species[17] =
+3.11791970e-04
-2.97809680e-06 * tc[1]
+7.44493260e-09 * tc[2]
-4.14278680e-12 * tc[3];
// species 18: N2
species[18] =
+1.40824040e-03
-7.92644400e-06 * tc[1]
+1.69245450e-08 * tc[2]
-9.77941600e-12 * tc[3];
// species 20: HE
species[20] =
+0.00000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3];
} else {
// species 0: NO
species[0] =
+1.19101135e-03
-8.58245292e-07 * tc[1]
+2.08344439e-10 * tc[2]
-1.61318272e-14 * tc[3];
// species 1: N2O
species[1] =
+2.62702510e-03
-1.91701744e-06 * tc[1]
+4.80021360e-10 * tc[2]
-3.91009208e-14 * tc[3];
// species 2: O2
species[2] =
+1.48308754e-03
-1.51593334e-06 * tc[1]
+6.28411665e-10 * tc[2]
-8.66871176e-14 * tc[3];
// species 3: H2
species[3] =
-4.94024731e-05
+9.98913556e-07 * tc[1]
-5.38699182e-10 * tc[2]
+8.01021504e-14 * tc[3];
// species 4: AR
species[4] =
+0.00000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3];
// species 5: H
species[5] =
-2.30842973e-11
+3.23123896e-14 * tc[1]
-1.42054571e-17 * tc[2]
+1.99278943e-21 * tc[3];
// species 6: O
species[6] =
-8.59741137e-05
+8.38969178e-08 * tc[1]
-3.00533397e-11 * tc[2]
+4.91334764e-15 * tc[3];
// species 7: OH
species[7] =
+1.05650448e-03
-5.18165516e-07 * tc[1]
+9.15656022e-11 * tc[2]
-5.32783504e-15 * tc[3];
// species 8: HO2
species[8] =
+2.23982013e-03
-1.26731630e-06 * tc[1]
+3.42739110e-10 * tc[2]
-4.31634140e-14 * tc[3];
// species 9: H2O
species[9] =
+2.17691804e-03
-3.28145036e-07 * tc[1]
-2.91125961e-10 * tc[2]
+6.72803968e-14 * tc[3];
// species 10: H2O2
species[10] =
+4.90831694e-03
-3.80278450e-06 * tc[1]
+1.11355796e-09 * tc[2]
-1.15163322e-13 * tc[3];
// species 11: NO2
species[11] =
+2.17239550e-03
-1.65613818e-06 * tc[1]
+4.72425300e-10 * tc[2]
-4.20435800e-14 * tc[3];
// species 12: NH3
species[12] =
+5.56856338e-03
-3.53772792e-06 * tc[1]
+8.02251780e-10 * tc[2]
-6.10925676e-14 * tc[3];
// species 13: HNO
species[13] =
+3.00008620e-03
-7.88732380e-07 * tc[1]
-1.15727445e-10 * tc[2]
+2.83228756e-14 * tc[3];
// species 14: N
species[14] =
+1.06614580e-04
-1.49306740e-07 * tc[1]
+5.63895600e-11 * tc[2]
-4.10393560e-15 * tc[3];
// species 15: N2H
species[15] =
+2.89150810e-03
-2.08332400e-06 * tc[1]
+5.05277820e-10 * tc[2]
-4.03675840e-14 * tc[3];
// species 16: NH2
species[16] =
+3.14284530e-03
-1.79733114e-06 * tc[1]
+3.90970710e-10 * tc[2]
-2.99541424e-14 * tc[3];
// species 17: NH
species[17] =
+1.32984290e-03
-8.49560940e-07 * tc[1]
+2.35045512e-10 * tc[2]
-2.20177880e-14 * tc[3];
// species 18: N2
species[18] =
+1.48797680e-03
-1.13695200e-06 * tc[1]
+3.02911140e-10 * tc[2]
-2.70134040e-14 * tc[3];
// species 20: HE
species[20] =
+0.00000000e+00
+0.00000000e+00 * tc[1]
+0.00000000e+00 * tc[2]
+0.00000000e+00 * tc[3];
}

// species with midpoint at T=1500 kelvin
if (T < 1500) {
// species 19: H2NO
species[19] =
+8.59603500e-03
-1.09420600e-05 * tc[1]
+6.82874700e-09 * tc[2]
-1.85922920e-12 * tc[3];
} else {
// species 19: H2NO
species[19] =
+2.29883700e-03
-3.54889200e-07 * tc[1]
-3.31044600e-10 * tc[2]
+7.43904800e-14 * tc[3];
}
return;
}

// compute an approx to the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void aJacobian_precond(amrex::Real *  J, amrex::Real *  sc, amrex::Real T, const int HP)
{

for (int i=0; i<484; i++) {
J[i] = 0.0;
}

amrex::Real wdot[21];
for (int k=0; k<21; k++) {
wdot[k] = 0.0;
}

const amrex::Real tc[5] = { log(T), T, T*T, T*T*T, T*T*T*T };// temperature cache
amrex::Real invT = 1.0 / tc[1];
amrex::Real invT2 = invT * invT;

// reference concentration: P_atm / (RT) in inverse mol/m^3
amrex::Real refC = 101325 / 8.31446 / T;
amrex::Real refCinv = 1.0 / refC;

// compute the mixture concentration
amrex::Real mixture = 0.0;
for (int k = 0; k < 21; ++k) {
mixture += sc[k];
}

// compute the Gibbs free energy
amrex::Real g_RT[21];
gibbs(g_RT, tc);

// compute the species enthalpy
amrex::Real h_RT[21];
speciesEnthalpy(h_RT, tc);

amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
amrex::Real dqdci, dcdc_fac, dqdc[21];
amrex::Real Pr, fPr, F, k_0, logPr;
amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
const amrex::Real ln10 = log(10.0);
const amrex::Real log10e = 1.0/log(10.0);
// reaction 49: H + O2 (+M) <=> HO2 (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.7 - 1)*sc[4] + ( 16 - 1)*sc[9] + ( 0.7 - 1)*sc[20];
// forward
phi_f = sc[2]*sc[5];
k_f = 4650000
            * exp(0.44 * tc[0]);
dlnkfdT = 0.44 * invT;
// pressure-fall-off
k_0 = 5.75e+19 * exp(-1.4 * tc[0]);
Pr = 1e-12 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = -1.4 * invT;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Troe form
logPr = log10(Pr);
Fcent1 = (1.-0.5)*exp(-T/1e-30);
Fcent2 = 0.5 * exp(-T/1e+30);
Fcent3 = 0.;
Fcent = Fcent1 + Fcent2 + Fcent3;
logFcent = log10(Fcent);
troe_c = -.4 - .67 * logFcent;
troe_n = .75 - 1.27 * logFcent;
troePr_den = 1.0 / (troe_n - .14*(troe_c + logPr));
troePr = (troe_c + logPr) * troePr_den;
troe = 1.0 / (1.0 + troePr*troePr);
F = exp(M_LN10 * logFcent * troe);
dlogFcentdT = log10e/Fcent*( 
    -Fcent1/1e-30
    -Fcent2/1e+30
);
dlogFdcn_fac = 2.0 * logFcent * troe*troe * troePr * troePr_den;
dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
dlogFdn = dlogFdcn_fac * troePr;
dlogFdlogPr = dlogFdc;
dlogFdT = dlogFcentdT*(troe - 0.67*dlogFdc - 1.27*dlogFdn) + dlogFdlogPr * dlogPrdT;
// reverse
phi_r = sc[8];
Kc = refCinv * exp(g_RT[2] + g_RT[5] - g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[8]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[2] -= q;// O2
wdot[5] -= q;// H
wdot[8] += q;// HO2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = 0.0;
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac;
dqdc[2] = dcdc_fac + k_f*sc[5];
dqdc[3] = 2.5*dcdc_fac;
dqdc[4] = 0.7*dcdc_fac;
dqdc[5] = dcdc_fac + k_f*sc[2];
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac - k_r;
dqdc[9] = 16*dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac;
dqdc[19] = dcdc_fac;
dqdc[20] = 0.7*dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+2] -= dqdc[k];
J[22*k+5] -= dqdc[k];
J[22*k+8] += dqdc[k];
}
J[464] -= dqdT;// dwdot[O2]/dT
J[467] -= dqdT;// dwdot[H]/dT
J[470] += dqdT;// dwdot[HO2]/dT

// reaction 56: 2 OH (+M) <=> H2O2 (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.7 - 1)*sc[4] + ( 6 - 1)*sc[9] + ( 6 - 1)*sc[10] + ( 0.4 - 1)*sc[20];
// forward
phi_f = (sc[7] * sc[7]);
k_f = 95500000
            * exp(-0.27 * tc[0]);
dlnkfdT = -0.27 * invT;
// pressure-fall-off
k_0 = 2.76e+25 * exp(-3.2 * tc[0]);
Pr = 1e-12 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = -3.2 * invT;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Troe form
logPr = log10(Pr);
Fcent1 = (1.-0.57)*exp(-T/1e+30);
Fcent2 = 0.57 * exp(-T/1e-30);
Fcent3 = 0.;
Fcent = Fcent1 + Fcent2 + Fcent3;
logFcent = log10(Fcent);
troe_c = -.4 - .67 * logFcent;
troe_n = .75 - 1.27 * logFcent;
troePr_den = 1.0 / (troe_n - .14*(troe_c + logPr));
troePr = (troe_c + logPr) * troePr_den;
troe = 1.0 / (1.0 + troePr*troePr);
F = exp(M_LN10 * logFcent * troe);
dlogFcentdT = log10e/Fcent*( 
    -Fcent1/1e+30
    -Fcent2/1e-30
);
dlogFdcn_fac = 2.0 * logFcent * troe*troe * troePr * troePr_den;
dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
dlogFdn = dlogFdcn_fac * troePr;
dlogFdlogPr = dlogFdc;
dlogFdT = dlogFcentdT*(troe - 0.67*dlogFdc - 1.27*dlogFdn) + dlogFdlogPr * dlogPrdT;
// reverse
phi_r = sc[10];
Kc = refCinv * exp(2.000000*g_RT[7] - g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[7]) + (h_RT[10]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[7] -= 2 * q;// OH
wdot[10] += q;// H2O2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = 0.0;
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac;
dqdc[2] = dcdc_fac;
dqdc[3] = 2.5*dcdc_fac;
dqdc[4] = 0.7*dcdc_fac;
dqdc[5] = dcdc_fac;
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac + k_f*2.000000*sc[7];
dqdc[8] = dcdc_fac;
dqdc[9] = 6*dcdc_fac;
dqdc[10] = 6*dcdc_fac - k_r;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac;
dqdc[19] = dcdc_fac;
dqdc[20] = 0.4*dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+7] += -2 * dqdc[k];
J[22*k+10] += dqdc[k];
}
J[469] += -2 * dqdT;// dwdot[OH]/dT
J[472] += dqdT;// dwdot[H2O2]/dT

// reaction 22: N2H (+M) <=> H + N2 (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture;
// forward
phi_f = sc[15];
k_f = 65000000
           ;
dlnkfdT = 0.0;
// pressure-fall-off
k_0 = 50000000000000;
Pr = 1e-6 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = 0.0;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Lindemann form
F = 1.0;
dlogFdlogPr = 0.0;
dlogFdT = 0.0;
// reverse
phi_r = sc[5]*sc[18];
Kc = refC * exp(-g_RT[5] + g_RT[15] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[15]) + (h_RT[5] + h_RT[18]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[5] += q;// H
wdot[15] -= q;// N2H
wdot[18] += q;// N2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = 0.0;
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac;
dqdc[2] = dcdc_fac;
dqdc[3] = dcdc_fac;
dqdc[4] = dcdc_fac;
dqdc[5] = dcdc_fac - k_r*sc[18];
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac;
dqdc[9] = dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac + k_f;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac - k_r*sc[5];
dqdc[19] = dcdc_fac;
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+5] += dqdc[k];
J[22*k+15] -= dqdc[k];
J[22*k+18] += dqdc[k];
}
J[467] += dqdT;// dwdot[H]/dT
J[477] -= dqdT;// dwdot[N2H]/dT
J[480] += dqdT;// dwdot[N2]/dT

// reaction 26: H + NO (+M) <=> HNO (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 0.5 - 1)*sc[4] + ( 5 - 1)*sc[9];
// forward
phi_f = sc[0]*sc[5];
k_f = 1500000000
            * exp(-0.4 * tc[0]);
dlnkfdT = -0.4 * invT;
// pressure-fall-off
k_0 = 430000000000000 * exp(0.206 * tc[0] - (-782.486818826365) * invT);
Pr = 1e-12 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = 0.206 * invT + (-782.486818826365) * invT2;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Lindemann form
F = 1.0;
dlogFdlogPr = 0.0;
dlogFdT = 0.0;
// reverse
phi_r = sc[13];
Kc = refCinv * exp(g_RT[0] + g_RT[5] - g_RT[13]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[5]) + (h_RT[13]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[0] -= q;// NO
wdot[5] -= q;// H
wdot[13] += q;// HNO
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = 0.0;
dqdc[0] = dcdc_fac + k_f*sc[5];
dqdc[1] = dcdc_fac;
dqdc[2] = dcdc_fac;
dqdc[3] = dcdc_fac;
dqdc[4] = 0.5*dcdc_fac;
dqdc[5] = dcdc_fac + k_f*sc[0];
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac;
dqdc[9] = 5*dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac - k_r;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac;
dqdc[19] = dcdc_fac;
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+0] -= dqdc[k];
J[22*k+5] -= dqdc[k];
J[22*k+13] += dqdc[k];
}
J[462] -= dqdT;// dwdot[NO]/dT
J[467] -= dqdT;// dwdot[H]/dT
J[475] += dqdT;// dwdot[HNO]/dT

// reaction 29: N2O (+M) <=> N2 + O (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture;
// forward
phi_f = sc[1];
k_f = 800000000000
            * exp(- (31511.1760043586) * invT);
dlnkfdT = (31511.1760043586) * invT2;
// pressure-fall-off
k_0 = 200000000000000 * exp(-(28504.3859758422) * invT);
Pr = 1e-6 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = (28504.3859758422) * invT2;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Lindemann form
F = 1.0;
dlogFdlogPr = 0.0;
dlogFdT = 0.0;
// reverse
phi_r = sc[6]*sc[18];
Kc = refC * exp(g_RT[1] - g_RT[6] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1]) + (h_RT[6] + h_RT[18]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[1] -= q;// N2O
wdot[6] += q;// O
wdot[18] += q;// N2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = 0.0;
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac + k_f;
dqdc[2] = dcdc_fac;
dqdc[3] = dcdc_fac;
dqdc[4] = dcdc_fac;
dqdc[5] = dcdc_fac;
dqdc[6] = dcdc_fac - k_r*sc[18];
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac;
dqdc[9] = dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac - k_r*sc[6];
dqdc[19] = dcdc_fac;
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+1] -= dqdc[k];
J[22*k+6] += dqdc[k];
J[22*k+18] += dqdc[k];
}
J[463] -= dqdT;// dwdot[N2O]/dT
J[468] += dqdT;// dwdot[O]/dT
J[480] += dqdT;// dwdot[N2]/dT

// reaction 17: NH3 + M <=> H + NH2 + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture;
// forward
phi_f = sc[12];
k_f = 22000000000
            * exp(- (47026.2214081167) * invT);
dlnkfdT = (47026.2214081167) * invT2;
// reverse
phi_r = sc[5]*sc[16];
Kc = refC * exp(-g_RT[5] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[12]) + (h_RT[5] + h_RT[16]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += q;// H
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// for convenience
k_f *= alpha;
k_r *= alpha;
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = q_nocor;
dqdc[4] = q_nocor;
dqdc[5] = q_nocor - k_r*sc[16];
dqdc[6] = q_nocor;
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor + k_f;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor - k_r*sc[5];
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+5] += dqdc[k];
J[22*k+12] -= dqdc[k];
J[22*k+16] += dqdc[k];
}
J[467] += dqdT;// dwdot[H]/dT
J[474] -= dqdT;// dwdot[NH3]/dT
J[478] += dqdT;// dwdot[NH2]/dT

// reaction 34: NO2 + M <=> NO + O + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 16.25 - 1)*sc[9];
// forward
phi_f = sc[11];
k_f = 11000000000
            * exp(- (33194.9792254745) * invT);
dlnkfdT = (33194.9792254745) * invT2;
// reverse
phi_r = sc[0]*sc[6];
Kc = refC * exp(-g_RT[0] - g_RT[6] + g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[11]) + (h_RT[0] + h_RT[6]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[6] += q;// O
wdot[11] -= q;// NO2
// for convenience
k_f *= alpha;
k_r *= alpha;
dqdc[0] = q_nocor - k_r*sc[6];
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = q_nocor;
dqdc[4] = q_nocor;
dqdc[5] = q_nocor;
dqdc[6] = q_nocor - k_r*sc[0];
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = 16.25*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor + k_f;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+0] += dqdc[k];
J[22*k+6] += dqdc[k];
J[22*k+11] -= dqdc[k];
}
J[462] += dqdT;// dwdot[NO]/dT
J[468] += dqdT;// dwdot[O]/dT
J[473] -= dqdT;// dwdot[NO2]/dT

// reaction 45: 2 H + M <=> H2 + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.5 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.5 - 1)*sc[20];
// forward
phi_f = (sc[5] * sc[5]);
k_f = 1300000
            * exp(-1 * tc[0]);
dlnkfdT = -1 * invT;
// reverse
phi_r = sc[3];
Kc = refCinv * exp(-g_RT[3] + 2.000000*g_RT[5]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[5]) + (h_RT[3]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= 2 * q;// H
// for convenience
k_f *= alpha;
k_r *= alpha;
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = 2.5*q_nocor - k_r;
dqdc[4] = 0.5*q_nocor;
dqdc[5] = q_nocor + k_f*2.000000*sc[5];
dqdc[6] = q_nocor;
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = 0.5*q_nocor;
for (int k=0; k<21; k++) {
J[22*k+3] += dqdc[k];
J[22*k+5] += -2 * dqdc[k];
}
J[465] += dqdT;// dwdot[H2]/dT
J[467] += -2 * dqdT;// dwdot[H]/dT

// reaction 46: H + OH + M <=> H2O + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.38 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.38 - 1)*sc[20];
// forward
phi_f = sc[5]*sc[7];
k_f = 40000000000
            * exp(-2 * tc[0]);
dlnkfdT = -2 * invT;
// reverse
phi_r = sc[9];
Kc = refCinv * exp(g_RT[5] + g_RT[7] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[7]) + (h_RT[9]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[7] -= q;// OH
wdot[9] += q;// H2O
// for convenience
k_f *= alpha;
k_r *= alpha;
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = 2.5*q_nocor;
dqdc[4] = 0.38*q_nocor;
dqdc[5] = q_nocor + k_f*sc[7];
dqdc[6] = q_nocor;
dqdc[7] = q_nocor + k_f*sc[5];
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor - k_r;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = 0.38*q_nocor;
for (int k=0; k<21; k++) {
J[22*k+5] -= dqdc[k];
J[22*k+7] -= dqdc[k];
J[22*k+9] += dqdc[k];
}
J[467] -= dqdT;// dwdot[H]/dT
J[469] -= dqdT;// dwdot[OH]/dT
J[471] += dqdT;// dwdot[H2O]/dT

// reaction 47: 2 O + M <=> O2 + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.2 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.2 - 1)*sc[20];
// forward
phi_f = (sc[6] * sc[6]);
k_f = 6170
            * exp(-0.5 * tc[0]);
dlnkfdT = -0.5 * invT;
// reverse
phi_r = sc[2];
Kc = refCinv * exp(-g_RT[2] + 2.000000*g_RT[6]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[6]) + (h_RT[2]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[6] -= 2 * q;// O
// for convenience
k_f *= alpha;
k_r *= alpha;
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor - k_r;
dqdc[3] = 2.5*q_nocor;
dqdc[4] = 0.2*q_nocor;
dqdc[5] = q_nocor;
dqdc[6] = q_nocor + k_f*2.000000*sc[6];
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = 0.2*q_nocor;
for (int k=0; k<21; k++) {
J[22*k+2] += dqdc[k];
J[22*k+6] += -2 * dqdc[k];
}
J[464] += dqdT;// dwdot[O2]/dT
J[468] += -2 * dqdT;// dwdot[O]/dT

// reaction 48: H + O + M <=> OH + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.75 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.75 - 1)*sc[20];
// forward
phi_f = sc[5]*sc[6];
k_f = 4710000
            * exp(-1 * tc[0]);
dlnkfdT = -1 * invT;
// reverse
phi_r = sc[7];
Kc = refCinv * exp(g_RT[5] + g_RT[6] - g_RT[7]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[6]) + (h_RT[7]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[6] -= q;// O
wdot[7] += q;// OH
// for convenience
k_f *= alpha;
k_r *= alpha;
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = 2.5*q_nocor;
dqdc[4] = 0.75*q_nocor;
dqdc[5] = q_nocor + k_f*sc[6];
dqdc[6] = q_nocor + k_f*sc[5];
dqdc[7] = q_nocor - k_r;
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = 0.75*q_nocor;
for (int k=0; k<21; k++) {
J[22*k+5] -= dqdc[k];
J[22*k+6] -= dqdc[k];
J[22*k+7] += dqdc[k];
}
J[467] -= dqdT;// dwdot[H]/dT
J[468] -= dqdT;// dwdot[O]/dT
J[469] += dqdT;// dwdot[OH]/dT

// reaction 0: N2 + O <=> N + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[18];
k_f = 14700000
            * exp(0.3 * tc[0] - (37885.5775072734) * invT);
dlnkfdT = 0.3 * invT + (37885.5775072734) * invT2;
// reverse
phi_r = sc[0]*sc[14];
Kc = exp(-g_RT[0] + g_RT[6] - g_RT[14] + g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[18]) + (h_RT[0] + h_RT[14]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[6] -= q;// O
wdot[14] += q;// N
wdot[18] -= q;// N2
// d()/d[NO]
dqdci =  - k_r*sc[14];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
J[14] += dqdci;               // dwdot[N]/d[NO]
J[18] -= dqdci;               // dwdot[N2]/d[NO]
// d()/d[O]
dqdci =  + k_f*sc[18];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[146] += dqdci;              // dwdot[N]/d[O]
J[150] -= dqdci;              // dwdot[N2]/d[O]
// d()/d[N]
dqdci =  - k_r*sc[0];
J[308] += dqdci;              // dwdot[NO]/d[N]
J[314] -= dqdci;              // dwdot[O]/d[N]
J[322] += dqdci;              // dwdot[N]/d[N]
J[326] -= dqdci;              // dwdot[N2]/d[N]
// d()/d[N2]
dqdci =  + k_f*sc[6];
J[396] += dqdci;              // dwdot[NO]/d[N2]
J[402] -= dqdci;              // dwdot[O]/d[N2]
J[410] += dqdci;              // dwdot[N]/d[N2]
J[414] -= dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[476] += dqdT;               // dwdot[N]/dT
J[480] -= dqdT;               // dwdot[N2]/dT

// reaction 1: N + O2 <=> NO + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[14];
k_f = 6400
            * exp(1 * tc[0] - (3163.1444787486) * invT);
dlnkfdT = 1 * invT + (3163.1444787486) * invT2;
// reverse
phi_r = sc[0]*sc[6];
Kc = exp(-g_RT[0] + g_RT[2] - g_RT[6] + g_RT[14]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[0] + h_RT[6]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[2] -= q;// O2
wdot[6] += q;// O
wdot[14] -= q;// N
// d()/d[NO]
dqdci =  - k_r*sc[6];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[2] -= dqdci;                // dwdot[O2]/d[NO]
J[6] += dqdci;                // dwdot[O]/d[NO]
J[14] -= dqdci;               // dwdot[N]/d[NO]
// d()/d[O2]
dqdci =  + k_f*sc[14];
J[44] += dqdci;               // dwdot[NO]/d[O2]
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[58] -= dqdci;               // dwdot[N]/d[O2]
// d()/d[O]
dqdci =  - k_r*sc[0];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[146] -= dqdci;              // dwdot[N]/d[O]
// d()/d[N]
dqdci =  + k_f*sc[2];
J[308] += dqdci;              // dwdot[NO]/d[N]
J[310] -= dqdci;              // dwdot[O2]/d[N]
J[314] += dqdci;              // dwdot[O]/d[N]
J[322] -= dqdci;              // dwdot[N]/d[N]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[476] -= dqdT;               // dwdot[N]/dT

// reaction 2: N + OH <=> H + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[14];
k_f = 38000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[0]*sc[5];
Kc = exp(-g_RT[0] - g_RT[5] + g_RT[7] + g_RT[14]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[14]) + (h_RT[0] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[5] += q;// H
wdot[7] -= q;// OH
wdot[14] -= q;// N
// d()/d[NO]
dqdci =  - k_r*sc[5];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[5] += dqdci;                // dwdot[H]/d[NO]
J[7] -= dqdci;                // dwdot[OH]/d[NO]
J[14] -= dqdci;               // dwdot[N]/d[NO]
// d()/d[H]
dqdci =  - k_r*sc[0];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[117] -= dqdci;              // dwdot[OH]/d[H]
J[124] -= dqdci;              // dwdot[N]/d[H]
// d()/d[OH]
dqdci =  + k_f*sc[14];
J[154] += dqdci;              // dwdot[NO]/d[OH]
J[159] += dqdci;              // dwdot[H]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[168] -= dqdci;              // dwdot[N]/d[OH]
// d()/d[N]
dqdci =  + k_f*sc[7];
J[308] += dqdci;              // dwdot[NO]/d[N]
J[313] += dqdci;              // dwdot[H]/d[N]
J[315] -= dqdci;              // dwdot[OH]/d[N]
J[322] -= dqdci;              // dwdot[N]/d[N]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[476] -= dqdT;               // dwdot[N]/dT

// reaction 3: H + NH <=> H2 + N
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[17];
k_f = 100000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[3]*sc[14];
Kc = exp(-g_RT[3] + g_RT[5] - g_RT[14] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[17]) + (h_RT[3] + h_RT[14]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[14] += q;// N
wdot[17] -= q;// NH
// d()/d[H2]
dqdci =  - k_r*sc[14];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[80] += dqdci;               // dwdot[N]/d[H2]
J[83] -= dqdci;               // dwdot[NH]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[17];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[124] += dqdci;              // dwdot[N]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[N]
dqdci =  - k_r*sc[3];
J[311] += dqdci;              // dwdot[H2]/d[N]
J[313] -= dqdci;              // dwdot[H]/d[N]
J[322] += dqdci;              // dwdot[N]/d[N]
J[325] -= dqdci;              // dwdot[NH]/d[N]
// d()/d[NH]
dqdci =  + k_f*sc[5];
J[377] += dqdci;              // dwdot[H2]/d[NH]
J[379] -= dqdci;              // dwdot[H]/d[NH]
J[388] += dqdci;              // dwdot[N]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[476] += dqdT;               // dwdot[N]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 4: NH + O <=> H + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[17];
k_f = 92000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[0]*sc[5];
Kc = exp(-g_RT[0] - g_RT[5] + g_RT[6] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[0] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[17] -= q;// NH
// d()/d[NO]
dqdci =  - k_r*sc[5];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[5] += dqdci;                // dwdot[H]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
J[17] -= dqdci;               // dwdot[NH]/d[NO]
// d()/d[H]
dqdci =  - k_r*sc[0];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[17];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[149] -= dqdci;              // dwdot[NH]/d[O]
// d()/d[NH]
dqdci =  + k_f*sc[6];
J[374] += dqdci;              // dwdot[NO]/d[NH]
J[379] += dqdci;              // dwdot[H]/d[NH]
J[380] -= dqdci;              // dwdot[O]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 5: NH + OH <=> H + HNO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[17];
k_f = 40000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[5]*sc[13];
Kc = exp(-g_RT[5] + g_RT[7] - g_RT[13] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[17]) + (h_RT[5] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += q;// H
wdot[7] -= q;// OH
wdot[13] += q;// HNO
wdot[17] -= q;// NH
// d()/d[H]
dqdci =  - k_r*sc[13];
J[115] += dqdci;              // dwdot[H]/d[H]
J[117] -= dqdci;              // dwdot[OH]/d[H]
J[123] += dqdci;              // dwdot[HNO]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[OH]
dqdci =  + k_f*sc[17];
J[159] += dqdci;              // dwdot[H]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[167] += dqdci;              // dwdot[HNO]/d[OH]
J[171] -= dqdci;              // dwdot[NH]/d[OH]
// d()/d[HNO]
dqdci =  - k_r*sc[5];
J[291] += dqdci;              // dwdot[H]/d[HNO]
J[293] -= dqdci;              // dwdot[OH]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[303] -= dqdci;              // dwdot[NH]/d[HNO]
// d()/d[NH]
dqdci =  + k_f*sc[7];
J[379] += dqdci;              // dwdot[H]/d[NH]
J[381] -= dqdci;              // dwdot[OH]/d[NH]
J[387] += dqdci;              // dwdot[HNO]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[467] += dqdT;               // dwdot[H]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 6: NH + OH <=> H2O + N
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[17];
k_f = 500000
            * exp(0.5 * tc[0] - (1006.67487560903) * invT);
dlnkfdT = 0.5 * invT + (1006.67487560903) * invT2;
// reverse
phi_r = sc[9]*sc[14];
Kc = exp(g_RT[7] - g_RT[9] - g_RT[14] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[17]) + (h_RT[9] + h_RT[14]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[14] += q;// N
wdot[17] -= q;// NH
// d()/d[OH]
dqdci =  + k_f*sc[17];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[168] += dqdci;              // dwdot[N]/d[OH]
J[171] -= dqdci;              // dwdot[NH]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[14];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[212] += dqdci;              // dwdot[N]/d[H2O]
J[215] -= dqdci;              // dwdot[NH]/d[H2O]
// d()/d[N]
dqdci =  - k_r*sc[9];
J[315] -= dqdci;              // dwdot[OH]/d[N]
J[317] += dqdci;              // dwdot[H2O]/d[N]
J[322] += dqdci;              // dwdot[N]/d[N]
J[325] -= dqdci;              // dwdot[NH]/d[N]
// d()/d[NH]
dqdci =  + k_f*sc[7];
J[381] -= dqdci;              // dwdot[OH]/d[NH]
J[383] += dqdci;              // dwdot[H2O]/d[NH]
J[388] += dqdci;              // dwdot[N]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[476] += dqdT;               // dwdot[N]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 7: NH + O2 <=> HNO + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[17];
k_f = 0.46
            * exp(2 * tc[0] - (3271.39141572985) * invT);
dlnkfdT = 2 * invT + (3271.39141572985) * invT2;
// reverse
phi_r = sc[6]*sc[13];
Kc = exp(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[6] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[6] += q;// O
wdot[13] += q;// HNO
wdot[17] -= q;// NH
// d()/d[O2]
dqdci =  + k_f*sc[17];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[57] += dqdci;               // dwdot[HNO]/d[O2]
J[61] -= dqdci;               // dwdot[NH]/d[O2]
// d()/d[O]
dqdci =  - k_r*sc[13];
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[145] += dqdci;              // dwdot[HNO]/d[O]
J[149] -= dqdci;              // dwdot[NH]/d[O]
// d()/d[HNO]
dqdci =  - k_r*sc[6];
J[288] -= dqdci;              // dwdot[O2]/d[HNO]
J[292] += dqdci;              // dwdot[O]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[303] -= dqdci;              // dwdot[NH]/d[HNO]
// d()/d[NH]
dqdci =  + k_f*sc[2];
J[376] -= dqdci;              // dwdot[O2]/d[NH]
J[380] += dqdci;              // dwdot[O]/d[NH]
J[387] += dqdci;              // dwdot[HNO]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 8: NH + NO <=> H + N2O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[17];
k_f = 180000000
            * exp(-0.351 * tc[0] - (-122.784866456352) * invT);
dlnkfdT = -0.351 * invT + (-122.784866456352) * invT2;
// reverse
phi_r = sc[1]*sc[5];
Kc = exp(g_RT[0] - g_RT[1] - g_RT[5] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[17]) + (h_RT[1] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[1] += q;// N2O
wdot[5] += q;// H
wdot[17] -= q;// NH
// d()/d[NO]
dqdci =  + k_f*sc[17];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[1] += dqdci;                // dwdot[N2O]/d[NO]
J[5] += dqdci;                // dwdot[H]/d[NO]
J[17] -= dqdci;               // dwdot[NH]/d[NO]
// d()/d[N2O]
dqdci =  - k_r*sc[5];
J[22] -= dqdci;               // dwdot[NO]/d[N2O]
J[23] += dqdci;               // dwdot[N2O]/d[N2O]
J[27] += dqdci;               // dwdot[H]/d[N2O]
J[39] -= dqdci;               // dwdot[NH]/d[N2O]
// d()/d[H]
dqdci =  - k_r*sc[1];
J[110] -= dqdci;              // dwdot[NO]/d[H]
J[111] += dqdci;              // dwdot[N2O]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[NH]
dqdci =  + k_f*sc[0];
J[374] -= dqdci;              // dwdot[NO]/d[NH]
J[375] += dqdci;              // dwdot[N2O]/d[NH]
J[379] += dqdci;              // dwdot[H]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[463] += dqdT;               // dwdot[N2O]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 9: NH + NO <=> N2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[17];
k_f = 22000000
            * exp(-0.23 * tc[0]);
dlnkfdT = -0.23 * invT;
// reverse
phi_r = sc[7]*sc[18];
Kc = exp(g_RT[0] - g_RT[7] + g_RT[17] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[17]) + (h_RT[7] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[7] += q;// OH
wdot[17] -= q;// NH
wdot[18] += q;// N2
// d()/d[NO]
dqdci =  + k_f*sc[17];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[17] -= dqdci;               // dwdot[NH]/d[NO]
J[18] += dqdci;               // dwdot[N2]/d[NO]
// d()/d[OH]
dqdci =  - k_r*sc[18];
J[154] -= dqdci;              // dwdot[NO]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[171] -= dqdci;              // dwdot[NH]/d[OH]
J[172] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[NH]
dqdci =  + k_f*sc[0];
J[374] -= dqdci;              // dwdot[NO]/d[NH]
J[381] += dqdci;              // dwdot[OH]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
J[392] += dqdci;              // dwdot[N2]/d[NH]
// d()/d[N2]
dqdci =  - k_r*sc[7];
J[396] -= dqdci;              // dwdot[NO]/d[N2]
J[403] += dqdci;              // dwdot[OH]/d[N2]
J[413] -= dqdci;              // dwdot[NH]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[479] -= dqdT;               // dwdot[NH]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 10: H + NH2 <=> H2 + NH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[16];
k_f = 40000000
            * exp(- (1837.75229568549) * invT);
dlnkfdT = (1837.75229568549) * invT2;
// reverse
phi_r = sc[3]*sc[17];
Kc = exp(-g_RT[3] + g_RT[5] + g_RT[16] - g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[16]) + (h_RT[3] + h_RT[17]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[16] -= q;// NH2
wdot[17] += q;// NH
// d()/d[H2]
dqdci =  - k_r*sc[17];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[82] -= dqdci;               // dwdot[NH2]/d[H2]
J[83] += dqdci;               // dwdot[NH]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[16];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[126] -= dqdci;              // dwdot[NH2]/d[H]
J[127] += dqdci;              // dwdot[NH]/d[H]
// d()/d[NH2]
dqdci =  + k_f*sc[5];
J[355] += dqdci;              // dwdot[H2]/d[NH2]
J[357] -= dqdci;              // dwdot[H]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[369] += dqdci;              // dwdot[NH]/d[NH2]
// d()/d[NH]
dqdci =  - k_r*sc[3];
J[377] += dqdci;              // dwdot[H2]/d[NH]
J[379] -= dqdci;              // dwdot[H]/d[NH]
J[390] -= dqdci;              // dwdot[NH2]/d[NH]
J[391] += dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[479] += dqdT;               // dwdot[NH]/dT

// reaction 11: NH2 + O <=> H + HNO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[16];
k_f = 660000000
            * exp(-0.5 * tc[0]);
dlnkfdT = -0.5 * invT;
// reverse
phi_r = sc[5]*sc[13];
Kc = exp(-g_RT[5] + g_RT[6] - g_RT[13] + g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[16]) + (h_RT[5] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[13] += q;// HNO
wdot[16] -= q;// NH2
// d()/d[H]
dqdci =  - k_r*sc[13];
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[123] += dqdci;              // dwdot[HNO]/d[H]
J[126] -= dqdci;              // dwdot[NH2]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[16];
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[145] += dqdci;              // dwdot[HNO]/d[O]
J[148] -= dqdci;              // dwdot[NH2]/d[O]
// d()/d[HNO]
dqdci =  - k_r*sc[5];
J[291] += dqdci;              // dwdot[H]/d[HNO]
J[292] -= dqdci;              // dwdot[O]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[302] -= dqdci;              // dwdot[NH2]/d[HNO]
// d()/d[NH2]
dqdci =  + k_f*sc[6];
J[357] += dqdci;              // dwdot[H]/d[NH2]
J[358] -= dqdci;              // dwdot[O]/d[NH2]
J[365] += dqdci;              // dwdot[HNO]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT

// reaction 12: NH2 + O2 <=> H2NO + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[16];
k_f = 260000
            * exp(0.4872 * tc[0] - (14618.4441416271) * invT);
dlnkfdT = 0.4872 * invT + (14618.4441416271) * invT2;
// reverse
phi_r = sc[6]*sc[19];
Kc = exp(g_RT[2] - g_RT[6] + g_RT[16] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[6] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[6] += q;// O
wdot[16] -= q;// NH2
wdot[19] += q;// H2NO
// d()/d[O2]
dqdci =  + k_f*sc[16];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[60] -= dqdci;               // dwdot[NH2]/d[O2]
J[63] += dqdci;               // dwdot[H2NO]/d[O2]
// d()/d[O]
dqdci =  - k_r*sc[19];
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[148] -= dqdci;              // dwdot[NH2]/d[O]
J[151] += dqdci;              // dwdot[H2NO]/d[O]
// d()/d[NH2]
dqdci =  + k_f*sc[2];
J[354] -= dqdci;              // dwdot[O2]/d[NH2]
J[358] += dqdci;              // dwdot[O]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[371] += dqdci;              // dwdot[H2NO]/d[NH2]
// d()/d[H2NO]
dqdci =  - k_r*sc[6];
J[420] -= dqdci;              // dwdot[O2]/d[H2NO]
J[424] += dqdci;              // dwdot[O]/d[H2NO]
J[434] -= dqdci;              // dwdot[NH2]/d[H2NO]
J[437] += dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[481] += dqdT;               // dwdot[H2NO]/dT

// reaction 13: NH2 + OH <=> H2O + NH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[16];
k_f = 4
            * exp(2 * tc[0] - (503.93626563682) * invT);
dlnkfdT = 2 * invT + (503.93626563682) * invT2;
// reverse
phi_r = sc[9]*sc[17];
Kc = exp(g_RT[7] - g_RT[9] + g_RT[16] - g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[16]) + (h_RT[9] + h_RT[17]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[16] -= q;// NH2
wdot[17] += q;// NH
// d()/d[OH]
dqdci =  + k_f*sc[16];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[170] -= dqdci;              // dwdot[NH2]/d[OH]
J[171] += dqdci;              // dwdot[NH]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[17];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[214] -= dqdci;              // dwdot[NH2]/d[H2O]
J[215] += dqdci;              // dwdot[NH]/d[H2O]
// d()/d[NH2]
dqdci =  + k_f*sc[7];
J[359] -= dqdci;              // dwdot[OH]/d[NH2]
J[361] += dqdci;              // dwdot[H2O]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[369] += dqdci;              // dwdot[NH]/d[NH2]
// d()/d[NH]
dqdci =  - k_r*sc[9];
J[381] -= dqdci;              // dwdot[OH]/d[NH]
J[383] += dqdci;              // dwdot[H2O]/d[NH]
J[390] -= dqdci;              // dwdot[NH2]/d[NH]
J[391] += dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[479] += dqdT;               // dwdot[NH]/dT

// reaction 14: N + NH2 <=> 2 H + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[14]*sc[16];
k_f = 70000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = (sc[5] * sc[5])*sc[18];
Kc = refC * exp(-2.000000*g_RT[5] + g_RT[14] + g_RT[16] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[14] + h_RT[16]) + (2.000000*h_RT[5] + h_RT[18]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += 2 * q;// H
wdot[14] -= q;// N
wdot[16] -= q;// NH2
wdot[18] += q;// N2
// d()/d[H]
dqdci =  - k_r*2.000000*sc[5]*sc[18];
J[115] += 2 * dqdci;          // dwdot[H]/d[H]
J[124] -= dqdci;              // dwdot[N]/d[H]
J[126] -= dqdci;              // dwdot[NH2]/d[H]
J[128] += dqdci;              // dwdot[N2]/d[H]
// d()/d[N]
dqdci =  + k_f*sc[16];
J[313] += 2 * dqdci;          // dwdot[H]/d[N]
J[322] -= dqdci;              // dwdot[N]/d[N]
J[324] -= dqdci;              // dwdot[NH2]/d[N]
J[326] += dqdci;              // dwdot[N2]/d[N]
// d()/d[NH2]
dqdci =  + k_f*sc[14];
J[357] += 2 * dqdci;          // dwdot[H]/d[NH2]
J[366] -= dqdci;              // dwdot[N]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[370] += dqdci;              // dwdot[N2]/d[NH2]
// d()/d[N2]
dqdci =  - k_r*sc[5]*sc[5];
J[401] += 2 * dqdci;          // dwdot[H]/d[N2]
J[410] -= dqdci;              // dwdot[N]/d[N2]
J[412] -= dqdci;              // dwdot[NH2]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[467] += 2 * dqdT;           // dwdot[H]/dT
J[476] -= dqdT;               // dwdot[N]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 15: NH2 + NO <=> H2O + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[16];
k_f = 280000000000000
            * exp(-2.654 * tc[0] - (633.046565582337) * invT);
dlnkfdT = -2.654 * invT + (633.046565582337) * invT2;
// reverse
phi_r = sc[9]*sc[18];
Kc = exp(g_RT[0] - g_RT[9] + g_RT[16] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[16]) + (h_RT[9] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[9] += q;// H2O
wdot[16] -= q;// NH2
wdot[18] += q;// N2
// d()/d[NO]
dqdci =  + k_f*sc[16];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[9] += dqdci;                // dwdot[H2O]/d[NO]
J[16] -= dqdci;               // dwdot[NH2]/d[NO]
J[18] += dqdci;               // dwdot[N2]/d[NO]
// d()/d[H2O]
dqdci =  - k_r*sc[18];
J[198] -= dqdci;              // dwdot[NO]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[214] -= dqdci;              // dwdot[NH2]/d[H2O]
J[216] += dqdci;              // dwdot[N2]/d[H2O]
// d()/d[NH2]
dqdci =  + k_f*sc[0];
J[352] -= dqdci;              // dwdot[NO]/d[NH2]
J[361] += dqdci;              // dwdot[H2O]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[370] += dqdci;              // dwdot[N2]/d[NH2]
// d()/d[N2]
dqdci =  - k_r*sc[9];
J[396] -= dqdci;              // dwdot[NO]/d[N2]
J[405] += dqdci;              // dwdot[H2O]/d[N2]
J[412] -= dqdci;              // dwdot[NH2]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 16: NH2 + NO <=> N2H + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[16];
k_f = 31000000
            * exp(-0.48 * tc[0] - (593.795665649569) * invT);
dlnkfdT = -0.48 * invT + (593.795665649569) * invT2;
// reverse
phi_r = sc[7]*sc[15];
Kc = exp(g_RT[0] - g_RT[7] - g_RT[15] + g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[16]) + (h_RT[7] + h_RT[15]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[7] += q;// OH
wdot[15] += q;// N2H
wdot[16] -= q;// NH2
// d()/d[NO]
dqdci =  + k_f*sc[16];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[15] += dqdci;               // dwdot[N2H]/d[NO]
J[16] -= dqdci;               // dwdot[NH2]/d[NO]
// d()/d[OH]
dqdci =  - k_r*sc[15];
J[154] -= dqdci;              // dwdot[NO]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[169] += dqdci;              // dwdot[N2H]/d[OH]
J[170] -= dqdci;              // dwdot[NH2]/d[OH]
// d()/d[N2H]
dqdci =  - k_r*sc[7];
J[330] -= dqdci;              // dwdot[NO]/d[N2H]
J[337] += dqdci;              // dwdot[OH]/d[N2H]
J[345] += dqdci;              // dwdot[N2H]/d[N2H]
J[346] -= dqdci;              // dwdot[NH2]/d[N2H]
// d()/d[NH2]
dqdci =  + k_f*sc[0];
J[352] -= dqdci;              // dwdot[NO]/d[NH2]
J[359] += dqdci;              // dwdot[OH]/d[NH2]
J[367] += dqdci;              // dwdot[N2H]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[477] += dqdT;               // dwdot[N2H]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT

// reaction 18: H + NH3 <=> H2 + NH2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[12];
k_f = 0.64
            * exp(2.39 * tc[0] - (5123.57093322397) * invT);
dlnkfdT = 2.39 * invT + (5123.57093322397) * invT2;
// reverse
phi_r = sc[3]*sc[16];
Kc = exp(-g_RT[3] + g_RT[5] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[12]) + (h_RT[3] + h_RT[16]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// d()/d[H2]
dqdci =  - k_r*sc[16];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[78] -= dqdci;               // dwdot[NH3]/d[H2]
J[82] += dqdci;               // dwdot[NH2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[12];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[122] -= dqdci;              // dwdot[NH3]/d[H]
J[126] += dqdci;              // dwdot[NH2]/d[H]
// d()/d[NH3]
dqdci =  + k_f*sc[5];
J[267] += dqdci;              // dwdot[H2]/d[NH3]
J[269] -= dqdci;              // dwdot[H]/d[NH3]
J[276] -= dqdci;              // dwdot[NH3]/d[NH3]
J[280] += dqdci;              // dwdot[NH2]/d[NH3]
// d()/d[NH2]
dqdci =  - k_r*sc[3];
J[355] += dqdci;              // dwdot[H2]/d[NH2]
J[357] -= dqdci;              // dwdot[H]/d[NH2]
J[364] -= dqdci;              // dwdot[NH3]/d[NH2]
J[368] += dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[474] -= dqdT;               // dwdot[NH3]/dT
J[478] += dqdT;               // dwdot[NH2]/dT

// reaction 19: NH3 + O <=> NH2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[12];
k_f = 9.4
            * exp(1.94 * tc[0] - (3253.35109826075) * invT);
dlnkfdT = 1.94 * invT + (3253.35109826075) * invT2;
// reverse
phi_r = sc[7]*sc[16];
Kc = exp(g_RT[6] - g_RT[7] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[7] + h_RT[16]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// d()/d[O]
dqdci =  + k_f*sc[12];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[144] -= dqdci;              // dwdot[NH3]/d[O]
J[148] += dqdci;              // dwdot[NH2]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[16];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[166] -= dqdci;              // dwdot[NH3]/d[OH]
J[170] += dqdci;              // dwdot[NH2]/d[OH]
// d()/d[NH3]
dqdci =  + k_f*sc[6];
J[270] -= dqdci;              // dwdot[O]/d[NH3]
J[271] += dqdci;              // dwdot[OH]/d[NH3]
J[276] -= dqdci;              // dwdot[NH3]/d[NH3]
J[280] += dqdci;              // dwdot[NH2]/d[NH3]
// d()/d[NH2]
dqdci =  - k_r*sc[7];
J[358] -= dqdci;              // dwdot[O]/d[NH2]
J[359] += dqdci;              // dwdot[OH]/d[NH2]
J[364] -= dqdci;              // dwdot[NH3]/d[NH2]
J[368] += dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[474] -= dqdT;               // dwdot[NH3]/dT
J[478] += dqdT;               // dwdot[NH2]/dT

// reaction 20: NH3 + OH <=> H2O + NH2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[12];
k_f = 2.04
            * exp(2.04 * tc[0] - (285.042048178425) * invT);
dlnkfdT = 2.04 * invT + (285.042048178425) * invT2;
// reverse
phi_r = sc[9]*sc[16];
Kc = exp(g_RT[7] - g_RT[9] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[12]) + (h_RT[9] + h_RT[16]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// d()/d[OH]
dqdci =  + k_f*sc[12];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[166] -= dqdci;              // dwdot[NH3]/d[OH]
J[170] += dqdci;              // dwdot[NH2]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[16];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[210] -= dqdci;              // dwdot[NH3]/d[H2O]
J[214] += dqdci;              // dwdot[NH2]/d[H2O]
// d()/d[NH3]
dqdci =  + k_f*sc[7];
J[271] -= dqdci;              // dwdot[OH]/d[NH3]
J[273] += dqdci;              // dwdot[H2O]/d[NH3]
J[276] -= dqdci;              // dwdot[NH3]/d[NH3]
J[280] += dqdci;              // dwdot[NH2]/d[NH3]
// d()/d[NH2]
dqdci =  - k_r*sc[9];
J[359] -= dqdci;              // dwdot[OH]/d[NH2]
J[361] += dqdci;              // dwdot[H2O]/d[NH2]
J[364] -= dqdci;              // dwdot[NH3]/d[NH2]
J[368] += dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[474] -= dqdT;               // dwdot[NH3]/dT
J[478] += dqdT;               // dwdot[NH2]/dT

// reaction 21: N2H + O2 <=> HO2 + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[15];
k_f = 200000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[8]*sc[18];
Kc = exp(g_RT[2] - g_RT[8] + g_RT[15] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[8] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[8] += q;// HO2
wdot[15] -= q;// N2H
wdot[18] += q;// N2
// d()/d[O2]
dqdci =  + k_f*sc[15];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[52] += dqdci;               // dwdot[HO2]/d[O2]
J[59] -= dqdci;               // dwdot[N2H]/d[O2]
J[62] += dqdci;               // dwdot[N2]/d[O2]
// d()/d[HO2]
dqdci =  - k_r*sc[18];
J[178] -= dqdci;              // dwdot[O2]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[191] -= dqdci;              // dwdot[N2H]/d[HO2]
J[194] += dqdci;              // dwdot[N2]/d[HO2]
// d()/d[N2H]
dqdci =  + k_f*sc[2];
J[332] -= dqdci;              // dwdot[O2]/d[N2H]
J[338] += dqdci;              // dwdot[HO2]/d[N2H]
J[345] -= dqdci;              // dwdot[N2H]/d[N2H]
J[348] += dqdci;              // dwdot[N2]/d[N2H]
// d()/d[N2]
dqdci =  - k_r*sc[8];
J[398] -= dqdci;              // dwdot[O2]/d[N2]
J[404] += dqdci;              // dwdot[HO2]/d[N2]
J[411] -= dqdci;              // dwdot[N2H]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[477] -= dqdT;               // dwdot[N2H]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 23: H + N2H <=> H2 + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[15];
k_f = 100000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[3]*sc[18];
Kc = exp(-g_RT[3] + g_RT[5] + g_RT[15] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[15]) + (h_RT[3] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[15] -= q;// N2H
wdot[18] += q;// N2
// d()/d[H2]
dqdci =  - k_r*sc[18];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[81] -= dqdci;               // dwdot[N2H]/d[H2]
J[84] += dqdci;               // dwdot[N2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[15];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[125] -= dqdci;              // dwdot[N2H]/d[H]
J[128] += dqdci;              // dwdot[N2]/d[H]
// d()/d[N2H]
dqdci =  + k_f*sc[5];
J[333] += dqdci;              // dwdot[H2]/d[N2H]
J[335] -= dqdci;              // dwdot[H]/d[N2H]
J[345] -= dqdci;              // dwdot[N2H]/d[N2H]
J[348] += dqdci;              // dwdot[N2]/d[N2H]
// d()/d[N2]
dqdci =  - k_r*sc[3];
J[399] += dqdci;              // dwdot[H2]/d[N2]
J[401] -= dqdci;              // dwdot[H]/d[N2]
J[411] -= dqdci;              // dwdot[N2H]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[477] -= dqdT;               // dwdot[N2H]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 24: N2H + O <=> H + N2O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[15];
k_f = 100000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[1]*sc[5];
Kc = exp(-g_RT[1] - g_RT[5] + g_RT[6] + g_RT[15]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[15]) + (h_RT[1] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] += q;// N2O
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[15] -= q;// N2H
// d()/d[N2O]
dqdci =  - k_r*sc[5];
J[23] += dqdci;               // dwdot[N2O]/d[N2O]
J[27] += dqdci;               // dwdot[H]/d[N2O]
J[28] -= dqdci;               // dwdot[O]/d[N2O]
J[37] -= dqdci;               // dwdot[N2H]/d[N2O]
// d()/d[H]
dqdci =  - k_r*sc[1];
J[111] += dqdci;              // dwdot[N2O]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[125] -= dqdci;              // dwdot[N2H]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[15];
J[133] += dqdci;              // dwdot[N2O]/d[O]
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[147] -= dqdci;              // dwdot[N2H]/d[O]
// d()/d[N2H]
dqdci =  + k_f*sc[6];
J[331] += dqdci;              // dwdot[N2O]/d[N2H]
J[335] += dqdci;              // dwdot[H]/d[N2H]
J[336] -= dqdci;              // dwdot[O]/d[N2H]
J[345] -= dqdci;              // dwdot[N2H]/d[N2H]
// d()/dT
J[463] += dqdT;               // dwdot[N2O]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[477] -= dqdT;               // dwdot[N2H]/dT

// reaction 25: N2H + OH <=> H2O + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[15];
k_f = 50000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[9]*sc[18];
Kc = exp(g_RT[7] - g_RT[9] + g_RT[15] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[15]) + (h_RT[9] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[15] -= q;// N2H
wdot[18] += q;// N2
// d()/d[OH]
dqdci =  + k_f*sc[15];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[169] -= dqdci;              // dwdot[N2H]/d[OH]
J[172] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[18];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[213] -= dqdci;              // dwdot[N2H]/d[H2O]
J[216] += dqdci;              // dwdot[N2]/d[H2O]
// d()/d[N2H]
dqdci =  + k_f*sc[7];
J[337] -= dqdci;              // dwdot[OH]/d[N2H]
J[339] += dqdci;              // dwdot[H2O]/d[N2H]
J[345] -= dqdci;              // dwdot[N2H]/d[N2H]
J[348] += dqdci;              // dwdot[N2]/d[N2H]
// d()/d[N2]
dqdci =  - k_r*sc[9];
J[403] -= dqdci;              // dwdot[OH]/d[N2]
J[405] += dqdci;              // dwdot[H2O]/d[N2]
J[411] -= dqdci;              // dwdot[N2H]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[477] -= dqdT;               // dwdot[N2H]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 27: H + HNO <=> H2 + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[13];
k_f = 440000
            * exp(0.72 * tc[0] - (327.141154439648) * invT);
dlnkfdT = 0.72 * invT + (327.141154439648) * invT2;
// reverse
phi_r = sc[0]*sc[3];
Kc = exp(-g_RT[0] - g_RT[3] + g_RT[5] + g_RT[13]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[13]) + (h_RT[0] + h_RT[3]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[13] -= q;// HNO
// d()/d[NO]
dqdci =  - k_r*sc[3];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[3] += dqdci;                // dwdot[H2]/d[NO]
J[5] -= dqdci;                // dwdot[H]/d[NO]
J[13] -= dqdci;               // dwdot[HNO]/d[NO]
// d()/d[H2]
dqdci =  - k_r*sc[0];
J[66] += dqdci;               // dwdot[NO]/d[H2]
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[79] -= dqdci;               // dwdot[HNO]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[13];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[123] -= dqdci;              // dwdot[HNO]/d[H]
// d()/d[HNO]
dqdci =  + k_f*sc[5];
J[286] += dqdci;              // dwdot[NO]/d[HNO]
J[289] += dqdci;              // dwdot[H2]/d[HNO]
J[291] -= dqdci;              // dwdot[H]/d[HNO]
J[299] -= dqdci;              // dwdot[HNO]/d[HNO]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[475] -= dqdT;               // dwdot[HNO]/dT

// reaction 28: HNO + OH <=> H2O + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[13];
k_f = 36000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[0]*sc[9];
Kc = exp(-g_RT[0] + g_RT[7] - g_RT[9] + g_RT[13]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[13]) + (h_RT[0] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[13] -= q;// HNO
// d()/d[NO]
dqdci =  - k_r*sc[9];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[7] -= dqdci;                // dwdot[OH]/d[NO]
J[9] += dqdci;                // dwdot[H2O]/d[NO]
J[13] -= dqdci;               // dwdot[HNO]/d[NO]
// d()/d[OH]
dqdci =  + k_f*sc[13];
J[154] += dqdci;              // dwdot[NO]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[167] -= dqdci;              // dwdot[HNO]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[0];
J[198] += dqdci;              // dwdot[NO]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[211] -= dqdci;              // dwdot[HNO]/d[H2O]
// d()/d[HNO]
dqdci =  + k_f*sc[7];
J[286] += dqdci;              // dwdot[NO]/d[HNO]
J[293] -= dqdci;              // dwdot[OH]/d[HNO]
J[295] += dqdci;              // dwdot[H2O]/d[HNO]
J[299] -= dqdci;              // dwdot[HNO]/d[HNO]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[475] -= dqdT;               // dwdot[HNO]/dT

// reaction 30: H + N2O <=> N2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[5];
k_f = 33100
            * exp(- (2561.37282894602) * invT);
dlnkfdT = (2561.37282894602) * invT2;
// reverse
phi_r = sc[7]*sc[18];
Kc = exp(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[5]) + (h_RT[7] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] -= q;// N2O
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[18] += q;// N2
// d()/d[N2O]
dqdci =  + k_f*sc[5];
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[27] -= dqdci;               // dwdot[H]/d[N2O]
J[29] += dqdci;               // dwdot[OH]/d[N2O]
J[40] += dqdci;               // dwdot[N2]/d[N2O]
// d()/d[H]
dqdci =  + k_f*sc[1];
J[111] -= dqdci;              // dwdot[N2O]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[128] += dqdci;              // dwdot[N2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[18];
J[155] -= dqdci;              // dwdot[N2O]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[172] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[N2]
dqdci =  - k_r*sc[7];
J[397] -= dqdci;              // dwdot[N2O]/d[N2]
J[401] -= dqdci;              // dwdot[H]/d[N2]
J[403] += dqdci;              // dwdot[OH]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 31: H + N2O <=> N2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[5];
k_f = 783000000
            * exp(- (9757.37114995351) * invT);
dlnkfdT = (9757.37114995351) * invT2;
// reverse
phi_r = sc[7]*sc[18];
Kc = exp(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[5]) + (h_RT[7] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] -= q;// N2O
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[18] += q;// N2
// d()/d[N2O]
dqdci =  + k_f*sc[5];
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[27] -= dqdci;               // dwdot[H]/d[N2O]
J[29] += dqdci;               // dwdot[OH]/d[N2O]
J[40] += dqdci;               // dwdot[N2]/d[N2O]
// d()/d[H]
dqdci =  + k_f*sc[1];
J[111] -= dqdci;              // dwdot[N2O]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[128] += dqdci;              // dwdot[N2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[18];
J[155] -= dqdci;              // dwdot[N2O]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[172] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[N2]
dqdci =  - k_r*sc[7];
J[397] -= dqdci;              // dwdot[N2O]/d[N2]
J[401] -= dqdci;              // dwdot[H]/d[N2]
J[403] += dqdci;              // dwdot[OH]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 32: N2O + O <=> 2 NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[6];
k_f = 91500000
            * exp(- (13935.5791261301) * invT);
dlnkfdT = (13935.5791261301) * invT2;
// reverse
phi_r = (sc[0] * sc[0]);
Kc = exp(-2.000000*g_RT[0] + g_RT[1] + g_RT[6]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (2.000000*h_RT[0]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += 2 * q;// NO
wdot[1] -= q;// N2O
wdot[6] -= q;// O
// d()/d[NO]
dqdci =  - k_r*2.000000*sc[0];
J[0] += 2 * dqdci;            // dwdot[NO]/d[NO]
J[1] -= dqdci;                // dwdot[N2O]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
// d()/d[N2O]
dqdci =  + k_f*sc[6];
J[22] += 2 * dqdci;           // dwdot[NO]/d[N2O]
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[28] -= dqdci;               // dwdot[O]/d[N2O]
// d()/d[O]
dqdci =  + k_f*sc[1];
J[132] += 2 * dqdci;          // dwdot[NO]/d[O]
J[133] -= dqdci;              // dwdot[N2O]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
// d()/dT
J[462] += 2 * dqdT;           // dwdot[NO]/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[468] -= dqdT;               // dwdot[O]/dT

// reaction 33: N2O + OH <=> HO2 + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[7];
k_f = 20000000
            * exp(- (20128.6666321888) * invT);
dlnkfdT = (20128.6666321888) * invT2;
// reverse
phi_r = sc[8]*sc[18];
Kc = exp(g_RT[1] + g_RT[7] - g_RT[8] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[8] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] -= q;// N2O
wdot[7] -= q;// OH
wdot[8] += q;// HO2
wdot[18] += q;// N2
// d()/d[N2O]
dqdci =  + k_f*sc[7];
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[29] -= dqdci;               // dwdot[OH]/d[N2O]
J[30] += dqdci;               // dwdot[HO2]/d[N2O]
J[40] += dqdci;               // dwdot[N2]/d[N2O]
// d()/d[OH]
dqdci =  + k_f*sc[1];
J[155] -= dqdci;              // dwdot[N2O]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[172] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[18];
J[177] -= dqdci;              // dwdot[N2O]/d[HO2]
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[194] += dqdci;              // dwdot[N2]/d[HO2]
// d()/d[N2]
dqdci =  - k_r*sc[8];
J[397] -= dqdci;              // dwdot[N2O]/d[N2]
J[403] -= dqdci;              // dwdot[OH]/d[N2]
J[404] += dqdci;              // dwdot[HO2]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 35: HO2 + NO <=> NO2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[8];
k_f = 2100000
            * exp(- (-241.745286252587) * invT);
dlnkfdT = (-241.745286252587) * invT2;
// reverse
phi_r = sc[7]*sc[11];
Kc = exp(g_RT[0] - g_RT[7] + g_RT[8] - g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[8]) + (h_RT[7] + h_RT[11]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[7] += q;// OH
wdot[8] -= q;// HO2
wdot[11] += q;// NO2
// d()/d[NO]
dqdci =  + k_f*sc[8];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[8] -= dqdci;                // dwdot[HO2]/d[NO]
J[11] += dqdci;               // dwdot[NO2]/d[NO]
// d()/d[OH]
dqdci =  - k_r*sc[11];
J[154] -= dqdci;              // dwdot[NO]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
J[165] += dqdci;              // dwdot[NO2]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[0];
J[176] -= dqdci;              // dwdot[NO]/d[HO2]
J[183] += dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[187] += dqdci;              // dwdot[NO2]/d[HO2]
// d()/d[NO2]
dqdci =  - k_r*sc[7];
J[242] -= dqdci;              // dwdot[NO]/d[NO2]
J[249] += dqdci;              // dwdot[OH]/d[NO2]
J[250] -= dqdci;              // dwdot[HO2]/d[NO2]
J[253] += dqdci;              // dwdot[NO2]/d[NO2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[473] += dqdT;               // dwdot[NO2]/dT

// reaction 36: H + NO2 <=> NO + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[11];
k_f = 350000000
            * exp(- (755.308086706252) * invT);
dlnkfdT = (755.308086706252) * invT2;
// reverse
phi_r = sc[0]*sc[7];
Kc = exp(-g_RT[0] + g_RT[5] - g_RT[7] + g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[11]) + (h_RT[0] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[11] -= q;// NO2
// d()/d[NO]
dqdci =  - k_r*sc[7];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[5] -= dqdci;                // dwdot[H]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[11] -= dqdci;               // dwdot[NO2]/d[NO]
// d()/d[H]
dqdci =  + k_f*sc[11];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[121] -= dqdci;              // dwdot[NO2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[0];
J[154] += dqdci;              // dwdot[NO]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[165] -= dqdci;              // dwdot[NO2]/d[OH]
// d()/d[NO2]
dqdci =  + k_f*sc[5];
J[242] += dqdci;              // dwdot[NO]/d[NO2]
J[247] -= dqdci;              // dwdot[H]/d[NO2]
J[249] += dqdci;              // dwdot[OH]/d[NO2]
J[253] -= dqdci;              // dwdot[NO2]/d[NO2]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[473] -= dqdT;               // dwdot[NO2]/dT

// reaction 37: NO2 + O <=> NO + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[11];
k_f = 10000000
            * exp(- (301.879677816251) * invT);
dlnkfdT = (301.879677816251) * invT2;
// reverse
phi_r = sc[0]*sc[2];
Kc = exp(-g_RT[0] - g_RT[2] + g_RT[6] + g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[11]) + (h_RT[0] + h_RT[2]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[2] += q;// O2
wdot[6] -= q;// O
wdot[11] -= q;// NO2
// d()/d[NO]
dqdci =  - k_r*sc[2];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[2] += dqdci;                // dwdot[O2]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
J[11] -= dqdci;               // dwdot[NO2]/d[NO]
// d()/d[O2]
dqdci =  - k_r*sc[0];
J[44] += dqdci;               // dwdot[NO]/d[O2]
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[50] -= dqdci;               // dwdot[O]/d[O2]
J[55] -= dqdci;               // dwdot[NO2]/d[O2]
// d()/d[O]
dqdci =  + k_f*sc[11];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[134] += dqdci;              // dwdot[O2]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[143] -= dqdci;              // dwdot[NO2]/d[O]
// d()/d[NO2]
dqdci =  + k_f*sc[6];
J[242] += dqdci;              // dwdot[NO]/d[NO2]
J[244] += dqdci;              // dwdot[O2]/d[NO2]
J[248] -= dqdci;              // dwdot[O]/d[NO2]
J[253] -= dqdci;              // dwdot[NO2]/d[NO2]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[473] -= dqdT;               // dwdot[NO2]/dT

// reaction 38: H2NO + O <=> HNO + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[19];
k_f = 30
            * exp(2 * tc[0] - (1006.43333160944) * invT);
dlnkfdT = 2 * invT + (1006.43333160944) * invT2;
// reverse
phi_r = sc[7]*sc[13];
Kc = exp(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[19]) + (h_RT[7] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[13] += q;// HNO
wdot[19] -= q;// H2NO
// d()/d[O]
dqdci =  + k_f*sc[19];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[145] += dqdci;              // dwdot[HNO]/d[O]
J[151] -= dqdci;              // dwdot[H2NO]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[13];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[167] += dqdci;              // dwdot[HNO]/d[OH]
J[173] -= dqdci;              // dwdot[H2NO]/d[OH]
// d()/d[HNO]
dqdci =  - k_r*sc[7];
J[292] -= dqdci;              // dwdot[O]/d[HNO]
J[293] += dqdci;              // dwdot[OH]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[305] -= dqdci;              // dwdot[H2NO]/d[HNO]
// d()/d[H2NO]
dqdci =  + k_f*sc[6];
J[424] -= dqdci;              // dwdot[O]/d[H2NO]
J[425] += dqdci;              // dwdot[OH]/d[H2NO]
J[431] += dqdci;              // dwdot[HNO]/d[H2NO]
J[437] -= dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[481] -= dqdT;               // dwdot[H2NO]/dT

// reaction 39: H2NO + O2 <=> HNO + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[19];
k_f = 3000000
            * exp(- (12580.416645118) * invT);
dlnkfdT = (12580.416645118) * invT2;
// reverse
phi_r = sc[8]*sc[13];
Kc = exp(g_RT[2] - g_RT[8] - g_RT[13] + g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[8] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[8] += q;// HO2
wdot[13] += q;// HNO
wdot[19] -= q;// H2NO
// d()/d[O2]
dqdci =  + k_f*sc[19];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[52] += dqdci;               // dwdot[HO2]/d[O2]
J[57] += dqdci;               // dwdot[HNO]/d[O2]
J[63] -= dqdci;               // dwdot[H2NO]/d[O2]
// d()/d[HO2]
dqdci =  - k_r*sc[13];
J[178] -= dqdci;              // dwdot[O2]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[189] += dqdci;              // dwdot[HNO]/d[HO2]
J[195] -= dqdci;              // dwdot[H2NO]/d[HO2]
// d()/d[HNO]
dqdci =  - k_r*sc[8];
J[288] -= dqdci;              // dwdot[O2]/d[HNO]
J[294] += dqdci;              // dwdot[HO2]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[305] -= dqdci;              // dwdot[H2NO]/d[HNO]
// d()/d[H2NO]
dqdci =  + k_f*sc[2];
J[420] -= dqdci;              // dwdot[O2]/d[H2NO]
J[426] += dqdci;              // dwdot[HO2]/d[H2NO]
J[431] += dqdci;              // dwdot[HNO]/d[H2NO]
J[437] -= dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[481] -= dqdT;               // dwdot[H2NO]/dT

// reaction 40: H2NO + HO2 <=> H2O2 + HNO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[8]*sc[19];
k_f = 0.029
            * exp(2.69 * tc[0] - (-805.146665287552) * invT);
dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
// reverse
phi_r = sc[10]*sc[13];
Kc = exp(g_RT[8] - g_RT[10] - g_RT[13] + g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[8] + h_RT[19]) + (h_RT[10] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[8] -= q;// HO2
wdot[10] += q;// H2O2
wdot[13] += q;// HNO
wdot[19] -= q;// H2NO
// d()/d[HO2]
dqdci =  + k_f*sc[19];
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[186] += dqdci;              // dwdot[H2O2]/d[HO2]
J[189] += dqdci;              // dwdot[HNO]/d[HO2]
J[195] -= dqdci;              // dwdot[H2NO]/d[HO2]
// d()/d[H2O2]
dqdci =  - k_r*sc[13];
J[228] -= dqdci;              // dwdot[HO2]/d[H2O2]
J[230] += dqdci;              // dwdot[H2O2]/d[H2O2]
J[233] += dqdci;              // dwdot[HNO]/d[H2O2]
J[239] -= dqdci;              // dwdot[H2NO]/d[H2O2]
// d()/d[HNO]
dqdci =  - k_r*sc[10];
J[294] -= dqdci;              // dwdot[HO2]/d[HNO]
J[296] += dqdci;              // dwdot[H2O2]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[305] -= dqdci;              // dwdot[H2NO]/d[HNO]
// d()/d[H2NO]
dqdci =  + k_f*sc[8];
J[426] -= dqdci;              // dwdot[HO2]/d[H2NO]
J[428] += dqdci;              // dwdot[H2O2]/d[H2NO]
J[431] += dqdci;              // dwdot[HNO]/d[H2NO]
J[437] -= dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[472] += dqdT;               // dwdot[H2O2]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[481] -= dqdT;               // dwdot[H2NO]/dT

// reaction 41: H + O2 <=> O + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[5];
k_f = 35200000000
            * exp(-0.7 * tc[0] - (8589.80280978675) * invT);
dlnkfdT = -0.7 * invT + (8589.80280978675) * invT2;
// reverse
phi_r = sc[6]*sc[7];
Kc = exp(g_RT[2] + g_RT[5] - g_RT[6] - g_RT[7]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[6] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[5] -= q;// H
wdot[6] += q;// O
wdot[7] += q;// OH
// d()/d[O2]
dqdci =  + k_f*sc[5];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[49] -= dqdci;               // dwdot[H]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[51] += dqdci;               // dwdot[OH]/d[O2]
// d()/d[H]
dqdci =  + k_f*sc[2];
J[112] -= dqdci;              // dwdot[O2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[116] += dqdci;              // dwdot[O]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
// d()/d[O]
dqdci =  - k_r*sc[7];
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[137] -= dqdci;              // dwdot[H]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[6];
J[156] -= dqdci;              // dwdot[O2]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[160] += dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT

// reaction 42: H2 + O <=> H + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[3]*sc[6];
k_f = 0.0506
            * exp(2.67 * tc[0] - (3165.54985441114) * invT);
dlnkfdT = 2.67 * invT + (3165.54985441114) * invT2;
// reverse
phi_r = sc[5]*sc[7];
Kc = exp(g_RT[3] - g_RT[5] + g_RT[6] - g_RT[7]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[3] + h_RT[6]) + (h_RT[5] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] -= q;// H2
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[7] += q;// OH
// d()/d[H2]
dqdci =  + k_f*sc[6];
J[69] -= dqdci;               // dwdot[H2]/d[H2]
J[71] += dqdci;               // dwdot[H]/d[H2]
J[72] -= dqdci;               // dwdot[O]/d[H2]
J[73] += dqdci;               // dwdot[OH]/d[H2]
// d()/d[H]
dqdci =  - k_r*sc[7];
J[113] -= dqdci;              // dwdot[H2]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[3];
J[135] -= dqdci;              // dwdot[H2]/d[O]
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[5];
J[157] -= dqdci;              // dwdot[H2]/d[OH]
J[159] += dqdci;              // dwdot[H]/d[OH]
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
// d()/dT
J[465] -= dqdT;               // dwdot[H2]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT

// reaction 43: H2 + OH <=> H + H2O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[3]*sc[7];
k_f = 1170
            * exp(1.3 * tc[0] - (1829.33348086658) * invT);
dlnkfdT = 1.3 * invT + (1829.33348086658) * invT2;
// reverse
phi_r = sc[5]*sc[9];
Kc = exp(g_RT[3] - g_RT[5] + g_RT[7] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[3] + h_RT[7]) + (h_RT[5] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] -= q;// H2
wdot[5] += q;// H
wdot[7] -= q;// OH
wdot[9] += q;// H2O
// d()/d[H2]
dqdci =  + k_f*sc[7];
J[69] -= dqdci;               // dwdot[H2]/d[H2]
J[71] += dqdci;               // dwdot[H]/d[H2]
J[73] -= dqdci;               // dwdot[OH]/d[H2]
J[75] += dqdci;               // dwdot[H2O]/d[H2]
// d()/d[H]
dqdci =  - k_r*sc[9];
J[113] -= dqdci;              // dwdot[H2]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[117] -= dqdci;              // dwdot[OH]/d[H]
J[119] += dqdci;              // dwdot[H2O]/d[H]
// d()/d[OH]
dqdci =  + k_f*sc[3];
J[157] -= dqdci;              // dwdot[H2]/d[OH]
J[159] += dqdci;              // dwdot[H]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[5];
J[201] -= dqdci;              // dwdot[H2]/d[H2O]
J[203] += dqdci;              // dwdot[H]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[465] -= dqdT;               // dwdot[H2]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 44: H2O + O <=> 2 OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[9];
k_f = 0.7
            * exp(2.33 * tc[0] - (7320.93695479349) * invT);
dlnkfdT = 2.33 * invT + (7320.93695479349) * invT2;
// reverse
phi_r = (sc[7] * sc[7]);
Kc = exp(g_RT[6] - 2.000000*g_RT[7] + g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[9]) + (2.000000*h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += 2 * q;// OH
wdot[9] -= q;// H2O
// d()/d[O]
dqdci =  + k_f*sc[9];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += 2 * dqdci;          // dwdot[OH]/d[O]
J[141] -= dqdci;              // dwdot[H2O]/d[O]
// d()/d[OH]
dqdci =  - k_r*2.000000*sc[7];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += 2 * dqdci;          // dwdot[OH]/d[OH]
J[163] -= dqdci;              // dwdot[H2O]/d[OH]
// d()/d[H2O]
dqdci =  + k_f*sc[6];
J[204] -= dqdci;              // dwdot[O]/d[H2O]
J[205] += 2 * dqdci;          // dwdot[OH]/d[H2O]
J[207] -= dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += 2 * dqdT;           // dwdot[OH]/dT
J[471] -= dqdT;               // dwdot[H2O]/dT

// reaction 50: H + HO2 <=> 2 OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[8];
k_f = 70800000
            * exp(- (148.413691245786) * invT);
dlnkfdT = (148.413691245786) * invT2;
// reverse
phi_r = (sc[7] * sc[7]);
Kc = exp(g_RT[5] - 2.000000*g_RT[7] + g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (2.000000*h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[7] += 2 * q;// OH
wdot[8] -= q;// HO2
// d()/d[H]
dqdci =  + k_f*sc[8];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += 2 * dqdci;          // dwdot[OH]/d[H]
J[118] -= dqdci;              // dwdot[HO2]/d[H]
// d()/d[OH]
dqdci =  - k_r*2.000000*sc[7];
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += 2 * dqdci;          // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[5];
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[183] += 2 * dqdci;          // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
// d()/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += 2 * dqdT;           // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT

// reaction 51: H + HO2 <=> H2 + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[8];
k_f = 16600000
            * exp(- (414.096994290704) * invT);
dlnkfdT = (414.096994290704) * invT2;
// reverse
phi_r = sc[2]*sc[3];
Kc = exp(-g_RT[2] - g_RT[3] + g_RT[5] + g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (h_RT[2] + h_RT[3]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[8] -= q;// HO2
// d()/d[O2]
dqdci =  - k_r*sc[3];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[47] += dqdci;               // dwdot[H2]/d[O2]
J[49] -= dqdci;               // dwdot[H]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
// d()/d[H2]
dqdci =  - k_r*sc[2];
J[68] += dqdci;               // dwdot[O2]/d[H2]
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[74] -= dqdci;               // dwdot[HO2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[8];
J[112] += dqdci;              // dwdot[O2]/d[H]
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[118] -= dqdci;              // dwdot[HO2]/d[H]
// d()/d[HO2]
dqdci =  + k_f*sc[5];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[179] += dqdci;              // dwdot[H2]/d[HO2]
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT

// reaction 52: H + HO2 <=> H2O + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[8];
k_f = 31000000
            * exp(- (865.955367183394) * invT);
dlnkfdT = (865.955367183394) * invT2;
// reverse
phi_r = sc[6]*sc[9];
Kc = exp(g_RT[5] - g_RT[6] + g_RT[8] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (h_RT[6] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[6] += q;// O
wdot[8] -= q;// HO2
wdot[9] += q;// H2O
// d()/d[H]
dqdci =  + k_f*sc[8];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[116] += dqdci;              // dwdot[O]/d[H]
J[118] -= dqdci;              // dwdot[HO2]/d[H]
J[119] += dqdci;              // dwdot[H2O]/d[H]
// d()/d[O]
dqdci =  - k_r*sc[9];
J[137] -= dqdci;              // dwdot[H]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[140] -= dqdci;              // dwdot[HO2]/d[O]
J[141] += dqdci;              // dwdot[H2O]/d[O]
// d()/d[HO2]
dqdci =  + k_f*sc[5];
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[182] += dqdci;              // dwdot[O]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[6];
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[204] += dqdci;              // dwdot[O]/d[H2O]
J[206] -= dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 53: HO2 + O <=> O2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[8];
k_f = 20000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[2]*sc[7];
Kc = exp(-g_RT[2] + g_RT[6] - g_RT[7] + g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[8]) + (h_RT[2] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[8] -= q;// HO2
// d()/d[O2]
dqdci =  - k_r*sc[7];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[50] -= dqdci;               // dwdot[O]/d[O2]
J[51] += dqdci;               // dwdot[OH]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
// d()/d[O]
dqdci =  + k_f*sc[8];
J[134] += dqdci;              // dwdot[O2]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[140] -= dqdci;              // dwdot[HO2]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[2];
J[156] += dqdci;              // dwdot[O2]/d[OH]
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[6];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[182] -= dqdci;              // dwdot[O]/d[HO2]
J[183] += dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT

// reaction 54: HO2 + OH <=> H2O + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[8];
k_f = 7000000
            * exp(- (-550.846123223136) * invT);
dlnkfdT = (-550.846123223136) * invT2;
// reverse
phi_r = sc[2]*sc[9];
Kc = exp(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[8]) + (h_RT[2] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[7] -= q;// OH
wdot[8] -= q;// HO2
wdot[9] += q;// H2O
// d()/d[O2]
dqdci =  - k_r*sc[9];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[51] -= dqdci;               // dwdot[OH]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
J[53] += dqdci;               // dwdot[H2O]/d[O2]
// d()/d[OH]
dqdci =  + k_f*sc[8];
J[156] += dqdci;              // dwdot[O2]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[7];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[2];
J[200] += dqdci;              // dwdot[O2]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] -= dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 55: HO2 + OH <=> H2O + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[8];
k_f = 450000000
            * exp(- (5500.02228874582) * invT);
dlnkfdT = (5500.02228874582) * invT2;
// reverse
phi_r = sc[2]*sc[9];
Kc = exp(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[8]) + (h_RT[2] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[7] -= q;// OH
wdot[8] -= q;// HO2
wdot[9] += q;// H2O
// d()/d[O2]
dqdci =  - k_r*sc[9];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[51] -= dqdci;               // dwdot[OH]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
J[53] += dqdci;               // dwdot[H2O]/d[O2]
// d()/d[OH]
dqdci =  + k_f*sc[8];
J[156] += dqdci;              // dwdot[O2]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[7];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[2];
J[200] += dqdci;              // dwdot[O2]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] -= dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 57: 2 HO2 <=> H2O2 + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = (sc[8] * sc[8]);
k_f = 103000000
            * exp(- (5556.55364898232) * invT);
dlnkfdT = (5556.55364898232) * invT2;
// reverse
phi_r = sc[2]*sc[10];
Kc = exp(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[8]) + (h_RT[2] + h_RT[10]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[8] -= 2 * q;// HO2
wdot[10] += q;// H2O2
// d()/d[O2]
dqdci =  - k_r*sc[10];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[52] += -2 * dqdci;          // dwdot[HO2]/d[O2]
J[54] += dqdci;               // dwdot[H2O2]/d[O2]
// d()/d[HO2]
dqdci =  + k_f*2.000000*sc[8];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[184] += -2 * dqdci;         // dwdot[HO2]/d[HO2]
J[186] += dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  - k_r*sc[2];
J[222] += dqdci;              // dwdot[O2]/d[H2O2]
J[228] += -2 * dqdci;         // dwdot[HO2]/d[H2O2]
J[230] += dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[470] += -2 * dqdT;          // dwdot[HO2]/dT
J[472] += dqdT;               // dwdot[H2O2]/dT

// reaction 58: 2 HO2 <=> H2O2 + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = (sc[8] * sc[8]);
k_f = 194000
            * exp(- (-709.002089118902) * invT);
dlnkfdT = (-709.002089118902) * invT2;
// reverse
phi_r = sc[2]*sc[10];
Kc = exp(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[8]) + (h_RT[2] + h_RT[10]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[8] -= 2 * q;// HO2
wdot[10] += q;// H2O2
// d()/d[O2]
dqdci =  - k_r*sc[10];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[52] += -2 * dqdci;          // dwdot[HO2]/d[O2]
J[54] += dqdci;               // dwdot[H2O2]/d[O2]
// d()/d[HO2]
dqdci =  + k_f*2.000000*sc[8];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[184] += -2 * dqdci;         // dwdot[HO2]/d[HO2]
J[186] += dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  - k_r*sc[2];
J[222] += dqdci;              // dwdot[O2]/d[H2O2]
J[228] += -2 * dqdci;         // dwdot[HO2]/d[H2O2]
J[230] += dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[470] += -2 * dqdT;          // dwdot[HO2]/dT
J[472] += dqdT;               // dwdot[H2O2]/dT

// reaction 59: H + H2O2 <=> H2 + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[10];
k_f = 23000000
            * exp(- (4000.59765398081) * invT);
dlnkfdT = (4000.59765398081) * invT2;
// reverse
phi_r = sc[3]*sc[8];
Kc = exp(-g_RT[3] + g_RT[5] - g_RT[8] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[3] + h_RT[8]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[8] += q;// HO2
wdot[10] -= q;// H2O2
// d()/d[H2]
dqdci =  - k_r*sc[8];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[74] += dqdci;               // dwdot[HO2]/d[H2]
J[76] -= dqdci;               // dwdot[H2O2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[10];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[118] += dqdci;              // dwdot[HO2]/d[H]
J[120] -= dqdci;              // dwdot[H2O2]/d[H]
// d()/d[HO2]
dqdci =  - k_r*sc[3];
J[179] += dqdci;              // dwdot[H2]/d[HO2]
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  + k_f*sc[5];
J[223] += dqdci;              // dwdot[H2]/d[H2O2]
J[225] -= dqdci;              // dwdot[H]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 60: H + H2O2 <=> H2O + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[10];
k_f = 10000000
            * exp(- (1804.07703640984) * invT);
dlnkfdT = (1804.07703640984) * invT2;
// reverse
phi_r = sc[7]*sc[9];
Kc = exp(g_RT[5] - g_RT[7] - g_RT[9] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[7] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[9] += q;// H2O
wdot[10] -= q;// H2O2
// d()/d[H]
dqdci =  + k_f*sc[10];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[119] += dqdci;              // dwdot[H2O]/d[H]
J[120] -= dqdci;              // dwdot[H2O2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[9];
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[7];
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[205] += dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[208] -= dqdci;              // dwdot[H2O2]/d[H2O]
// d()/d[H2O2]
dqdci =  + k_f*sc[5];
J[225] -= dqdci;              // dwdot[H]/d[H2O2]
J[227] += dqdci;              // dwdot[OH]/d[H2O2]
J[229] += dqdci;              // dwdot[H2O]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 61: H2O2 + OH <=> H2O + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[10];
k_f = 1740000
            * exp(- (721.627795263942) * invT);
dlnkfdT = (721.627795263942) * invT2;
// reverse
phi_r = sc[8]*sc[9];
Kc = exp(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[10]) + (h_RT[8] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[8] += q;// HO2
wdot[9] += q;// H2O
wdot[10] -= q;// H2O2
// d()/d[OH]
dqdci =  + k_f*sc[10];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[9];
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[8];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] += dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[208] -= dqdci;              // dwdot[H2O2]/d[H2O]
// d()/d[H2O2]
dqdci =  + k_f*sc[7];
J[227] -= dqdci;              // dwdot[OH]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[229] += dqdci;              // dwdot[H2O]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 62: H2O2 + OH <=> H2O + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[10];
k_f = 75900000
            * exp(- (3659.86461739778) * invT);
dlnkfdT = (3659.86461739778) * invT2;
// reverse
phi_r = sc[8]*sc[9];
Kc = exp(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[10]) + (h_RT[8] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[8] += q;// HO2
wdot[9] += q;// H2O
wdot[10] -= q;// H2O2
// d()/d[OH]
dqdci =  + k_f*sc[10];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[9];
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[8];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] += dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[208] -= dqdci;              // dwdot[H2O2]/d[H2O]
// d()/d[H2O2]
dqdci =  + k_f*sc[7];
J[227] -= dqdci;              // dwdot[OH]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[229] += dqdci;              // dwdot[H2O]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 63: H2O2 + O <=> HO2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[10];
k_f = 9.63
            * exp(2 * tc[0] - (2008.53899989296) * invT);
dlnkfdT = 2 * invT + (2008.53899989296) * invT2;
// reverse
phi_r = sc[7]*sc[8];
Kc = exp(g_RT[6] - g_RT[7] - g_RT[8] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[7] + h_RT[8]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[8] += q;// HO2
wdot[10] -= q;// H2O2
// d()/d[O]
dqdci =  + k_f*sc[10];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[140] += dqdci;              // dwdot[HO2]/d[O]
J[142] -= dqdci;              // dwdot[H2O2]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[8];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[7];
J[182] -= dqdci;              // dwdot[O]/d[HO2]
J[183] += dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  + k_f*sc[6];
J[226] -= dqdci;              // dwdot[O]/d[H2O2]
J[227] += dqdci;              // dwdot[OH]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

amrex::Real c_R[21], dcRdT[21], e_RT[21];
amrex::Real * eh_RT;
if (HP) {
cp_R(c_R, tc);
dcvpRdT(dcRdT, tc);
eh_RT = &h_RT[0];
}
else {
cv_R(c_R, tc);
dcvpRdT(dcRdT, tc);
speciesInternalEnergy(e_RT, tc);
eh_RT = &e_RT[0];
}

amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT=0.0, dehmixdT=0.0;
for (int k = 0; k < 21; ++k) {
cmix += c_R[k]*sc[k];
dcmixdT += dcRdT[k]*sc[k];
ehmix += eh_RT[k]*wdot[k];
dehmixdT += invT*(c_R[k]-eh_RT[k])*wdot[k] + eh_RT[k]*J[462+k];
}

amrex::Real cmixinv = 1.0/cmix;
amrex::Real tmp1 = ehmix*cmixinv;
amrex::Real tmp3 = cmixinv*T;
amrex::Real tmp2 = tmp1*tmp3;
amrex::Real dehmixdc;
// dTdot/d[X]
for (int k = 0; k < 21; ++k) {
dehmixdc = 0.0;
for (int m = 0; m < 21; ++m) {
dehmixdc += eh_RT[m]*J[k*22+m];
}
J[k*22+21] = tmp2*c_R[k] - tmp3*dehmixdc;
}
// dTdot/dT
J[483] = -tmp1 + tmp2*dcmixdT - tmp3*dehmixdT;
}

// compute an approx to the reaction Jacobian (for preconditioning)
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void DWDOT_SIMPLIFIED(amrex::Real *  J, amrex::Real *  sc, amrex::Real *  Tp, const int * HP)
{
amrex::Real c[21];

for (int k=0; k<21; k++) {
c[k] = 1.e6 * sc[k];
}

aJacobian_precond(J, c, *Tp, *HP);

// dwdot[k]/dT
// dTdot/d[X]
for (int k=0; k<21; k++) {
J[462+k] *= 1.e-6;
J[k*22+21] *= 1.e6;
}

return;
}


// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void aJacobian(amrex::Real * J, amrex::Real * sc, amrex::Real T, const int consP)
{

for (int i=0; i<484; i++) {
J[i] = 0.0;
}

amrex::Real wdot[21];
for (int k=0; k<21; k++) {
wdot[k] = 0.0;
}

const amrex::Real tc[5] = { log(T), T, T*T, T*T*T, T*T*T*T };// temperature cache
amrex::Real invT = 1.0 / tc[1];
amrex::Real invT2 = invT * invT;

// reference concentration: P_atm / (RT) in inverse mol/m^3
amrex::Real refC = 101325 / 8.31446 / T;
amrex::Real refCinv = 1.0 / refC;

// compute the mixture concentration
amrex::Real mixture = 0.0;
for (int k = 0; k < 21; ++k) {
mixture += sc[k];
}

// compute the Gibbs free energy
amrex::Real g_RT[21];
gibbs(g_RT, tc);

// compute the species enthalpy
amrex::Real h_RT[21];
speciesEnthalpy(h_RT, tc);

amrex::Real phi_f, k_f, k_r, phi_r, Kc, q, q_nocor, Corr, alpha;
amrex::Real dlnkfdT, dlnk0dT, dlnKcdT, dkrdT, dqdT;
amrex::Real dqdci, dcdc_fac, dqdc[21];
amrex::Real Pr, fPr, F, k_0, logPr;
amrex::Real logFcent, troe_c, troe_n, troePr_den, troePr, troe;
amrex::Real Fcent1, Fcent2, Fcent3, Fcent;
amrex::Real dlogFdc, dlogFdn, dlogFdcn_fac;
amrex::Real dlogPrdT, dlogfPrdT, dlogFdT, dlogFcentdT, dlogFdlogPr, dlnCorrdT;
const amrex::Real ln10 = log(10.0);
const amrex::Real log10e = 1.0/log(10.0);
// reaction 49: H + O2 (+M) <=> HO2 (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.7 - 1)*sc[4] + ( 16 - 1)*sc[9] + ( 0.7 - 1)*sc[20];
// forward
phi_f = sc[2]*sc[5];
k_f = 4650000
            * exp(0.44 * tc[0]);
dlnkfdT = 0.44 * invT;
// pressure-fall-off
k_0 = 5.75e+19 * exp(-1.4 * tc[0]);
Pr = 1e-12 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = -1.4 * invT;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Troe form
logPr = log10(Pr);
Fcent1 = (1.-0.5)*exp(-T/1e-30);
Fcent2 = 0.5 * exp(-T/1e+30);
Fcent3 = 0.;
Fcent = Fcent1 + Fcent2 + Fcent3;
logFcent = log10(Fcent);
troe_c = -.4 - .67 * logFcent;
troe_n = .75 - 1.27 * logFcent;
troePr_den = 1.0 / (troe_n - .14*(troe_c + logPr));
troePr = (troe_c + logPr) * troePr_den;
troe = 1.0 / (1.0 + troePr*troePr);
F = exp(M_LN10 * logFcent * troe);
dlogFcentdT = log10e/Fcent*( 
    -Fcent1/1e-30
    -Fcent2/1e+30
);
dlogFdcn_fac = 2.0 * logFcent * troe*troe * troePr * troePr_den;
dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
dlogFdn = dlogFdcn_fac * troePr;
dlogFdlogPr = dlogFdc;
dlogFdT = dlogFcentdT*(troe - 0.67*dlogFdc - 1.27*dlogFdn) + dlogFdlogPr * dlogPrdT;
// reverse
phi_r = sc[8];
Kc = refCinv * exp(g_RT[2] + g_RT[5] - g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[8]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[2] -= q;// O2
wdot[5] -= q;// H
wdot[8] += q;// HO2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = q/alpha*(1.0/(Pr+1.0) + dlogFdlogPr);
if (consP) {
// d()/d[O2]
dqdci =  + k_f*sc[5];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[49] -= dqdci;               // dwdot[H]/d[O2]
J[52] += dqdci;               // dwdot[HO2]/d[O2]
// d()/d[H2]
dqdci = (2.5 - 1)*dcdc_fac;
J[68] -= dqdci;               // dwdot[O2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[74] += dqdci;               // dwdot[HO2]/d[H2]
// d()/d[AR]
dqdci = (0.7 - 1)*dcdc_fac;
J[90] -= dqdci;               // dwdot[O2]/d[AR]
J[93] -= dqdci;               // dwdot[H]/d[AR]
J[96] += dqdci;               // dwdot[HO2]/d[AR]
// d()/d[H]
dqdci =  + k_f*sc[2];
J[112] -= dqdci;              // dwdot[O2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[118] += dqdci;              // dwdot[HO2]/d[H]
// d()/d[HO2]
dqdci =  - k_r;
J[178] -= dqdci;              // dwdot[O2]/d[HO2]
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
// d()/d[H2O]
dqdci = (16 - 1)*dcdc_fac;
J[200] -= dqdci;              // dwdot[O2]/d[H2O]
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[206] += dqdci;              // dwdot[HO2]/d[H2O]
// d()/d[HE]
dqdci = (0.7 - 1)*dcdc_fac;
J[442] -= dqdci;              // dwdot[O2]/d[HE]
J[445] -= dqdci;              // dwdot[H]/d[HE]
J[448] += dqdci;              // dwdot[HO2]/d[HE]
}
else {
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac;
dqdc[2] = dcdc_fac + k_f*sc[5];
dqdc[3] = 2.5*dcdc_fac;
dqdc[4] = 0.7*dcdc_fac;
dqdc[5] = dcdc_fac + k_f*sc[2];
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac - k_r;
dqdc[9] = 16*dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac;
dqdc[19] = dcdc_fac;
dqdc[20] = 0.7*dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+2] -= dqdc[k];
J[22*k+5] -= dqdc[k];
J[22*k+8] += dqdc[k];
}
}
J[464] -= dqdT;// dwdot[O2]/dT
J[467] -= dqdT;// dwdot[H]/dT
J[470] += dqdT;// dwdot[HO2]/dT

// reaction 56: 2 OH (+M) <=> H2O2 (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.7 - 1)*sc[4] + ( 6 - 1)*sc[9] + ( 6 - 1)*sc[10] + ( 0.4 - 1)*sc[20];
// forward
phi_f = (sc[7] * sc[7]);
k_f = 95500000
            * exp(-0.27 * tc[0]);
dlnkfdT = -0.27 * invT;
// pressure-fall-off
k_0 = 2.76e+25 * exp(-3.2 * tc[0]);
Pr = 1e-12 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = -3.2 * invT;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Troe form
logPr = log10(Pr);
Fcent1 = (1.-0.57)*exp(-T/1e+30);
Fcent2 = 0.57 * exp(-T/1e-30);
Fcent3 = 0.;
Fcent = Fcent1 + Fcent2 + Fcent3;
logFcent = log10(Fcent);
troe_c = -.4 - .67 * logFcent;
troe_n = .75 - 1.27 * logFcent;
troePr_den = 1.0 / (troe_n - .14*(troe_c + logPr));
troePr = (troe_c + logPr) * troePr_den;
troe = 1.0 / (1.0 + troePr*troePr);
F = exp(M_LN10 * logFcent * troe);
dlogFcentdT = log10e/Fcent*( 
    -Fcent1/1e+30
    -Fcent2/1e-30
);
dlogFdcn_fac = 2.0 * logFcent * troe*troe * troePr * troePr_den;
dlogFdc = -troe_n * dlogFdcn_fac * troePr_den;
dlogFdn = dlogFdcn_fac * troePr;
dlogFdlogPr = dlogFdc;
dlogFdT = dlogFcentdT*(troe - 0.67*dlogFdc - 1.27*dlogFdn) + dlogFdlogPr * dlogPrdT;
// reverse
phi_r = sc[10];
Kc = refCinv * exp(2.000000*g_RT[7] - g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[7]) + (h_RT[10]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[7] -= 2 * q;// OH
wdot[10] += q;// H2O2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = q/alpha*(1.0/(Pr+1.0) + dlogFdlogPr);
if (consP) {
// d()/d[H2]
dqdci = (2.5 - 1)*dcdc_fac;
J[73] += -2 * dqdci;          // dwdot[OH]/d[H2]
J[76] += dqdci;               // dwdot[H2O2]/d[H2]
// d()/d[AR]
dqdci = (0.7 - 1)*dcdc_fac;
J[95] += -2 * dqdci;          // dwdot[OH]/d[AR]
J[98] += dqdci;               // dwdot[H2O2]/d[AR]
// d()/d[OH]
dqdci =  + k_f*2.000000*sc[7];
J[161] += -2 * dqdci;         // dwdot[OH]/d[OH]
J[164] += dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[H2O]
dqdci = (6 - 1)*dcdc_fac;
J[205] += -2 * dqdci;         // dwdot[OH]/d[H2O]
J[208] += dqdci;              // dwdot[H2O2]/d[H2O]
// d()/d[H2O2]
dqdci = (6 - 1)*dcdc_fac - k_r;
J[227] += -2 * dqdci;         // dwdot[OH]/d[H2O2]
J[230] += dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/d[HE]
dqdci = (0.4 - 1)*dcdc_fac;
J[447] += -2 * dqdci;         // dwdot[OH]/d[HE]
J[450] += dqdci;              // dwdot[H2O2]/d[HE]
}
else {
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac;
dqdc[2] = dcdc_fac;
dqdc[3] = 2.5*dcdc_fac;
dqdc[4] = 0.7*dcdc_fac;
dqdc[5] = dcdc_fac;
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac + k_f*2.000000*sc[7];
dqdc[8] = dcdc_fac;
dqdc[9] = 6*dcdc_fac;
dqdc[10] = 6*dcdc_fac - k_r;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac;
dqdc[19] = dcdc_fac;
dqdc[20] = 0.4*dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+7] += -2 * dqdc[k];
J[22*k+10] += dqdc[k];
}
}
J[469] += -2 * dqdT;// dwdot[OH]/dT
J[472] += dqdT;// dwdot[H2O2]/dT

// reaction 22: N2H (+M) <=> H + N2 (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture;
// forward
phi_f = sc[15];
k_f = 65000000
           ;
dlnkfdT = 0.0;
// pressure-fall-off
k_0 = 50000000000000;
Pr = 1e-6 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = 0.0;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Lindemann form
F = 1.0;
dlogFdlogPr = 0.0;
dlogFdT = 0.0;
// reverse
phi_r = sc[5]*sc[18];
Kc = refC * exp(-g_RT[5] + g_RT[15] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[15]) + (h_RT[5] + h_RT[18]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[5] += q;// H
wdot[15] -= q;// N2H
wdot[18] += q;// N2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = q/alpha*(1.0/(Pr+1.0) + dlogFdlogPr);
if (consP) {
// d()/d[H]
dqdci =  - k_r*sc[18];
J[115] += dqdci;              // dwdot[H]/d[H]
J[125] -= dqdci;              // dwdot[N2H]/d[H]
J[128] += dqdci;              // dwdot[N2]/d[H]
// d()/d[N2H]
dqdci =  + k_f;
J[335] += dqdci;              // dwdot[H]/d[N2H]
J[345] -= dqdci;              // dwdot[N2H]/d[N2H]
J[348] += dqdci;              // dwdot[N2]/d[N2H]
// d()/d[N2]
dqdci =  - k_r*sc[5];
J[401] += dqdci;              // dwdot[H]/d[N2]
J[411] -= dqdci;              // dwdot[N2H]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
}
else {
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac;
dqdc[2] = dcdc_fac;
dqdc[3] = dcdc_fac;
dqdc[4] = dcdc_fac;
dqdc[5] = dcdc_fac - k_r*sc[18];
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac;
dqdc[9] = dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac + k_f;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac - k_r*sc[5];
dqdc[19] = dcdc_fac;
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+5] += dqdc[k];
J[22*k+15] -= dqdc[k];
J[22*k+18] += dqdc[k];
}
}
J[467] += dqdT;// dwdot[H]/dT
J[477] -= dqdT;// dwdot[N2H]/dT
J[480] += dqdT;// dwdot[N2]/dT

// reaction 26: H + NO (+M) <=> HNO (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 0.5 - 1)*sc[4] + ( 5 - 1)*sc[9];
// forward
phi_f = sc[0]*sc[5];
k_f = 1500000000
            * exp(-0.4 * tc[0]);
dlnkfdT = -0.4 * invT;
// pressure-fall-off
k_0 = 430000000000000 * exp(0.206 * tc[0] - (-782.486818826365) * invT);
Pr = 1e-12 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = 0.206 * invT + (-782.486818826365) * invT2;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Lindemann form
F = 1.0;
dlogFdlogPr = 0.0;
dlogFdT = 0.0;
// reverse
phi_r = sc[13];
Kc = refCinv * exp(g_RT[0] + g_RT[5] - g_RT[13]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[5]) + (h_RT[13]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[0] -= q;// NO
wdot[5] -= q;// H
wdot[13] += q;// HNO
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = q/alpha*(1.0/(Pr+1.0) + dlogFdlogPr);
if (consP) {
// d()/d[NO]
dqdci =  + k_f*sc[5];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[5] -= dqdci;                // dwdot[H]/d[NO]
J[13] += dqdci;               // dwdot[HNO]/d[NO]
// d()/d[AR]
dqdci = (0.5 - 1)*dcdc_fac;
J[88] -= dqdci;               // dwdot[NO]/d[AR]
J[93] -= dqdci;               // dwdot[H]/d[AR]
J[101] += dqdci;              // dwdot[HNO]/d[AR]
// d()/d[H]
dqdci =  + k_f*sc[0];
J[110] -= dqdci;              // dwdot[NO]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[123] += dqdci;              // dwdot[HNO]/d[H]
// d()/d[H2O]
dqdci = (5 - 1)*dcdc_fac;
J[198] -= dqdci;              // dwdot[NO]/d[H2O]
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[211] += dqdci;              // dwdot[HNO]/d[H2O]
// d()/d[HNO]
dqdci =  - k_r;
J[286] -= dqdci;              // dwdot[NO]/d[HNO]
J[291] -= dqdci;              // dwdot[H]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
}
else {
dqdc[0] = dcdc_fac + k_f*sc[5];
dqdc[1] = dcdc_fac;
dqdc[2] = dcdc_fac;
dqdc[3] = dcdc_fac;
dqdc[4] = 0.5*dcdc_fac;
dqdc[5] = dcdc_fac + k_f*sc[0];
dqdc[6] = dcdc_fac;
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac;
dqdc[9] = 5*dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac - k_r;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac;
dqdc[19] = dcdc_fac;
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+0] -= dqdc[k];
J[22*k+5] -= dqdc[k];
J[22*k+13] += dqdc[k];
}
}
J[462] -= dqdT;// dwdot[NO]/dT
J[467] -= dqdT;// dwdot[H]/dT
J[475] += dqdT;// dwdot[HNO]/dT

// reaction 29: N2O (+M) <=> N2 + O (+M)
// a third-body and pressure-fall-off reaction
// 3-body correction factor
alpha = mixture;
// forward
phi_f = sc[1];
k_f = 800000000000
            * exp(- (31511.1760043586) * invT);
dlnkfdT = (31511.1760043586) * invT2;
// pressure-fall-off
k_0 = 200000000000000 * exp(-(28504.3859758422) * invT);
Pr = 1e-6 * alpha / k_f * k_0;
fPr = Pr / (1.0+Pr);
dlnk0dT = (28504.3859758422) * invT2;
dlogPrdT = log10e*(dlnk0dT - dlnkfdT);
dlogfPrdT = dlogPrdT / (1.0+Pr);
// Lindemann form
F = 1.0;
dlogFdlogPr = 0.0;
dlogFdT = 0.0;
// reverse
phi_r = sc[6]*sc[18];
Kc = refC * exp(g_RT[1] - g_RT[6] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1]) + (h_RT[6] + h_RT[18]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
Corr = fPr * F;
q = Corr * q_nocor;
dlnCorrdT = ln10*(dlogfPrdT + dlogFdT);
dqdT = Corr *(dlnkfdT*k_f*phi_f - dkrdT*phi_r) + dlnCorrdT*q;
// update wdot
wdot[1] -= q;// N2O
wdot[6] += q;// O
wdot[18] += q;// N2
// for convenience
k_f *= Corr;
k_r *= Corr;
dcdc_fac = q/alpha*(1.0/(Pr+1.0) + dlogFdlogPr);
if (consP) {
// d()/d[N2O]
dqdci =  + k_f;
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[28] += dqdci;               // dwdot[O]/d[N2O]
J[40] += dqdci;               // dwdot[N2]/d[N2O]
// d()/d[O]
dqdci =  - k_r*sc[18];
J[133] -= dqdci;              // dwdot[N2O]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[150] += dqdci;              // dwdot[N2]/d[O]
// d()/d[N2]
dqdci =  - k_r*sc[6];
J[397] -= dqdci;              // dwdot[N2O]/d[N2]
J[402] += dqdci;              // dwdot[O]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
}
else {
dqdc[0] = dcdc_fac;
dqdc[1] = dcdc_fac + k_f;
dqdc[2] = dcdc_fac;
dqdc[3] = dcdc_fac;
dqdc[4] = dcdc_fac;
dqdc[5] = dcdc_fac;
dqdc[6] = dcdc_fac - k_r*sc[18];
dqdc[7] = dcdc_fac;
dqdc[8] = dcdc_fac;
dqdc[9] = dcdc_fac;
dqdc[10] = dcdc_fac;
dqdc[11] = dcdc_fac;
dqdc[12] = dcdc_fac;
dqdc[13] = dcdc_fac;
dqdc[14] = dcdc_fac;
dqdc[15] = dcdc_fac;
dqdc[16] = dcdc_fac;
dqdc[17] = dcdc_fac;
dqdc[18] = dcdc_fac - k_r*sc[6];
dqdc[19] = dcdc_fac;
dqdc[20] = dcdc_fac;
for (int k=0; k<21; k++) {
J[22*k+1] -= dqdc[k];
J[22*k+6] += dqdc[k];
J[22*k+18] += dqdc[k];
}
}
J[463] -= dqdT;// dwdot[N2O]/dT
J[468] += dqdT;// dwdot[O]/dT
J[480] += dqdT;// dwdot[N2]/dT

// reaction 17: NH3 + M <=> H + NH2 + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture;
// forward
phi_f = sc[12];
k_f = 22000000000
            * exp(- (47026.2214081167) * invT);
dlnkfdT = (47026.2214081167) * invT2;
// reverse
phi_r = sc[5]*sc[16];
Kc = refC * exp(-g_RT[5] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[12]) + (h_RT[5] + h_RT[16]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += q;// H
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// for convenience
k_f *= alpha;
k_r *= alpha;
if (consP) {
// d()/d[H]
dqdci =  - k_r*sc[16];
J[115] += dqdci;              // dwdot[H]/d[H]
J[122] -= dqdci;              // dwdot[NH3]/d[H]
J[126] += dqdci;              // dwdot[NH2]/d[H]
// d()/d[NH3]
dqdci =  + k_f;
J[269] += dqdci;              // dwdot[H]/d[NH3]
J[276] -= dqdci;              // dwdot[NH3]/d[NH3]
J[280] += dqdci;              // dwdot[NH2]/d[NH3]
// d()/d[NH2]
dqdci =  - k_r*sc[5];
J[357] += dqdci;              // dwdot[H]/d[NH2]
J[364] -= dqdci;              // dwdot[NH3]/d[NH2]
J[368] += dqdci;              // dwdot[NH2]/d[NH2]
}
else {
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = q_nocor;
dqdc[4] = q_nocor;
dqdc[5] = q_nocor - k_r*sc[16];
dqdc[6] = q_nocor;
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor + k_f;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor - k_r*sc[5];
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+5] += dqdc[k];
J[22*k+12] -= dqdc[k];
J[22*k+16] += dqdc[k];
}
}
J[467] += dqdT;// dwdot[H]/dT
J[474] -= dqdT;// dwdot[NH3]/dT
J[478] += dqdT;// dwdot[NH2]/dT

// reaction 34: NO2 + M <=> NO + O + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 16.25 - 1)*sc[9];
// forward
phi_f = sc[11];
k_f = 11000000000
            * exp(- (33194.9792254745) * invT);
dlnkfdT = (33194.9792254745) * invT2;
// reverse
phi_r = sc[0]*sc[6];
Kc = refC * exp(-g_RT[0] - g_RT[6] + g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[11]) + (h_RT[0] + h_RT[6]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[6] += q;// O
wdot[11] -= q;// NO2
// for convenience
k_f *= alpha;
k_r *= alpha;
if (consP) {
// d()/d[NO]
dqdci =  - k_r*sc[6];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[6] += dqdci;                // dwdot[O]/d[NO]
J[11] -= dqdci;               // dwdot[NO2]/d[NO]
// d()/d[O]
dqdci =  - k_r*sc[0];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[143] -= dqdci;              // dwdot[NO2]/d[O]
// d()/d[H2O]
dqdci = (16.25 - 1)*q_nocor;
J[198] += dqdci;              // dwdot[NO]/d[H2O]
J[204] += dqdci;              // dwdot[O]/d[H2O]
J[209] -= dqdci;              // dwdot[NO2]/d[H2O]
// d()/d[NO2]
dqdci =  + k_f;
J[242] += dqdci;              // dwdot[NO]/d[NO2]
J[248] += dqdci;              // dwdot[O]/d[NO2]
J[253] -= dqdci;              // dwdot[NO2]/d[NO2]
}
else {
dqdc[0] = q_nocor - k_r*sc[6];
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = q_nocor;
dqdc[4] = q_nocor;
dqdc[5] = q_nocor;
dqdc[6] = q_nocor - k_r*sc[0];
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = 16.25*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor + k_f;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = q_nocor;
for (int k=0; k<21; k++) {
J[22*k+0] += dqdc[k];
J[22*k+6] += dqdc[k];
J[22*k+11] -= dqdc[k];
}
}
J[462] += dqdT;// dwdot[NO]/dT
J[468] += dqdT;// dwdot[O]/dT
J[473] -= dqdT;// dwdot[NO2]/dT

// reaction 45: 2 H + M <=> H2 + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.5 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.5 - 1)*sc[20];
// forward
phi_f = (sc[5] * sc[5]);
k_f = 1300000
            * exp(-1 * tc[0]);
dlnkfdT = -1 * invT;
// reverse
phi_r = sc[3];
Kc = refCinv * exp(-g_RT[3] + 2.000000*g_RT[5]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[5]) + (h_RT[3]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= 2 * q;// H
// for convenience
k_f *= alpha;
k_r *= alpha;
if (consP) {
// d()/d[H2]
dqdci = (2.5 - 1)*q_nocor - k_r;
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] += -2 * dqdci;          // dwdot[H]/d[H2]
// d()/d[AR]
dqdci = (0.5 - 1)*q_nocor;
J[91] += dqdci;               // dwdot[H2]/d[AR]
J[93] += -2 * dqdci;          // dwdot[H]/d[AR]
// d()/d[H]
dqdci =  + k_f*2.000000*sc[5];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] += -2 * dqdci;         // dwdot[H]/d[H]
// d()/d[H2O]
dqdci = (12 - 1)*q_nocor;
J[201] += dqdci;              // dwdot[H2]/d[H2O]
J[203] += -2 * dqdci;         // dwdot[H]/d[H2O]
// d()/d[HE]
dqdci = (0.5 - 1)*q_nocor;
J[443] += dqdci;              // dwdot[H2]/d[HE]
J[445] += -2 * dqdci;         // dwdot[H]/d[HE]
}
else {
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = 2.5*q_nocor - k_r;
dqdc[4] = 0.5*q_nocor;
dqdc[5] = q_nocor + k_f*2.000000*sc[5];
dqdc[6] = q_nocor;
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = 0.5*q_nocor;
for (int k=0; k<21; k++) {
J[22*k+3] += dqdc[k];
J[22*k+5] += -2 * dqdc[k];
}
}
J[465] += dqdT;// dwdot[H2]/dT
J[467] += -2 * dqdT;// dwdot[H]/dT

// reaction 46: H + OH + M <=> H2O + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.38 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.38 - 1)*sc[20];
// forward
phi_f = sc[5]*sc[7];
k_f = 40000000000
            * exp(-2 * tc[0]);
dlnkfdT = -2 * invT;
// reverse
phi_r = sc[9];
Kc = refCinv * exp(g_RT[5] + g_RT[7] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[7]) + (h_RT[9]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[7] -= q;// OH
wdot[9] += q;// H2O
// for convenience
k_f *= alpha;
k_r *= alpha;
if (consP) {
// d()/d[H2]
dqdci = (2.5 - 1)*q_nocor;
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[73] -= dqdci;               // dwdot[OH]/d[H2]
J[75] += dqdci;               // dwdot[H2O]/d[H2]
// d()/d[AR]
dqdci = (0.38 - 1)*q_nocor;
J[93] -= dqdci;               // dwdot[H]/d[AR]
J[95] -= dqdci;               // dwdot[OH]/d[AR]
J[97] += dqdci;               // dwdot[H2O]/d[AR]
// d()/d[H]
dqdci =  + k_f*sc[7];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] -= dqdci;              // dwdot[OH]/d[H]
J[119] += dqdci;              // dwdot[H2O]/d[H]
// d()/d[OH]
dqdci =  + k_f*sc[5];
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
// d()/d[H2O]
dqdci = (12 - 1)*q_nocor - k_r;
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/d[HE]
dqdci = (0.38 - 1)*q_nocor;
J[445] -= dqdci;              // dwdot[H]/d[HE]
J[447] -= dqdci;              // dwdot[OH]/d[HE]
J[449] += dqdci;              // dwdot[H2O]/d[HE]
}
else {
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = 2.5*q_nocor;
dqdc[4] = 0.38*q_nocor;
dqdc[5] = q_nocor + k_f*sc[7];
dqdc[6] = q_nocor;
dqdc[7] = q_nocor + k_f*sc[5];
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor - k_r;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = 0.38*q_nocor;
for (int k=0; k<21; k++) {
J[22*k+5] -= dqdc[k];
J[22*k+7] -= dqdc[k];
J[22*k+9] += dqdc[k];
}
}
J[467] -= dqdT;// dwdot[H]/dT
J[469] -= dqdT;// dwdot[OH]/dT
J[471] += dqdT;// dwdot[H2O]/dT

// reaction 47: 2 O + M <=> O2 + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.2 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.2 - 1)*sc[20];
// forward
phi_f = (sc[6] * sc[6]);
k_f = 6170
            * exp(-0.5 * tc[0]);
dlnkfdT = -0.5 * invT;
// reverse
phi_r = sc[2];
Kc = refCinv * exp(-g_RT[2] + 2.000000*g_RT[6]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[6]) + (h_RT[2]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[6] -= 2 * q;// O
// for convenience
k_f *= alpha;
k_r *= alpha;
if (consP) {
// d()/d[O2]
dqdci =  - k_r;
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[50] += -2 * dqdci;          // dwdot[O]/d[O2]
// d()/d[H2]
dqdci = (2.5 - 1)*q_nocor;
J[68] += dqdci;               // dwdot[O2]/d[H2]
J[72] += -2 * dqdci;          // dwdot[O]/d[H2]
// d()/d[AR]
dqdci = (0.2 - 1)*q_nocor;
J[90] += dqdci;               // dwdot[O2]/d[AR]
J[94] += -2 * dqdci;          // dwdot[O]/d[AR]
// d()/d[O]
dqdci =  + k_f*2.000000*sc[6];
J[134] += dqdci;              // dwdot[O2]/d[O]
J[138] += -2 * dqdci;         // dwdot[O]/d[O]
// d()/d[H2O]
dqdci = (12 - 1)*q_nocor;
J[200] += dqdci;              // dwdot[O2]/d[H2O]
J[204] += -2 * dqdci;         // dwdot[O]/d[H2O]
// d()/d[HE]
dqdci = (0.2 - 1)*q_nocor;
J[442] += dqdci;              // dwdot[O2]/d[HE]
J[446] += -2 * dqdci;         // dwdot[O]/d[HE]
}
else {
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor - k_r;
dqdc[3] = 2.5*q_nocor;
dqdc[4] = 0.2*q_nocor;
dqdc[5] = q_nocor;
dqdc[6] = q_nocor + k_f*2.000000*sc[6];
dqdc[7] = q_nocor;
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = 0.2*q_nocor;
for (int k=0; k<21; k++) {
J[22*k+2] += dqdc[k];
J[22*k+6] += -2 * dqdc[k];
}
}
J[464] += dqdT;// dwdot[O2]/dT
J[468] += -2 * dqdT;// dwdot[O]/dT

// reaction 48: H + O + M <=> OH + M
// a third-body and non-pressure-fall-off reaction
// 3-body correction factor
alpha = mixture + ( 2.5 - 1)*sc[3] + ( 0.75 - 1)*sc[4] + ( 12 - 1)*sc[9] + ( 0.75 - 1)*sc[20];
// forward
phi_f = sc[5]*sc[6];
k_f = 4710000
            * exp(-1 * tc[0]);
dlnkfdT = -1 * invT;
// reverse
phi_r = sc[7];
Kc = refCinv * exp(g_RT[5] + g_RT[6] - g_RT[7]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[6]) + (h_RT[7]) + 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q_nocor = k_f*phi_f - k_r*phi_r;
q = alpha * q_nocor;
dqdT = alpha *(dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[6] -= q;// O
wdot[7] += q;// OH
// for convenience
k_f *= alpha;
k_r *= alpha;
if (consP) {
// d()/d[H2]
dqdci = (2.5 - 1)*q_nocor;
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[72] -= dqdci;               // dwdot[O]/d[H2]
J[73] += dqdci;               // dwdot[OH]/d[H2]
// d()/d[AR]
dqdci = (0.75 - 1)*q_nocor;
J[93] -= dqdci;               // dwdot[H]/d[AR]
J[94] -= dqdci;               // dwdot[O]/d[AR]
J[95] += dqdci;               // dwdot[OH]/d[AR]
// d()/d[H]
dqdci =  + k_f*sc[6];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[5];
J[137] -= dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
// d()/d[OH]
dqdci =  - k_r;
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
// d()/d[H2O]
dqdci = (12 - 1)*q_nocor;
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[204] -= dqdci;              // dwdot[O]/d[H2O]
J[205] += dqdci;              // dwdot[OH]/d[H2O]
// d()/d[HE]
dqdci = (0.75 - 1)*q_nocor;
J[445] -= dqdci;              // dwdot[H]/d[HE]
J[446] -= dqdci;              // dwdot[O]/d[HE]
J[447] += dqdci;              // dwdot[OH]/d[HE]
}
else {
dqdc[0] = q_nocor;
dqdc[1] = q_nocor;
dqdc[2] = q_nocor;
dqdc[3] = 2.5*q_nocor;
dqdc[4] = 0.75*q_nocor;
dqdc[5] = q_nocor + k_f*sc[6];
dqdc[6] = q_nocor + k_f*sc[5];
dqdc[7] = q_nocor - k_r;
dqdc[8] = q_nocor;
dqdc[9] = 12*q_nocor;
dqdc[10] = q_nocor;
dqdc[11] = q_nocor;
dqdc[12] = q_nocor;
dqdc[13] = q_nocor;
dqdc[14] = q_nocor;
dqdc[15] = q_nocor;
dqdc[16] = q_nocor;
dqdc[17] = q_nocor;
dqdc[18] = q_nocor;
dqdc[19] = q_nocor;
dqdc[20] = 0.75*q_nocor;
for (int k=0; k<21; k++) {
J[22*k+5] -= dqdc[k];
J[22*k+6] -= dqdc[k];
J[22*k+7] += dqdc[k];
}
}
J[467] -= dqdT;// dwdot[H]/dT
J[468] -= dqdT;// dwdot[O]/dT
J[469] += dqdT;// dwdot[OH]/dT

// reaction 0: N2 + O <=> N + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[18];
k_f = 14700000
            * exp(0.3 * tc[0] - (37885.5775072734) * invT);
dlnkfdT = 0.3 * invT + (37885.5775072734) * invT2;
// reverse
phi_r = sc[0]*sc[14];
Kc = exp(-g_RT[0] + g_RT[6] - g_RT[14] + g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[18]) + (h_RT[0] + h_RT[14]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[6] -= q;// O
wdot[14] += q;// N
wdot[18] -= q;// N2
// d()/d[NO]
dqdci =  - k_r*sc[14];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
J[14] += dqdci;               // dwdot[N]/d[NO]
J[18] -= dqdci;               // dwdot[N2]/d[NO]
// d()/d[O]
dqdci =  + k_f*sc[18];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[146] += dqdci;              // dwdot[N]/d[O]
J[150] -= dqdci;              // dwdot[N2]/d[O]
// d()/d[N]
dqdci =  - k_r*sc[0];
J[308] += dqdci;              // dwdot[NO]/d[N]
J[314] -= dqdci;              // dwdot[O]/d[N]
J[322] += dqdci;              // dwdot[N]/d[N]
J[326] -= dqdci;              // dwdot[N2]/d[N]
// d()/d[N2]
dqdci =  + k_f*sc[6];
J[396] += dqdci;              // dwdot[NO]/d[N2]
J[402] -= dqdci;              // dwdot[O]/d[N2]
J[410] += dqdci;              // dwdot[N]/d[N2]
J[414] -= dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[476] += dqdT;               // dwdot[N]/dT
J[480] -= dqdT;               // dwdot[N2]/dT

// reaction 1: N + O2 <=> NO + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[14];
k_f = 6400
            * exp(1 * tc[0] - (3163.1444787486) * invT);
dlnkfdT = 1 * invT + (3163.1444787486) * invT2;
// reverse
phi_r = sc[0]*sc[6];
Kc = exp(-g_RT[0] + g_RT[2] - g_RT[6] + g_RT[14]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[14]) + (h_RT[0] + h_RT[6]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[2] -= q;// O2
wdot[6] += q;// O
wdot[14] -= q;// N
// d()/d[NO]
dqdci =  - k_r*sc[6];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[2] -= dqdci;                // dwdot[O2]/d[NO]
J[6] += dqdci;                // dwdot[O]/d[NO]
J[14] -= dqdci;               // dwdot[N]/d[NO]
// d()/d[O2]
dqdci =  + k_f*sc[14];
J[44] += dqdci;               // dwdot[NO]/d[O2]
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[58] -= dqdci;               // dwdot[N]/d[O2]
// d()/d[O]
dqdci =  - k_r*sc[0];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[146] -= dqdci;              // dwdot[N]/d[O]
// d()/d[N]
dqdci =  + k_f*sc[2];
J[308] += dqdci;              // dwdot[NO]/d[N]
J[310] -= dqdci;              // dwdot[O2]/d[N]
J[314] += dqdci;              // dwdot[O]/d[N]
J[322] -= dqdci;              // dwdot[N]/d[N]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[476] -= dqdT;               // dwdot[N]/dT

// reaction 2: N + OH <=> H + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[14];
k_f = 38000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[0]*sc[5];
Kc = exp(-g_RT[0] - g_RT[5] + g_RT[7] + g_RT[14]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[14]) + (h_RT[0] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[5] += q;// H
wdot[7] -= q;// OH
wdot[14] -= q;// N
// d()/d[NO]
dqdci =  - k_r*sc[5];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[5] += dqdci;                // dwdot[H]/d[NO]
J[7] -= dqdci;                // dwdot[OH]/d[NO]
J[14] -= dqdci;               // dwdot[N]/d[NO]
// d()/d[H]
dqdci =  - k_r*sc[0];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[117] -= dqdci;              // dwdot[OH]/d[H]
J[124] -= dqdci;              // dwdot[N]/d[H]
// d()/d[OH]
dqdci =  + k_f*sc[14];
J[154] += dqdci;              // dwdot[NO]/d[OH]
J[159] += dqdci;              // dwdot[H]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[168] -= dqdci;              // dwdot[N]/d[OH]
// d()/d[N]
dqdci =  + k_f*sc[7];
J[308] += dqdci;              // dwdot[NO]/d[N]
J[313] += dqdci;              // dwdot[H]/d[N]
J[315] -= dqdci;              // dwdot[OH]/d[N]
J[322] -= dqdci;              // dwdot[N]/d[N]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[476] -= dqdT;               // dwdot[N]/dT

// reaction 3: H + NH <=> H2 + N
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[17];
k_f = 100000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[3]*sc[14];
Kc = exp(-g_RT[3] + g_RT[5] - g_RT[14] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[17]) + (h_RT[3] + h_RT[14]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[14] += q;// N
wdot[17] -= q;// NH
// d()/d[H2]
dqdci =  - k_r*sc[14];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[80] += dqdci;               // dwdot[N]/d[H2]
J[83] -= dqdci;               // dwdot[NH]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[17];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[124] += dqdci;              // dwdot[N]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[N]
dqdci =  - k_r*sc[3];
J[311] += dqdci;              // dwdot[H2]/d[N]
J[313] -= dqdci;              // dwdot[H]/d[N]
J[322] += dqdci;              // dwdot[N]/d[N]
J[325] -= dqdci;              // dwdot[NH]/d[N]
// d()/d[NH]
dqdci =  + k_f*sc[5];
J[377] += dqdci;              // dwdot[H2]/d[NH]
J[379] -= dqdci;              // dwdot[H]/d[NH]
J[388] += dqdci;              // dwdot[N]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[476] += dqdT;               // dwdot[N]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 4: NH + O <=> H + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[17];
k_f = 92000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[0]*sc[5];
Kc = exp(-g_RT[0] - g_RT[5] + g_RT[6] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[17]) + (h_RT[0] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[17] -= q;// NH
// d()/d[NO]
dqdci =  - k_r*sc[5];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[5] += dqdci;                // dwdot[H]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
J[17] -= dqdci;               // dwdot[NH]/d[NO]
// d()/d[H]
dqdci =  - k_r*sc[0];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[17];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[149] -= dqdci;              // dwdot[NH]/d[O]
// d()/d[NH]
dqdci =  + k_f*sc[6];
J[374] += dqdci;              // dwdot[NO]/d[NH]
J[379] += dqdci;              // dwdot[H]/d[NH]
J[380] -= dqdci;              // dwdot[O]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 5: NH + OH <=> H + HNO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[17];
k_f = 40000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[5]*sc[13];
Kc = exp(-g_RT[5] + g_RT[7] - g_RT[13] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[17]) + (h_RT[5] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += q;// H
wdot[7] -= q;// OH
wdot[13] += q;// HNO
wdot[17] -= q;// NH
// d()/d[H]
dqdci =  - k_r*sc[13];
J[115] += dqdci;              // dwdot[H]/d[H]
J[117] -= dqdci;              // dwdot[OH]/d[H]
J[123] += dqdci;              // dwdot[HNO]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[OH]
dqdci =  + k_f*sc[17];
J[159] += dqdci;              // dwdot[H]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[167] += dqdci;              // dwdot[HNO]/d[OH]
J[171] -= dqdci;              // dwdot[NH]/d[OH]
// d()/d[HNO]
dqdci =  - k_r*sc[5];
J[291] += dqdci;              // dwdot[H]/d[HNO]
J[293] -= dqdci;              // dwdot[OH]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[303] -= dqdci;              // dwdot[NH]/d[HNO]
// d()/d[NH]
dqdci =  + k_f*sc[7];
J[379] += dqdci;              // dwdot[H]/d[NH]
J[381] -= dqdci;              // dwdot[OH]/d[NH]
J[387] += dqdci;              // dwdot[HNO]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[467] += dqdT;               // dwdot[H]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 6: NH + OH <=> H2O + N
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[17];
k_f = 500000
            * exp(0.5 * tc[0] - (1006.67487560903) * invT);
dlnkfdT = 0.5 * invT + (1006.67487560903) * invT2;
// reverse
phi_r = sc[9]*sc[14];
Kc = exp(g_RT[7] - g_RT[9] - g_RT[14] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[17]) + (h_RT[9] + h_RT[14]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[14] += q;// N
wdot[17] -= q;// NH
// d()/d[OH]
dqdci =  + k_f*sc[17];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[168] += dqdci;              // dwdot[N]/d[OH]
J[171] -= dqdci;              // dwdot[NH]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[14];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[212] += dqdci;              // dwdot[N]/d[H2O]
J[215] -= dqdci;              // dwdot[NH]/d[H2O]
// d()/d[N]
dqdci =  - k_r*sc[9];
J[315] -= dqdci;              // dwdot[OH]/d[N]
J[317] += dqdci;              // dwdot[H2O]/d[N]
J[322] += dqdci;              // dwdot[N]/d[N]
J[325] -= dqdci;              // dwdot[NH]/d[N]
// d()/d[NH]
dqdci =  + k_f*sc[7];
J[381] -= dqdci;              // dwdot[OH]/d[NH]
J[383] += dqdci;              // dwdot[H2O]/d[NH]
J[388] += dqdci;              // dwdot[N]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[476] += dqdT;               // dwdot[N]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 7: NH + O2 <=> HNO + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[17];
k_f = 0.46
            * exp(2 * tc[0] - (3271.39141572985) * invT);
dlnkfdT = 2 * invT + (3271.39141572985) * invT2;
// reverse
phi_r = sc[6]*sc[13];
Kc = exp(g_RT[2] - g_RT[6] - g_RT[13] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[17]) + (h_RT[6] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[6] += q;// O
wdot[13] += q;// HNO
wdot[17] -= q;// NH
// d()/d[O2]
dqdci =  + k_f*sc[17];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[57] += dqdci;               // dwdot[HNO]/d[O2]
J[61] -= dqdci;               // dwdot[NH]/d[O2]
// d()/d[O]
dqdci =  - k_r*sc[13];
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[145] += dqdci;              // dwdot[HNO]/d[O]
J[149] -= dqdci;              // dwdot[NH]/d[O]
// d()/d[HNO]
dqdci =  - k_r*sc[6];
J[288] -= dqdci;              // dwdot[O2]/d[HNO]
J[292] += dqdci;              // dwdot[O]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[303] -= dqdci;              // dwdot[NH]/d[HNO]
// d()/d[NH]
dqdci =  + k_f*sc[2];
J[376] -= dqdci;              // dwdot[O2]/d[NH]
J[380] += dqdci;              // dwdot[O]/d[NH]
J[387] += dqdci;              // dwdot[HNO]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 8: NH + NO <=> H + N2O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[17];
k_f = 180000000
            * exp(-0.351 * tc[0] - (-122.784866456352) * invT);
dlnkfdT = -0.351 * invT + (-122.784866456352) * invT2;
// reverse
phi_r = sc[1]*sc[5];
Kc = exp(g_RT[0] - g_RT[1] - g_RT[5] + g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[17]) + (h_RT[1] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[1] += q;// N2O
wdot[5] += q;// H
wdot[17] -= q;// NH
// d()/d[NO]
dqdci =  + k_f*sc[17];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[1] += dqdci;                // dwdot[N2O]/d[NO]
J[5] += dqdci;                // dwdot[H]/d[NO]
J[17] -= dqdci;               // dwdot[NH]/d[NO]
// d()/d[N2O]
dqdci =  - k_r*sc[5];
J[22] -= dqdci;               // dwdot[NO]/d[N2O]
J[23] += dqdci;               // dwdot[N2O]/d[N2O]
J[27] += dqdci;               // dwdot[H]/d[N2O]
J[39] -= dqdci;               // dwdot[NH]/d[N2O]
// d()/d[H]
dqdci =  - k_r*sc[1];
J[110] -= dqdci;              // dwdot[NO]/d[H]
J[111] += dqdci;              // dwdot[N2O]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[127] -= dqdci;              // dwdot[NH]/d[H]
// d()/d[NH]
dqdci =  + k_f*sc[0];
J[374] -= dqdci;              // dwdot[NO]/d[NH]
J[375] += dqdci;              // dwdot[N2O]/d[NH]
J[379] += dqdci;              // dwdot[H]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[463] += dqdT;               // dwdot[N2O]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[479] -= dqdT;               // dwdot[NH]/dT

// reaction 9: NH + NO <=> N2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[17];
k_f = 22000000
            * exp(-0.23 * tc[0]);
dlnkfdT = -0.23 * invT;
// reverse
phi_r = sc[7]*sc[18];
Kc = exp(g_RT[0] - g_RT[7] + g_RT[17] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[17]) + (h_RT[7] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[7] += q;// OH
wdot[17] -= q;// NH
wdot[18] += q;// N2
// d()/d[NO]
dqdci =  + k_f*sc[17];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[17] -= dqdci;               // dwdot[NH]/d[NO]
J[18] += dqdci;               // dwdot[N2]/d[NO]
// d()/d[OH]
dqdci =  - k_r*sc[18];
J[154] -= dqdci;              // dwdot[NO]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[171] -= dqdci;              // dwdot[NH]/d[OH]
J[172] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[NH]
dqdci =  + k_f*sc[0];
J[374] -= dqdci;              // dwdot[NO]/d[NH]
J[381] += dqdci;              // dwdot[OH]/d[NH]
J[391] -= dqdci;              // dwdot[NH]/d[NH]
J[392] += dqdci;              // dwdot[N2]/d[NH]
// d()/d[N2]
dqdci =  - k_r*sc[7];
J[396] -= dqdci;              // dwdot[NO]/d[N2]
J[403] += dqdci;              // dwdot[OH]/d[N2]
J[413] -= dqdci;              // dwdot[NH]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[479] -= dqdT;               // dwdot[NH]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 10: H + NH2 <=> H2 + NH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[16];
k_f = 40000000
            * exp(- (1837.75229568549) * invT);
dlnkfdT = (1837.75229568549) * invT2;
// reverse
phi_r = sc[3]*sc[17];
Kc = exp(-g_RT[3] + g_RT[5] + g_RT[16] - g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[16]) + (h_RT[3] + h_RT[17]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[16] -= q;// NH2
wdot[17] += q;// NH
// d()/d[H2]
dqdci =  - k_r*sc[17];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[82] -= dqdci;               // dwdot[NH2]/d[H2]
J[83] += dqdci;               // dwdot[NH]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[16];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[126] -= dqdci;              // dwdot[NH2]/d[H]
J[127] += dqdci;              // dwdot[NH]/d[H]
// d()/d[NH2]
dqdci =  + k_f*sc[5];
J[355] += dqdci;              // dwdot[H2]/d[NH2]
J[357] -= dqdci;              // dwdot[H]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[369] += dqdci;              // dwdot[NH]/d[NH2]
// d()/d[NH]
dqdci =  - k_r*sc[3];
J[377] += dqdci;              // dwdot[H2]/d[NH]
J[379] -= dqdci;              // dwdot[H]/d[NH]
J[390] -= dqdci;              // dwdot[NH2]/d[NH]
J[391] += dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[479] += dqdT;               // dwdot[NH]/dT

// reaction 11: NH2 + O <=> H + HNO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[16];
k_f = 660000000
            * exp(-0.5 * tc[0]);
dlnkfdT = -0.5 * invT;
// reverse
phi_r = sc[5]*sc[13];
Kc = exp(-g_RT[5] + g_RT[6] - g_RT[13] + g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[16]) + (h_RT[5] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[13] += q;// HNO
wdot[16] -= q;// NH2
// d()/d[H]
dqdci =  - k_r*sc[13];
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[123] += dqdci;              // dwdot[HNO]/d[H]
J[126] -= dqdci;              // dwdot[NH2]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[16];
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[145] += dqdci;              // dwdot[HNO]/d[O]
J[148] -= dqdci;              // dwdot[NH2]/d[O]
// d()/d[HNO]
dqdci =  - k_r*sc[5];
J[291] += dqdci;              // dwdot[H]/d[HNO]
J[292] -= dqdci;              // dwdot[O]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[302] -= dqdci;              // dwdot[NH2]/d[HNO]
// d()/d[NH2]
dqdci =  + k_f*sc[6];
J[357] += dqdci;              // dwdot[H]/d[NH2]
J[358] -= dqdci;              // dwdot[O]/d[NH2]
J[365] += dqdci;              // dwdot[HNO]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT

// reaction 12: NH2 + O2 <=> H2NO + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[16];
k_f = 260000
            * exp(0.4872 * tc[0] - (14618.4441416271) * invT);
dlnkfdT = 0.4872 * invT + (14618.4441416271) * invT2;
// reverse
phi_r = sc[6]*sc[19];
Kc = exp(g_RT[2] - g_RT[6] + g_RT[16] - g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[16]) + (h_RT[6] + h_RT[19]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[6] += q;// O
wdot[16] -= q;// NH2
wdot[19] += q;// H2NO
// d()/d[O2]
dqdci =  + k_f*sc[16];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[60] -= dqdci;               // dwdot[NH2]/d[O2]
J[63] += dqdci;               // dwdot[H2NO]/d[O2]
// d()/d[O]
dqdci =  - k_r*sc[19];
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[148] -= dqdci;              // dwdot[NH2]/d[O]
J[151] += dqdci;              // dwdot[H2NO]/d[O]
// d()/d[NH2]
dqdci =  + k_f*sc[2];
J[354] -= dqdci;              // dwdot[O2]/d[NH2]
J[358] += dqdci;              // dwdot[O]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[371] += dqdci;              // dwdot[H2NO]/d[NH2]
// d()/d[H2NO]
dqdci =  - k_r*sc[6];
J[420] -= dqdci;              // dwdot[O2]/d[H2NO]
J[424] += dqdci;              // dwdot[O]/d[H2NO]
J[434] -= dqdci;              // dwdot[NH2]/d[H2NO]
J[437] += dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[481] += dqdT;               // dwdot[H2NO]/dT

// reaction 13: NH2 + OH <=> H2O + NH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[16];
k_f = 4
            * exp(2 * tc[0] - (503.93626563682) * invT);
dlnkfdT = 2 * invT + (503.93626563682) * invT2;
// reverse
phi_r = sc[9]*sc[17];
Kc = exp(g_RT[7] - g_RT[9] + g_RT[16] - g_RT[17]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[16]) + (h_RT[9] + h_RT[17]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[16] -= q;// NH2
wdot[17] += q;// NH
// d()/d[OH]
dqdci =  + k_f*sc[16];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[170] -= dqdci;              // dwdot[NH2]/d[OH]
J[171] += dqdci;              // dwdot[NH]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[17];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[214] -= dqdci;              // dwdot[NH2]/d[H2O]
J[215] += dqdci;              // dwdot[NH]/d[H2O]
// d()/d[NH2]
dqdci =  + k_f*sc[7];
J[359] -= dqdci;              // dwdot[OH]/d[NH2]
J[361] += dqdci;              // dwdot[H2O]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[369] += dqdci;              // dwdot[NH]/d[NH2]
// d()/d[NH]
dqdci =  - k_r*sc[9];
J[381] -= dqdci;              // dwdot[OH]/d[NH]
J[383] += dqdci;              // dwdot[H2O]/d[NH]
J[390] -= dqdci;              // dwdot[NH2]/d[NH]
J[391] += dqdci;              // dwdot[NH]/d[NH]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[479] += dqdT;               // dwdot[NH]/dT

// reaction 14: N + NH2 <=> 2 H + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[14]*sc[16];
k_f = 70000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = (sc[5] * sc[5])*sc[18];
Kc = refC * exp(-2.000000*g_RT[5] + g_RT[14] + g_RT[16] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[14] + h_RT[16]) + (2.000000*h_RT[5] + h_RT[18]) - 1.000000);
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] += 2 * q;// H
wdot[14] -= q;// N
wdot[16] -= q;// NH2
wdot[18] += q;// N2
// d()/d[H]
dqdci =  - k_r*2.000000*sc[5]*sc[18];
J[115] += 2 * dqdci;          // dwdot[H]/d[H]
J[124] -= dqdci;              // dwdot[N]/d[H]
J[126] -= dqdci;              // dwdot[NH2]/d[H]
J[128] += dqdci;              // dwdot[N2]/d[H]
// d()/d[N]
dqdci =  + k_f*sc[16];
J[313] += 2 * dqdci;          // dwdot[H]/d[N]
J[322] -= dqdci;              // dwdot[N]/d[N]
J[324] -= dqdci;              // dwdot[NH2]/d[N]
J[326] += dqdci;              // dwdot[N2]/d[N]
// d()/d[NH2]
dqdci =  + k_f*sc[14];
J[357] += 2 * dqdci;          // dwdot[H]/d[NH2]
J[366] -= dqdci;              // dwdot[N]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[370] += dqdci;              // dwdot[N2]/d[NH2]
// d()/d[N2]
dqdci =  - k_r*sc[5]*sc[5];
J[401] += 2 * dqdci;          // dwdot[H]/d[N2]
J[410] -= dqdci;              // dwdot[N]/d[N2]
J[412] -= dqdci;              // dwdot[NH2]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[467] += 2 * dqdT;           // dwdot[H]/dT
J[476] -= dqdT;               // dwdot[N]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 15: NH2 + NO <=> H2O + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[16];
k_f = 280000000000000
            * exp(-2.654 * tc[0] - (633.046565582337) * invT);
dlnkfdT = -2.654 * invT + (633.046565582337) * invT2;
// reverse
phi_r = sc[9]*sc[18];
Kc = exp(g_RT[0] - g_RT[9] + g_RT[16] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[16]) + (h_RT[9] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[9] += q;// H2O
wdot[16] -= q;// NH2
wdot[18] += q;// N2
// d()/d[NO]
dqdci =  + k_f*sc[16];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[9] += dqdci;                // dwdot[H2O]/d[NO]
J[16] -= dqdci;               // dwdot[NH2]/d[NO]
J[18] += dqdci;               // dwdot[N2]/d[NO]
// d()/d[H2O]
dqdci =  - k_r*sc[18];
J[198] -= dqdci;              // dwdot[NO]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[214] -= dqdci;              // dwdot[NH2]/d[H2O]
J[216] += dqdci;              // dwdot[N2]/d[H2O]
// d()/d[NH2]
dqdci =  + k_f*sc[0];
J[352] -= dqdci;              // dwdot[NO]/d[NH2]
J[361] += dqdci;              // dwdot[H2O]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
J[370] += dqdci;              // dwdot[N2]/d[NH2]
// d()/d[N2]
dqdci =  - k_r*sc[9];
J[396] -= dqdci;              // dwdot[NO]/d[N2]
J[405] += dqdci;              // dwdot[H2O]/d[N2]
J[412] -= dqdci;              // dwdot[NH2]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 16: NH2 + NO <=> N2H + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[16];
k_f = 31000000
            * exp(-0.48 * tc[0] - (593.795665649569) * invT);
dlnkfdT = -0.48 * invT + (593.795665649569) * invT2;
// reverse
phi_r = sc[7]*sc[15];
Kc = exp(g_RT[0] - g_RT[7] - g_RT[15] + g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[16]) + (h_RT[7] + h_RT[15]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[7] += q;// OH
wdot[15] += q;// N2H
wdot[16] -= q;// NH2
// d()/d[NO]
dqdci =  + k_f*sc[16];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[15] += dqdci;               // dwdot[N2H]/d[NO]
J[16] -= dqdci;               // dwdot[NH2]/d[NO]
// d()/d[OH]
dqdci =  - k_r*sc[15];
J[154] -= dqdci;              // dwdot[NO]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[169] += dqdci;              // dwdot[N2H]/d[OH]
J[170] -= dqdci;              // dwdot[NH2]/d[OH]
// d()/d[N2H]
dqdci =  - k_r*sc[7];
J[330] -= dqdci;              // dwdot[NO]/d[N2H]
J[337] += dqdci;              // dwdot[OH]/d[N2H]
J[345] += dqdci;              // dwdot[N2H]/d[N2H]
J[346] -= dqdci;              // dwdot[NH2]/d[N2H]
// d()/d[NH2]
dqdci =  + k_f*sc[0];
J[352] -= dqdci;              // dwdot[NO]/d[NH2]
J[359] += dqdci;              // dwdot[OH]/d[NH2]
J[367] += dqdci;              // dwdot[N2H]/d[NH2]
J[368] -= dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[477] += dqdT;               // dwdot[N2H]/dT
J[478] -= dqdT;               // dwdot[NH2]/dT

// reaction 18: H + NH3 <=> H2 + NH2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[12];
k_f = 0.64
            * exp(2.39 * tc[0] - (5123.57093322397) * invT);
dlnkfdT = 2.39 * invT + (5123.57093322397) * invT2;
// reverse
phi_r = sc[3]*sc[16];
Kc = exp(-g_RT[3] + g_RT[5] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[12]) + (h_RT[3] + h_RT[16]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// d()/d[H2]
dqdci =  - k_r*sc[16];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[78] -= dqdci;               // dwdot[NH3]/d[H2]
J[82] += dqdci;               // dwdot[NH2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[12];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[122] -= dqdci;              // dwdot[NH3]/d[H]
J[126] += dqdci;              // dwdot[NH2]/d[H]
// d()/d[NH3]
dqdci =  + k_f*sc[5];
J[267] += dqdci;              // dwdot[H2]/d[NH3]
J[269] -= dqdci;              // dwdot[H]/d[NH3]
J[276] -= dqdci;              // dwdot[NH3]/d[NH3]
J[280] += dqdci;              // dwdot[NH2]/d[NH3]
// d()/d[NH2]
dqdci =  - k_r*sc[3];
J[355] += dqdci;              // dwdot[H2]/d[NH2]
J[357] -= dqdci;              // dwdot[H]/d[NH2]
J[364] -= dqdci;              // dwdot[NH3]/d[NH2]
J[368] += dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[474] -= dqdT;               // dwdot[NH3]/dT
J[478] += dqdT;               // dwdot[NH2]/dT

// reaction 19: NH3 + O <=> NH2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[12];
k_f = 9.4
            * exp(1.94 * tc[0] - (3253.35109826075) * invT);
dlnkfdT = 1.94 * invT + (3253.35109826075) * invT2;
// reverse
phi_r = sc[7]*sc[16];
Kc = exp(g_RT[6] - g_RT[7] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[12]) + (h_RT[7] + h_RT[16]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// d()/d[O]
dqdci =  + k_f*sc[12];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[144] -= dqdci;              // dwdot[NH3]/d[O]
J[148] += dqdci;              // dwdot[NH2]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[16];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[166] -= dqdci;              // dwdot[NH3]/d[OH]
J[170] += dqdci;              // dwdot[NH2]/d[OH]
// d()/d[NH3]
dqdci =  + k_f*sc[6];
J[270] -= dqdci;              // dwdot[O]/d[NH3]
J[271] += dqdci;              // dwdot[OH]/d[NH3]
J[276] -= dqdci;              // dwdot[NH3]/d[NH3]
J[280] += dqdci;              // dwdot[NH2]/d[NH3]
// d()/d[NH2]
dqdci =  - k_r*sc[7];
J[358] -= dqdci;              // dwdot[O]/d[NH2]
J[359] += dqdci;              // dwdot[OH]/d[NH2]
J[364] -= dqdci;              // dwdot[NH3]/d[NH2]
J[368] += dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[474] -= dqdT;               // dwdot[NH3]/dT
J[478] += dqdT;               // dwdot[NH2]/dT

// reaction 20: NH3 + OH <=> H2O + NH2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[12];
k_f = 2.04
            * exp(2.04 * tc[0] - (285.042048178425) * invT);
dlnkfdT = 2.04 * invT + (285.042048178425) * invT2;
// reverse
phi_r = sc[9]*sc[16];
Kc = exp(g_RT[7] - g_RT[9] + g_RT[12] - g_RT[16]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[12]) + (h_RT[9] + h_RT[16]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[12] -= q;// NH3
wdot[16] += q;// NH2
// d()/d[OH]
dqdci =  + k_f*sc[12];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[166] -= dqdci;              // dwdot[NH3]/d[OH]
J[170] += dqdci;              // dwdot[NH2]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[16];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[210] -= dqdci;              // dwdot[NH3]/d[H2O]
J[214] += dqdci;              // dwdot[NH2]/d[H2O]
// d()/d[NH3]
dqdci =  + k_f*sc[7];
J[271] -= dqdci;              // dwdot[OH]/d[NH3]
J[273] += dqdci;              // dwdot[H2O]/d[NH3]
J[276] -= dqdci;              // dwdot[NH3]/d[NH3]
J[280] += dqdci;              // dwdot[NH2]/d[NH3]
// d()/d[NH2]
dqdci =  - k_r*sc[9];
J[359] -= dqdci;              // dwdot[OH]/d[NH2]
J[361] += dqdci;              // dwdot[H2O]/d[NH2]
J[364] -= dqdci;              // dwdot[NH3]/d[NH2]
J[368] += dqdci;              // dwdot[NH2]/d[NH2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[474] -= dqdT;               // dwdot[NH3]/dT
J[478] += dqdT;               // dwdot[NH2]/dT

// reaction 21: N2H + O2 <=> HO2 + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[15];
k_f = 200000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[8]*sc[18];
Kc = exp(g_RT[2] - g_RT[8] + g_RT[15] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[15]) + (h_RT[8] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[8] += q;// HO2
wdot[15] -= q;// N2H
wdot[18] += q;// N2
// d()/d[O2]
dqdci =  + k_f*sc[15];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[52] += dqdci;               // dwdot[HO2]/d[O2]
J[59] -= dqdci;               // dwdot[N2H]/d[O2]
J[62] += dqdci;               // dwdot[N2]/d[O2]
// d()/d[HO2]
dqdci =  - k_r*sc[18];
J[178] -= dqdci;              // dwdot[O2]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[191] -= dqdci;              // dwdot[N2H]/d[HO2]
J[194] += dqdci;              // dwdot[N2]/d[HO2]
// d()/d[N2H]
dqdci =  + k_f*sc[2];
J[332] -= dqdci;              // dwdot[O2]/d[N2H]
J[338] += dqdci;              // dwdot[HO2]/d[N2H]
J[345] -= dqdci;              // dwdot[N2H]/d[N2H]
J[348] += dqdci;              // dwdot[N2]/d[N2H]
// d()/d[N2]
dqdci =  - k_r*sc[8];
J[398] -= dqdci;              // dwdot[O2]/d[N2]
J[404] += dqdci;              // dwdot[HO2]/d[N2]
J[411] -= dqdci;              // dwdot[N2H]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[477] -= dqdT;               // dwdot[N2H]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 23: H + N2H <=> H2 + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[15];
k_f = 100000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[3]*sc[18];
Kc = exp(-g_RT[3] + g_RT[5] + g_RT[15] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[15]) + (h_RT[3] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[15] -= q;// N2H
wdot[18] += q;// N2
// d()/d[H2]
dqdci =  - k_r*sc[18];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[81] -= dqdci;               // dwdot[N2H]/d[H2]
J[84] += dqdci;               // dwdot[N2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[15];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[125] -= dqdci;              // dwdot[N2H]/d[H]
J[128] += dqdci;              // dwdot[N2]/d[H]
// d()/d[N2H]
dqdci =  + k_f*sc[5];
J[333] += dqdci;              // dwdot[H2]/d[N2H]
J[335] -= dqdci;              // dwdot[H]/d[N2H]
J[345] -= dqdci;              // dwdot[N2H]/d[N2H]
J[348] += dqdci;              // dwdot[N2]/d[N2H]
// d()/d[N2]
dqdci =  - k_r*sc[3];
J[399] += dqdci;              // dwdot[H2]/d[N2]
J[401] -= dqdci;              // dwdot[H]/d[N2]
J[411] -= dqdci;              // dwdot[N2H]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[477] -= dqdT;               // dwdot[N2H]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 24: N2H + O <=> H + N2O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[15];
k_f = 100000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[1]*sc[5];
Kc = exp(-g_RT[1] - g_RT[5] + g_RT[6] + g_RT[15]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[15]) + (h_RT[1] + h_RT[5]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] += q;// N2O
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[15] -= q;// N2H
// d()/d[N2O]
dqdci =  - k_r*sc[5];
J[23] += dqdci;               // dwdot[N2O]/d[N2O]
J[27] += dqdci;               // dwdot[H]/d[N2O]
J[28] -= dqdci;               // dwdot[O]/d[N2O]
J[37] -= dqdci;               // dwdot[N2H]/d[N2O]
// d()/d[H]
dqdci =  - k_r*sc[1];
J[111] += dqdci;              // dwdot[N2O]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[125] -= dqdci;              // dwdot[N2H]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[15];
J[133] += dqdci;              // dwdot[N2O]/d[O]
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[147] -= dqdci;              // dwdot[N2H]/d[O]
// d()/d[N2H]
dqdci =  + k_f*sc[6];
J[331] += dqdci;              // dwdot[N2O]/d[N2H]
J[335] += dqdci;              // dwdot[H]/d[N2H]
J[336] -= dqdci;              // dwdot[O]/d[N2H]
J[345] -= dqdci;              // dwdot[N2H]/d[N2H]
// d()/dT
J[463] += dqdT;               // dwdot[N2O]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[477] -= dqdT;               // dwdot[N2H]/dT

// reaction 25: N2H + OH <=> H2O + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[15];
k_f = 50000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[9]*sc[18];
Kc = exp(g_RT[7] - g_RT[9] + g_RT[15] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[15]) + (h_RT[9] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[15] -= q;// N2H
wdot[18] += q;// N2
// d()/d[OH]
dqdci =  + k_f*sc[15];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[169] -= dqdci;              // dwdot[N2H]/d[OH]
J[172] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[18];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[213] -= dqdci;              // dwdot[N2H]/d[H2O]
J[216] += dqdci;              // dwdot[N2]/d[H2O]
// d()/d[N2H]
dqdci =  + k_f*sc[7];
J[337] -= dqdci;              // dwdot[OH]/d[N2H]
J[339] += dqdci;              // dwdot[H2O]/d[N2H]
J[345] -= dqdci;              // dwdot[N2H]/d[N2H]
J[348] += dqdci;              // dwdot[N2]/d[N2H]
// d()/d[N2]
dqdci =  - k_r*sc[9];
J[403] -= dqdci;              // dwdot[OH]/d[N2]
J[405] += dqdci;              // dwdot[H2O]/d[N2]
J[411] -= dqdci;              // dwdot[N2H]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[477] -= dqdT;               // dwdot[N2H]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 27: H + HNO <=> H2 + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[13];
k_f = 440000
            * exp(0.72 * tc[0] - (327.141154439648) * invT);
dlnkfdT = 0.72 * invT + (327.141154439648) * invT2;
// reverse
phi_r = sc[0]*sc[3];
Kc = exp(-g_RT[0] - g_RT[3] + g_RT[5] + g_RT[13]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[13]) + (h_RT[0] + h_RT[3]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[13] -= q;// HNO
// d()/d[NO]
dqdci =  - k_r*sc[3];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[3] += dqdci;                // dwdot[H2]/d[NO]
J[5] -= dqdci;                // dwdot[H]/d[NO]
J[13] -= dqdci;               // dwdot[HNO]/d[NO]
// d()/d[H2]
dqdci =  - k_r*sc[0];
J[66] += dqdci;               // dwdot[NO]/d[H2]
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[79] -= dqdci;               // dwdot[HNO]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[13];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[123] -= dqdci;              // dwdot[HNO]/d[H]
// d()/d[HNO]
dqdci =  + k_f*sc[5];
J[286] += dqdci;              // dwdot[NO]/d[HNO]
J[289] += dqdci;              // dwdot[H2]/d[HNO]
J[291] -= dqdci;              // dwdot[H]/d[HNO]
J[299] -= dqdci;              // dwdot[HNO]/d[HNO]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[475] -= dqdT;               // dwdot[HNO]/dT

// reaction 28: HNO + OH <=> H2O + NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[13];
k_f = 36000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[0]*sc[9];
Kc = exp(-g_RT[0] + g_RT[7] - g_RT[9] + g_RT[13]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[13]) + (h_RT[0] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[7] -= q;// OH
wdot[9] += q;// H2O
wdot[13] -= q;// HNO
// d()/d[NO]
dqdci =  - k_r*sc[9];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[7] -= dqdci;                // dwdot[OH]/d[NO]
J[9] += dqdci;                // dwdot[H2O]/d[NO]
J[13] -= dqdci;               // dwdot[HNO]/d[NO]
// d()/d[OH]
dqdci =  + k_f*sc[13];
J[154] += dqdci;              // dwdot[NO]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[167] -= dqdci;              // dwdot[HNO]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[0];
J[198] += dqdci;              // dwdot[NO]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[211] -= dqdci;              // dwdot[HNO]/d[H2O]
// d()/d[HNO]
dqdci =  + k_f*sc[7];
J[286] += dqdci;              // dwdot[NO]/d[HNO]
J[293] -= dqdci;              // dwdot[OH]/d[HNO]
J[295] += dqdci;              // dwdot[H2O]/d[HNO]
J[299] -= dqdci;              // dwdot[HNO]/d[HNO]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[475] -= dqdT;               // dwdot[HNO]/dT

// reaction 30: H + N2O <=> N2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[5];
k_f = 33100
            * exp(- (2561.37282894602) * invT);
dlnkfdT = (2561.37282894602) * invT2;
// reverse
phi_r = sc[7]*sc[18];
Kc = exp(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[5]) + (h_RT[7] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] -= q;// N2O
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[18] += q;// N2
// d()/d[N2O]
dqdci =  + k_f*sc[5];
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[27] -= dqdci;               // dwdot[H]/d[N2O]
J[29] += dqdci;               // dwdot[OH]/d[N2O]
J[40] += dqdci;               // dwdot[N2]/d[N2O]
// d()/d[H]
dqdci =  + k_f*sc[1];
J[111] -= dqdci;              // dwdot[N2O]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[128] += dqdci;              // dwdot[N2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[18];
J[155] -= dqdci;              // dwdot[N2O]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[172] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[N2]
dqdci =  - k_r*sc[7];
J[397] -= dqdci;              // dwdot[N2O]/d[N2]
J[401] -= dqdci;              // dwdot[H]/d[N2]
J[403] += dqdci;              // dwdot[OH]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 31: H + N2O <=> N2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[5];
k_f = 783000000
            * exp(- (9757.37114995351) * invT);
dlnkfdT = (9757.37114995351) * invT2;
// reverse
phi_r = sc[7]*sc[18];
Kc = exp(g_RT[1] + g_RT[5] - g_RT[7] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[5]) + (h_RT[7] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] -= q;// N2O
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[18] += q;// N2
// d()/d[N2O]
dqdci =  + k_f*sc[5];
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[27] -= dqdci;               // dwdot[H]/d[N2O]
J[29] += dqdci;               // dwdot[OH]/d[N2O]
J[40] += dqdci;               // dwdot[N2]/d[N2O]
// d()/d[H]
dqdci =  + k_f*sc[1];
J[111] -= dqdci;              // dwdot[N2O]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[128] += dqdci;              // dwdot[N2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[18];
J[155] -= dqdci;              // dwdot[N2O]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[172] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[N2]
dqdci =  - k_r*sc[7];
J[397] -= dqdci;              // dwdot[N2O]/d[N2]
J[401] -= dqdci;              // dwdot[H]/d[N2]
J[403] += dqdci;              // dwdot[OH]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 32: N2O + O <=> 2 NO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[6];
k_f = 91500000
            * exp(- (13935.5791261301) * invT);
dlnkfdT = (13935.5791261301) * invT2;
// reverse
phi_r = (sc[0] * sc[0]);
Kc = exp(-2.000000*g_RT[0] + g_RT[1] + g_RT[6]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[6]) + (2.000000*h_RT[0]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += 2 * q;// NO
wdot[1] -= q;// N2O
wdot[6] -= q;// O
// d()/d[NO]
dqdci =  - k_r*2.000000*sc[0];
J[0] += 2 * dqdci;            // dwdot[NO]/d[NO]
J[1] -= dqdci;                // dwdot[N2O]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
// d()/d[N2O]
dqdci =  + k_f*sc[6];
J[22] += 2 * dqdci;           // dwdot[NO]/d[N2O]
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[28] -= dqdci;               // dwdot[O]/d[N2O]
// d()/d[O]
dqdci =  + k_f*sc[1];
J[132] += 2 * dqdci;          // dwdot[NO]/d[O]
J[133] -= dqdci;              // dwdot[N2O]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
// d()/dT
J[462] += 2 * dqdT;           // dwdot[NO]/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[468] -= dqdT;               // dwdot[O]/dT

// reaction 33: N2O + OH <=> HO2 + N2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[1]*sc[7];
k_f = 20000000
            * exp(- (20128.6666321888) * invT);
dlnkfdT = (20128.6666321888) * invT2;
// reverse
phi_r = sc[8]*sc[18];
Kc = exp(g_RT[1] + g_RT[7] - g_RT[8] - g_RT[18]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[1] + h_RT[7]) + (h_RT[8] + h_RT[18]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[1] -= q;// N2O
wdot[7] -= q;// OH
wdot[8] += q;// HO2
wdot[18] += q;// N2
// d()/d[N2O]
dqdci =  + k_f*sc[7];
J[23] -= dqdci;               // dwdot[N2O]/d[N2O]
J[29] -= dqdci;               // dwdot[OH]/d[N2O]
J[30] += dqdci;               // dwdot[HO2]/d[N2O]
J[40] += dqdci;               // dwdot[N2]/d[N2O]
// d()/d[OH]
dqdci =  + k_f*sc[1];
J[155] -= dqdci;              // dwdot[N2O]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[172] += dqdci;              // dwdot[N2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[18];
J[177] -= dqdci;              // dwdot[N2O]/d[HO2]
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[194] += dqdci;              // dwdot[N2]/d[HO2]
// d()/d[N2]
dqdci =  - k_r*sc[8];
J[397] -= dqdci;              // dwdot[N2O]/d[N2]
J[403] -= dqdci;              // dwdot[OH]/d[N2]
J[404] += dqdci;              // dwdot[HO2]/d[N2]
J[414] += dqdci;              // dwdot[N2]/d[N2]
// d()/dT
J[463] -= dqdT;               // dwdot[N2O]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[480] += dqdT;               // dwdot[N2]/dT

// reaction 35: HO2 + NO <=> NO2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[0]*sc[8];
k_f = 2100000
            * exp(- (-241.745286252587) * invT);
dlnkfdT = (-241.745286252587) * invT2;
// reverse
phi_r = sc[7]*sc[11];
Kc = exp(g_RT[0] - g_RT[7] + g_RT[8] - g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[0] + h_RT[8]) + (h_RT[7] + h_RT[11]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] -= q;// NO
wdot[7] += q;// OH
wdot[8] -= q;// HO2
wdot[11] += q;// NO2
// d()/d[NO]
dqdci =  + k_f*sc[8];
J[0] -= dqdci;                // dwdot[NO]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[8] -= dqdci;                // dwdot[HO2]/d[NO]
J[11] += dqdci;               // dwdot[NO2]/d[NO]
// d()/d[OH]
dqdci =  - k_r*sc[11];
J[154] -= dqdci;              // dwdot[NO]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
J[165] += dqdci;              // dwdot[NO2]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[0];
J[176] -= dqdci;              // dwdot[NO]/d[HO2]
J[183] += dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[187] += dqdci;              // dwdot[NO2]/d[HO2]
// d()/d[NO2]
dqdci =  - k_r*sc[7];
J[242] -= dqdci;              // dwdot[NO]/d[NO2]
J[249] += dqdci;              // dwdot[OH]/d[NO2]
J[250] -= dqdci;              // dwdot[HO2]/d[NO2]
J[253] += dqdci;              // dwdot[NO2]/d[NO2]
// d()/dT
J[462] -= dqdT;               // dwdot[NO]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[473] += dqdT;               // dwdot[NO2]/dT

// reaction 36: H + NO2 <=> NO + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[11];
k_f = 350000000
            * exp(- (755.308086706252) * invT);
dlnkfdT = (755.308086706252) * invT2;
// reverse
phi_r = sc[0]*sc[7];
Kc = exp(-g_RT[0] + g_RT[5] - g_RT[7] + g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[11]) + (h_RT[0] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[11] -= q;// NO2
// d()/d[NO]
dqdci =  - k_r*sc[7];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[5] -= dqdci;                // dwdot[H]/d[NO]
J[7] += dqdci;                // dwdot[OH]/d[NO]
J[11] -= dqdci;               // dwdot[NO2]/d[NO]
// d()/d[H]
dqdci =  + k_f*sc[11];
J[110] += dqdci;              // dwdot[NO]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[121] -= dqdci;              // dwdot[NO2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[0];
J[154] += dqdci;              // dwdot[NO]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[165] -= dqdci;              // dwdot[NO2]/d[OH]
// d()/d[NO2]
dqdci =  + k_f*sc[5];
J[242] += dqdci;              // dwdot[NO]/d[NO2]
J[247] -= dqdci;              // dwdot[H]/d[NO2]
J[249] += dqdci;              // dwdot[OH]/d[NO2]
J[253] -= dqdci;              // dwdot[NO2]/d[NO2]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[473] -= dqdT;               // dwdot[NO2]/dT

// reaction 37: NO2 + O <=> NO + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[11];
k_f = 10000000
            * exp(- (301.879677816251) * invT);
dlnkfdT = (301.879677816251) * invT2;
// reverse
phi_r = sc[0]*sc[2];
Kc = exp(-g_RT[0] - g_RT[2] + g_RT[6] + g_RT[11]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[11]) + (h_RT[0] + h_RT[2]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[0] += q;// NO
wdot[2] += q;// O2
wdot[6] -= q;// O
wdot[11] -= q;// NO2
// d()/d[NO]
dqdci =  - k_r*sc[2];
J[0] += dqdci;                // dwdot[NO]/d[NO]
J[2] += dqdci;                // dwdot[O2]/d[NO]
J[6] -= dqdci;                // dwdot[O]/d[NO]
J[11] -= dqdci;               // dwdot[NO2]/d[NO]
// d()/d[O2]
dqdci =  - k_r*sc[0];
J[44] += dqdci;               // dwdot[NO]/d[O2]
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[50] -= dqdci;               // dwdot[O]/d[O2]
J[55] -= dqdci;               // dwdot[NO2]/d[O2]
// d()/d[O]
dqdci =  + k_f*sc[11];
J[132] += dqdci;              // dwdot[NO]/d[O]
J[134] += dqdci;              // dwdot[O2]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[143] -= dqdci;              // dwdot[NO2]/d[O]
// d()/d[NO2]
dqdci =  + k_f*sc[6];
J[242] += dqdci;              // dwdot[NO]/d[NO2]
J[244] += dqdci;              // dwdot[O2]/d[NO2]
J[248] -= dqdci;              // dwdot[O]/d[NO2]
J[253] -= dqdci;              // dwdot[NO2]/d[NO2]
// d()/dT
J[462] += dqdT;               // dwdot[NO]/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[473] -= dqdT;               // dwdot[NO2]/dT

// reaction 38: H2NO + O <=> HNO + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[19];
k_f = 30
            * exp(2 * tc[0] - (1006.43333160944) * invT);
dlnkfdT = 2 * invT + (1006.43333160944) * invT2;
// reverse
phi_r = sc[7]*sc[13];
Kc = exp(g_RT[6] - g_RT[7] - g_RT[13] + g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[19]) + (h_RT[7] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[13] += q;// HNO
wdot[19] -= q;// H2NO
// d()/d[O]
dqdci =  + k_f*sc[19];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[145] += dqdci;              // dwdot[HNO]/d[O]
J[151] -= dqdci;              // dwdot[H2NO]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[13];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[167] += dqdci;              // dwdot[HNO]/d[OH]
J[173] -= dqdci;              // dwdot[H2NO]/d[OH]
// d()/d[HNO]
dqdci =  - k_r*sc[7];
J[292] -= dqdci;              // dwdot[O]/d[HNO]
J[293] += dqdci;              // dwdot[OH]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[305] -= dqdci;              // dwdot[H2NO]/d[HNO]
// d()/d[H2NO]
dqdci =  + k_f*sc[6];
J[424] -= dqdci;              // dwdot[O]/d[H2NO]
J[425] += dqdci;              // dwdot[OH]/d[H2NO]
J[431] += dqdci;              // dwdot[HNO]/d[H2NO]
J[437] -= dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[481] -= dqdT;               // dwdot[H2NO]/dT

// reaction 39: H2NO + O2 <=> HNO + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[19];
k_f = 3000000
            * exp(- (12580.416645118) * invT);
dlnkfdT = (12580.416645118) * invT2;
// reverse
phi_r = sc[8]*sc[13];
Kc = exp(g_RT[2] - g_RT[8] - g_RT[13] + g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[19]) + (h_RT[8] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[8] += q;// HO2
wdot[13] += q;// HNO
wdot[19] -= q;// H2NO
// d()/d[O2]
dqdci =  + k_f*sc[19];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[52] += dqdci;               // dwdot[HO2]/d[O2]
J[57] += dqdci;               // dwdot[HNO]/d[O2]
J[63] -= dqdci;               // dwdot[H2NO]/d[O2]
// d()/d[HO2]
dqdci =  - k_r*sc[13];
J[178] -= dqdci;              // dwdot[O2]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[189] += dqdci;              // dwdot[HNO]/d[HO2]
J[195] -= dqdci;              // dwdot[H2NO]/d[HO2]
// d()/d[HNO]
dqdci =  - k_r*sc[8];
J[288] -= dqdci;              // dwdot[O2]/d[HNO]
J[294] += dqdci;              // dwdot[HO2]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[305] -= dqdci;              // dwdot[H2NO]/d[HNO]
// d()/d[H2NO]
dqdci =  + k_f*sc[2];
J[420] -= dqdci;              // dwdot[O2]/d[H2NO]
J[426] += dqdci;              // dwdot[HO2]/d[H2NO]
J[431] += dqdci;              // dwdot[HNO]/d[H2NO]
J[437] -= dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[481] -= dqdT;               // dwdot[H2NO]/dT

// reaction 40: H2NO + HO2 <=> H2O2 + HNO
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[8]*sc[19];
k_f = 0.029
            * exp(2.69 * tc[0] - (-805.146665287552) * invT);
dlnkfdT = 2.69 * invT + (-805.146665287552) * invT2;
// reverse
phi_r = sc[10]*sc[13];
Kc = exp(g_RT[8] - g_RT[10] - g_RT[13] + g_RT[19]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[8] + h_RT[19]) + (h_RT[10] + h_RT[13]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[8] -= q;// HO2
wdot[10] += q;// H2O2
wdot[13] += q;// HNO
wdot[19] -= q;// H2NO
// d()/d[HO2]
dqdci =  + k_f*sc[19];
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[186] += dqdci;              // dwdot[H2O2]/d[HO2]
J[189] += dqdci;              // dwdot[HNO]/d[HO2]
J[195] -= dqdci;              // dwdot[H2NO]/d[HO2]
// d()/d[H2O2]
dqdci =  - k_r*sc[13];
J[228] -= dqdci;              // dwdot[HO2]/d[H2O2]
J[230] += dqdci;              // dwdot[H2O2]/d[H2O2]
J[233] += dqdci;              // dwdot[HNO]/d[H2O2]
J[239] -= dqdci;              // dwdot[H2NO]/d[H2O2]
// d()/d[HNO]
dqdci =  - k_r*sc[10];
J[294] -= dqdci;              // dwdot[HO2]/d[HNO]
J[296] += dqdci;              // dwdot[H2O2]/d[HNO]
J[299] += dqdci;              // dwdot[HNO]/d[HNO]
J[305] -= dqdci;              // dwdot[H2NO]/d[HNO]
// d()/d[H2NO]
dqdci =  + k_f*sc[8];
J[426] -= dqdci;              // dwdot[HO2]/d[H2NO]
J[428] += dqdci;              // dwdot[H2O2]/d[H2NO]
J[431] += dqdci;              // dwdot[HNO]/d[H2NO]
J[437] -= dqdci;              // dwdot[H2NO]/d[H2NO]
// d()/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[472] += dqdT;               // dwdot[H2O2]/dT
J[475] += dqdT;               // dwdot[HNO]/dT
J[481] -= dqdT;               // dwdot[H2NO]/dT

// reaction 41: H + O2 <=> O + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[2]*sc[5];
k_f = 35200000000
            * exp(-0.7 * tc[0] - (8589.80280978675) * invT);
dlnkfdT = -0.7 * invT + (8589.80280978675) * invT2;
// reverse
phi_r = sc[6]*sc[7];
Kc = exp(g_RT[2] + g_RT[5] - g_RT[6] - g_RT[7]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[2] + h_RT[5]) + (h_RT[6] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] -= q;// O2
wdot[5] -= q;// H
wdot[6] += q;// O
wdot[7] += q;// OH
// d()/d[O2]
dqdci =  + k_f*sc[5];
J[46] -= dqdci;               // dwdot[O2]/d[O2]
J[49] -= dqdci;               // dwdot[H]/d[O2]
J[50] += dqdci;               // dwdot[O]/d[O2]
J[51] += dqdci;               // dwdot[OH]/d[O2]
// d()/d[H]
dqdci =  + k_f*sc[2];
J[112] -= dqdci;              // dwdot[O2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[116] += dqdci;              // dwdot[O]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
// d()/d[O]
dqdci =  - k_r*sc[7];
J[134] -= dqdci;              // dwdot[O2]/d[O]
J[137] -= dqdci;              // dwdot[H]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[6];
J[156] -= dqdci;              // dwdot[O2]/d[OH]
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[160] += dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
// d()/dT
J[464] -= dqdT;               // dwdot[O2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT

// reaction 42: H2 + O <=> H + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[3]*sc[6];
k_f = 0.0506
            * exp(2.67 * tc[0] - (3165.54985441114) * invT);
dlnkfdT = 2.67 * invT + (3165.54985441114) * invT2;
// reverse
phi_r = sc[5]*sc[7];
Kc = exp(g_RT[3] - g_RT[5] + g_RT[6] - g_RT[7]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[3] + h_RT[6]) + (h_RT[5] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] -= q;// H2
wdot[5] += q;// H
wdot[6] -= q;// O
wdot[7] += q;// OH
// d()/d[H2]
dqdci =  + k_f*sc[6];
J[69] -= dqdci;               // dwdot[H2]/d[H2]
J[71] += dqdci;               // dwdot[H]/d[H2]
J[72] -= dqdci;               // dwdot[O]/d[H2]
J[73] += dqdci;               // dwdot[OH]/d[H2]
// d()/d[H]
dqdci =  - k_r*sc[7];
J[113] -= dqdci;              // dwdot[H2]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[116] -= dqdci;              // dwdot[O]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
// d()/d[O]
dqdci =  + k_f*sc[3];
J[135] -= dqdci;              // dwdot[H2]/d[O]
J[137] += dqdci;              // dwdot[H]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[5];
J[157] -= dqdci;              // dwdot[H2]/d[OH]
J[159] += dqdci;              // dwdot[H]/d[OH]
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
// d()/dT
J[465] -= dqdT;               // dwdot[H2]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT

// reaction 43: H2 + OH <=> H + H2O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[3]*sc[7];
k_f = 1170
            * exp(1.3 * tc[0] - (1829.33348086658) * invT);
dlnkfdT = 1.3 * invT + (1829.33348086658) * invT2;
// reverse
phi_r = sc[5]*sc[9];
Kc = exp(g_RT[3] - g_RT[5] + g_RT[7] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[3] + h_RT[7]) + (h_RT[5] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] -= q;// H2
wdot[5] += q;// H
wdot[7] -= q;// OH
wdot[9] += q;// H2O
// d()/d[H2]
dqdci =  + k_f*sc[7];
J[69] -= dqdci;               // dwdot[H2]/d[H2]
J[71] += dqdci;               // dwdot[H]/d[H2]
J[73] -= dqdci;               // dwdot[OH]/d[H2]
J[75] += dqdci;               // dwdot[H2O]/d[H2]
// d()/d[H]
dqdci =  - k_r*sc[9];
J[113] -= dqdci;              // dwdot[H2]/d[H]
J[115] += dqdci;              // dwdot[H]/d[H]
J[117] -= dqdci;              // dwdot[OH]/d[H]
J[119] += dqdci;              // dwdot[H2O]/d[H]
// d()/d[OH]
dqdci =  + k_f*sc[3];
J[157] -= dqdci;              // dwdot[H2]/d[OH]
J[159] += dqdci;              // dwdot[H]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[5];
J[201] -= dqdci;              // dwdot[H2]/d[H2O]
J[203] += dqdci;              // dwdot[H]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[465] -= dqdT;               // dwdot[H2]/dT
J[467] += dqdT;               // dwdot[H]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 44: H2O + O <=> 2 OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[9];
k_f = 0.7
            * exp(2.33 * tc[0] - (7320.93695479349) * invT);
dlnkfdT = 2.33 * invT + (7320.93695479349) * invT2;
// reverse
phi_r = (sc[7] * sc[7]);
Kc = exp(g_RT[6] - 2.000000*g_RT[7] + g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[9]) + (2.000000*h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += 2 * q;// OH
wdot[9] -= q;// H2O
// d()/d[O]
dqdci =  + k_f*sc[9];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += 2 * dqdci;          // dwdot[OH]/d[O]
J[141] -= dqdci;              // dwdot[H2O]/d[O]
// d()/d[OH]
dqdci =  - k_r*2.000000*sc[7];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += 2 * dqdci;          // dwdot[OH]/d[OH]
J[163] -= dqdci;              // dwdot[H2O]/d[OH]
// d()/d[H2O]
dqdci =  + k_f*sc[6];
J[204] -= dqdci;              // dwdot[O]/d[H2O]
J[205] += 2 * dqdci;          // dwdot[OH]/d[H2O]
J[207] -= dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += 2 * dqdT;           // dwdot[OH]/dT
J[471] -= dqdT;               // dwdot[H2O]/dT

// reaction 50: H + HO2 <=> 2 OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[8];
k_f = 70800000
            * exp(- (148.413691245786) * invT);
dlnkfdT = (148.413691245786) * invT2;
// reverse
phi_r = (sc[7] * sc[7]);
Kc = exp(g_RT[5] - 2.000000*g_RT[7] + g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (2.000000*h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[7] += 2 * q;// OH
wdot[8] -= q;// HO2
// d()/d[H]
dqdci =  + k_f*sc[8];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += 2 * dqdci;          // dwdot[OH]/d[H]
J[118] -= dqdci;              // dwdot[HO2]/d[H]
// d()/d[OH]
dqdci =  - k_r*2.000000*sc[7];
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += 2 * dqdci;          // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[5];
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[183] += 2 * dqdci;          // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
// d()/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += 2 * dqdT;           // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT

// reaction 51: H + HO2 <=> H2 + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[8];
k_f = 16600000
            * exp(- (414.096994290704) * invT);
dlnkfdT = (414.096994290704) * invT2;
// reverse
phi_r = sc[2]*sc[3];
Kc = exp(-g_RT[2] - g_RT[3] + g_RT[5] + g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (h_RT[2] + h_RT[3]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[8] -= q;// HO2
// d()/d[O2]
dqdci =  - k_r*sc[3];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[47] += dqdci;               // dwdot[H2]/d[O2]
J[49] -= dqdci;               // dwdot[H]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
// d()/d[H2]
dqdci =  - k_r*sc[2];
J[68] += dqdci;               // dwdot[O2]/d[H2]
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[74] -= dqdci;               // dwdot[HO2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[8];
J[112] += dqdci;              // dwdot[O2]/d[H]
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[118] -= dqdci;              // dwdot[HO2]/d[H]
// d()/d[HO2]
dqdci =  + k_f*sc[5];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[179] += dqdci;              // dwdot[H2]/d[HO2]
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT

// reaction 52: H + HO2 <=> H2O + O
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[8];
k_f = 31000000
            * exp(- (865.955367183394) * invT);
dlnkfdT = (865.955367183394) * invT2;
// reverse
phi_r = sc[6]*sc[9];
Kc = exp(g_RT[5] - g_RT[6] + g_RT[8] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[8]) + (h_RT[6] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[6] += q;// O
wdot[8] -= q;// HO2
wdot[9] += q;// H2O
// d()/d[H]
dqdci =  + k_f*sc[8];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[116] += dqdci;              // dwdot[O]/d[H]
J[118] -= dqdci;              // dwdot[HO2]/d[H]
J[119] += dqdci;              // dwdot[H2O]/d[H]
// d()/d[O]
dqdci =  - k_r*sc[9];
J[137] -= dqdci;              // dwdot[H]/d[O]
J[138] += dqdci;              // dwdot[O]/d[O]
J[140] -= dqdci;              // dwdot[HO2]/d[O]
J[141] += dqdci;              // dwdot[H2O]/d[O]
// d()/d[HO2]
dqdci =  + k_f*sc[5];
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[182] += dqdci;              // dwdot[O]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[6];
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[204] += dqdci;              // dwdot[O]/d[H2O]
J[206] -= dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[468] += dqdT;               // dwdot[O]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 53: HO2 + O <=> O2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[8];
k_f = 20000000
           ;
dlnkfdT = 0.0;
// reverse
phi_r = sc[2]*sc[7];
Kc = exp(-g_RT[2] + g_RT[6] - g_RT[7] + g_RT[8]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[8]) + (h_RT[2] + h_RT[7]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[8] -= q;// HO2
// d()/d[O2]
dqdci =  - k_r*sc[7];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[50] -= dqdci;               // dwdot[O]/d[O2]
J[51] += dqdci;               // dwdot[OH]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
// d()/d[O]
dqdci =  + k_f*sc[8];
J[134] += dqdci;              // dwdot[O2]/d[O]
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[140] -= dqdci;              // dwdot[HO2]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[2];
J[156] += dqdci;              // dwdot[O2]/d[OH]
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[6];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[182] -= dqdci;              // dwdot[O]/d[HO2]
J[183] += dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT

// reaction 54: HO2 + OH <=> H2O + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[8];
k_f = 7000000
            * exp(- (-550.846123223136) * invT);
dlnkfdT = (-550.846123223136) * invT2;
// reverse
phi_r = sc[2]*sc[9];
Kc = exp(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[8]) + (h_RT[2] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[7] -= q;// OH
wdot[8] -= q;// HO2
wdot[9] += q;// H2O
// d()/d[O2]
dqdci =  - k_r*sc[9];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[51] -= dqdci;               // dwdot[OH]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
J[53] += dqdci;               // dwdot[H2O]/d[O2]
// d()/d[OH]
dqdci =  + k_f*sc[8];
J[156] += dqdci;              // dwdot[O2]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[7];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[2];
J[200] += dqdci;              // dwdot[O2]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] -= dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 55: HO2 + OH <=> H2O + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[8];
k_f = 450000000
            * exp(- (5500.02228874582) * invT);
dlnkfdT = (5500.02228874582) * invT2;
// reverse
phi_r = sc[2]*sc[9];
Kc = exp(-g_RT[2] + g_RT[7] + g_RT[8] - g_RT[9]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[8]) + (h_RT[2] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[7] -= q;// OH
wdot[8] -= q;// HO2
wdot[9] += q;// H2O
// d()/d[O2]
dqdci =  - k_r*sc[9];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[51] -= dqdci;               // dwdot[OH]/d[O2]
J[52] -= dqdci;               // dwdot[HO2]/d[O2]
J[53] += dqdci;               // dwdot[H2O]/d[O2]
// d()/d[OH]
dqdci =  + k_f*sc[8];
J[156] += dqdci;              // dwdot[O2]/d[OH]
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] -= dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
// d()/d[HO2]
dqdci =  + k_f*sc[7];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] -= dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[2];
J[200] += dqdci;              // dwdot[O2]/d[H2O]
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] -= dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] -= dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT

// reaction 57: 2 HO2 <=> H2O2 + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = (sc[8] * sc[8]);
k_f = 103000000
            * exp(- (5556.55364898232) * invT);
dlnkfdT = (5556.55364898232) * invT2;
// reverse
phi_r = sc[2]*sc[10];
Kc = exp(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[8]) + (h_RT[2] + h_RT[10]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[8] -= 2 * q;// HO2
wdot[10] += q;// H2O2
// d()/d[O2]
dqdci =  - k_r*sc[10];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[52] += -2 * dqdci;          // dwdot[HO2]/d[O2]
J[54] += dqdci;               // dwdot[H2O2]/d[O2]
// d()/d[HO2]
dqdci =  + k_f*2.000000*sc[8];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[184] += -2 * dqdci;         // dwdot[HO2]/d[HO2]
J[186] += dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  - k_r*sc[2];
J[222] += dqdci;              // dwdot[O2]/d[H2O2]
J[228] += -2 * dqdci;         // dwdot[HO2]/d[H2O2]
J[230] += dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[470] += -2 * dqdT;          // dwdot[HO2]/dT
J[472] += dqdT;               // dwdot[H2O2]/dT

// reaction 58: 2 HO2 <=> H2O2 + O2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = (sc[8] * sc[8]);
k_f = 194000
            * exp(- (-709.002089118902) * invT);
dlnkfdT = (-709.002089118902) * invT2;
// reverse
phi_r = sc[2]*sc[10];
Kc = exp(-g_RT[2] + 2.000000*g_RT[8] - g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(2.000000*h_RT[8]) + (h_RT[2] + h_RT[10]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[2] += q;// O2
wdot[8] -= 2 * q;// HO2
wdot[10] += q;// H2O2
// d()/d[O2]
dqdci =  - k_r*sc[10];
J[46] += dqdci;               // dwdot[O2]/d[O2]
J[52] += -2 * dqdci;          // dwdot[HO2]/d[O2]
J[54] += dqdci;               // dwdot[H2O2]/d[O2]
// d()/d[HO2]
dqdci =  + k_f*2.000000*sc[8];
J[178] += dqdci;              // dwdot[O2]/d[HO2]
J[184] += -2 * dqdci;         // dwdot[HO2]/d[HO2]
J[186] += dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  - k_r*sc[2];
J[222] += dqdci;              // dwdot[O2]/d[H2O2]
J[228] += -2 * dqdci;         // dwdot[HO2]/d[H2O2]
J[230] += dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[464] += dqdT;               // dwdot[O2]/dT
J[470] += -2 * dqdT;          // dwdot[HO2]/dT
J[472] += dqdT;               // dwdot[H2O2]/dT

// reaction 59: H + H2O2 <=> H2 + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[10];
k_f = 23000000
            * exp(- (4000.59765398081) * invT);
dlnkfdT = (4000.59765398081) * invT2;
// reverse
phi_r = sc[3]*sc[8];
Kc = exp(-g_RT[3] + g_RT[5] - g_RT[8] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[3] + h_RT[8]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[3] += q;// H2
wdot[5] -= q;// H
wdot[8] += q;// HO2
wdot[10] -= q;// H2O2
// d()/d[H2]
dqdci =  - k_r*sc[8];
J[69] += dqdci;               // dwdot[H2]/d[H2]
J[71] -= dqdci;               // dwdot[H]/d[H2]
J[74] += dqdci;               // dwdot[HO2]/d[H2]
J[76] -= dqdci;               // dwdot[H2O2]/d[H2]
// d()/d[H]
dqdci =  + k_f*sc[10];
J[113] += dqdci;              // dwdot[H2]/d[H]
J[115] -= dqdci;              // dwdot[H]/d[H]
J[118] += dqdci;              // dwdot[HO2]/d[H]
J[120] -= dqdci;              // dwdot[H2O2]/d[H]
// d()/d[HO2]
dqdci =  - k_r*sc[3];
J[179] += dqdci;              // dwdot[H2]/d[HO2]
J[181] -= dqdci;              // dwdot[H]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  + k_f*sc[5];
J[223] += dqdci;              // dwdot[H2]/d[H2O2]
J[225] -= dqdci;              // dwdot[H]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[465] += dqdT;               // dwdot[H2]/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 60: H + H2O2 <=> H2O + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[5]*sc[10];
k_f = 10000000
            * exp(- (1804.07703640984) * invT);
dlnkfdT = (1804.07703640984) * invT2;
// reverse
phi_r = sc[7]*sc[9];
Kc = exp(g_RT[5] - g_RT[7] - g_RT[9] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[5] + h_RT[10]) + (h_RT[7] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[5] -= q;// H
wdot[7] += q;// OH
wdot[9] += q;// H2O
wdot[10] -= q;// H2O2
// d()/d[H]
dqdci =  + k_f*sc[10];
J[115] -= dqdci;              // dwdot[H]/d[H]
J[117] += dqdci;              // dwdot[OH]/d[H]
J[119] += dqdci;              // dwdot[H2O]/d[H]
J[120] -= dqdci;              // dwdot[H2O2]/d[H]
// d()/d[OH]
dqdci =  - k_r*sc[9];
J[159] -= dqdci;              // dwdot[H]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[H2O]
dqdci =  - k_r*sc[7];
J[203] -= dqdci;              // dwdot[H]/d[H2O]
J[205] += dqdci;              // dwdot[OH]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[208] -= dqdci;              // dwdot[H2O2]/d[H2O]
// d()/d[H2O2]
dqdci =  + k_f*sc[5];
J[225] -= dqdci;              // dwdot[H]/d[H2O2]
J[227] += dqdci;              // dwdot[OH]/d[H2O2]
J[229] += dqdci;              // dwdot[H2O]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[467] -= dqdT;               // dwdot[H]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 61: H2O2 + OH <=> H2O + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[10];
k_f = 1740000
            * exp(- (721.627795263942) * invT);
dlnkfdT = (721.627795263942) * invT2;
// reverse
phi_r = sc[8]*sc[9];
Kc = exp(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[10]) + (h_RT[8] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[8] += q;// HO2
wdot[9] += q;// H2O
wdot[10] -= q;// H2O2
// d()/d[OH]
dqdci =  + k_f*sc[10];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[9];
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[8];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] += dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[208] -= dqdci;              // dwdot[H2O2]/d[H2O]
// d()/d[H2O2]
dqdci =  + k_f*sc[7];
J[227] -= dqdci;              // dwdot[OH]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[229] += dqdci;              // dwdot[H2O]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 62: H2O2 + OH <=> H2O + HO2
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[7]*sc[10];
k_f = 75900000
            * exp(- (3659.86461739778) * invT);
dlnkfdT = (3659.86461739778) * invT2;
// reverse
phi_r = sc[8]*sc[9];
Kc = exp(g_RT[7] - g_RT[8] - g_RT[9] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[7] + h_RT[10]) + (h_RT[8] + h_RT[9]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[7] -= q;// OH
wdot[8] += q;// HO2
wdot[9] += q;// H2O
wdot[10] -= q;// H2O2
// d()/d[OH]
dqdci =  + k_f*sc[10];
J[161] -= dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[163] += dqdci;              // dwdot[H2O]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[9];
J[183] -= dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[185] += dqdci;              // dwdot[H2O]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O]
dqdci =  - k_r*sc[8];
J[205] -= dqdci;              // dwdot[OH]/d[H2O]
J[206] += dqdci;              // dwdot[HO2]/d[H2O]
J[207] += dqdci;              // dwdot[H2O]/d[H2O]
J[208] -= dqdci;              // dwdot[H2O2]/d[H2O]
// d()/d[H2O2]
dqdci =  + k_f*sc[7];
J[227] -= dqdci;              // dwdot[OH]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[229] += dqdci;              // dwdot[H2O]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[469] -= dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[471] += dqdT;               // dwdot[H2O]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

// reaction 63: H2O2 + O <=> HO2 + OH
// a non-third-body and non-pressure-fall-off reaction
// forward
phi_f = sc[6]*sc[10];
k_f = 9.63
            * exp(2 * tc[0] - (2008.53899989296) * invT);
dlnkfdT = 2 * invT + (2008.53899989296) * invT2;
// reverse
phi_r = sc[7]*sc[8];
Kc = exp(g_RT[6] - g_RT[7] - g_RT[8] + g_RT[10]);
k_r = k_f / Kc;
dlnKcdT = invT * (-(h_RT[6] + h_RT[10]) + (h_RT[7] + h_RT[8]));
dkrdT = (dlnkfdT - dlnKcdT)*k_r;
// rate of progress
q = k_f*phi_f - k_r*phi_r;
dqdT = (dlnkfdT*k_f*phi_f - dkrdT*phi_r);
// update wdot
wdot[6] -= q;// O
wdot[7] += q;// OH
wdot[8] += q;// HO2
wdot[10] -= q;// H2O2
// d()/d[O]
dqdci =  + k_f*sc[10];
J[138] -= dqdci;              // dwdot[O]/d[O]
J[139] += dqdci;              // dwdot[OH]/d[O]
J[140] += dqdci;              // dwdot[HO2]/d[O]
J[142] -= dqdci;              // dwdot[H2O2]/d[O]
// d()/d[OH]
dqdci =  - k_r*sc[8];
J[160] -= dqdci;              // dwdot[O]/d[OH]
J[161] += dqdci;              // dwdot[OH]/d[OH]
J[162] += dqdci;              // dwdot[HO2]/d[OH]
J[164] -= dqdci;              // dwdot[H2O2]/d[OH]
// d()/d[HO2]
dqdci =  - k_r*sc[7];
J[182] -= dqdci;              // dwdot[O]/d[HO2]
J[183] += dqdci;              // dwdot[OH]/d[HO2]
J[184] += dqdci;              // dwdot[HO2]/d[HO2]
J[186] -= dqdci;              // dwdot[H2O2]/d[HO2]
// d()/d[H2O2]
dqdci =  + k_f*sc[6];
J[226] -= dqdci;              // dwdot[O]/d[H2O2]
J[227] += dqdci;              // dwdot[OH]/d[H2O2]
J[228] += dqdci;              // dwdot[HO2]/d[H2O2]
J[230] -= dqdci;              // dwdot[H2O2]/d[H2O2]
// d()/dT
J[468] -= dqdT;               // dwdot[O]/dT
J[469] += dqdT;               // dwdot[OH]/dT
J[470] += dqdT;               // dwdot[HO2]/dT
J[472] -= dqdT;               // dwdot[H2O2]/dT

amrex::Real c_R[21], dcRdT[21], e_RT[21];
amrex::Real * eh_RT;
if (consP) {
cp_R(c_R, tc);
dcvpRdT(dcRdT, tc);
eh_RT = &h_RT[0];
}
else {
cv_R(c_R, tc);
dcvpRdT(dcRdT, tc);
speciesInternalEnergy(e_RT, tc);
eh_RT = &e_RT[0];
}

amrex::Real cmix = 0.0, ehmix = 0.0, dcmixdT=0.0, dehmixdT=0.0;
for (int k = 0; k < 21; ++k) {
cmix += c_R[k]*sc[k];
dcmixdT += dcRdT[k]*sc[k];
ehmix += eh_RT[k]*wdot[k];
dehmixdT += invT*(c_R[k]-eh_RT[k])*wdot[k] + eh_RT[k]*J[462+k];
}

amrex::Real cmixinv = 1.0/cmix;
amrex::Real tmp1 = ehmix*cmixinv;
amrex::Real tmp3 = cmixinv*T;
amrex::Real tmp2 = tmp1*tmp3;
amrex::Real dehmixdc;
// dTdot/d[X]
for (int k = 0; k < 21; ++k) {
dehmixdc = 0.0;
for (int m = 0; m < 21; ++m) {
dehmixdc += eh_RT[m]*J[k*22+m];
}
J[k*22+21] = tmp2*c_R[k] - tmp3*dehmixdc;
}
// dTdot/dT
J[483] = -tmp1 + tmp2*dcmixdT - tmp3*dehmixdT;
}

// compute the reaction Jacobian
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void DWDOT(amrex::Real *  J, amrex::Real *  sc, amrex::Real *  Tp, const int * consP)
{
amrex::Real c[21];

for (int k=0; k<21; k++) {
c[k] = 1.e6 * sc[k];
}

aJacobian(J, c, *Tp, *consP);

// dwdot[k]/dT
// dTdot/d[X]
for (int k=0; k<21; k++) {
J[462+k] *= 1.e-6;
J[k*22+21] *= 1.e6;
}

return;
}


// Transport function declarations 

AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetLENIMC(int* LENIMC ) {
*LENIMC = 87;}


AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetLENRMC(int* LENRMC ) {
*LENRMC = 9198;}


AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetNO(int* NO ) {
*NO = 4;}


AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetKK(int* KK ) {
*KK = 21;}


AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetNLITE(int* NLITE ) {
*NLITE = 3;}


// Patm in ergs/cm3
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetPATM(amrex::Real* PATM) {
*PATM =   0.1013250000000000E+07;}

// the molecular weights in g/mol
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetWT(amrex::Real* WT ) {
WT[0] = 3.00060000E+01;
WT[1] = 4.40130000E+01;
WT[2] = 3.19980000E+01;
WT[3] = 2.01600000E+00;
WT[4] = 3.99500000E+01;
WT[5] = 1.00800000E+00;
WT[6] = 1.59990000E+01;
WT[7] = 1.70070000E+01;
WT[8] = 3.30060000E+01;
WT[9] = 1.80150000E+01;
WT[10] = 3.40140000E+01;
WT[11] = 4.60050000E+01;
WT[12] = 1.70310000E+01;
WT[13] = 3.10140000E+01;
WT[14] = 1.40070000E+01;
WT[15] = 2.90220000E+01;
WT[16] = 1.60230000E+01;
WT[17] = 1.50150000E+01;
WT[18] = 2.80140000E+01;
WT[19] = 3.20220000E+01;
WT[20] = 4.00260200E+00;
}

// the lennard-jones potential well depth eps/kb in K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetEPS(amrex::Real* EPS ) {
EPS[0] = 9.75300000E+01;
EPS[1] = 2.32400000E+02;
EPS[2] = 1.07400000E+02;
EPS[3] = 3.80000000E+01;
EPS[4] = 1.36500000E+02;
EPS[5] = 1.45000000E+02;
EPS[6] = 8.00000000E+01;
EPS[7] = 8.00000000E+01;
EPS[8] = 1.07400000E+02;
EPS[9] = 5.72400000E+02;
EPS[10] = 1.07400000E+02;
EPS[11] = 2.00000000E+02;
EPS[12] = 4.81000000E+02;
EPS[13] = 1.16700000E+02;
EPS[14] = 7.14000000E+01;
EPS[15] = 7.14000000E+01;
EPS[16] = 8.00000000E+01;
EPS[17] = 8.00000000E+01;
EPS[18] = 9.75300000E+01;
EPS[19] = 1.16700000E+02;
EPS[20] = 1.02000000E+01;
}

// the lennard-jones collision diameter in Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetSIG(amrex::Real* SIG ) {
SIG[0] = 3.62100000E+00;
SIG[1] = 3.82800000E+00;
SIG[2] = 3.45800000E+00;
SIG[3] = 2.92000000E+00;
SIG[4] = 3.33000000E+00;
SIG[5] = 2.05000000E+00;
SIG[6] = 2.75000000E+00;
SIG[7] = 2.75000000E+00;
SIG[8] = 3.45800000E+00;
SIG[9] = 2.60500000E+00;
SIG[10] = 3.45800000E+00;
SIG[11] = 3.50000000E+00;
SIG[12] = 2.92000000E+00;
SIG[13] = 3.49200000E+00;
SIG[14] = 3.29800000E+00;
SIG[15] = 3.79800000E+00;
SIG[16] = 2.65000000E+00;
SIG[17] = 2.65000000E+00;
SIG[18] = 3.62100000E+00;
SIG[19] = 3.49200000E+00;
SIG[20] = 2.57600000E+00;
}

// the dipole moment in Debye
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetDIP(amrex::Real* DIP ) {
DIP[0] = 0.00000000E+00;
DIP[1] = 0.00000000E+00;
DIP[2] = 0.00000000E+00;
DIP[3] = 0.00000000E+00;
DIP[4] = 0.00000000E+00;
DIP[5] = 0.00000000E+00;
DIP[6] = 0.00000000E+00;
DIP[7] = 0.00000000E+00;
DIP[8] = 0.00000000E+00;
DIP[9] = 1.84400000E+00;
DIP[10] = 0.00000000E+00;
DIP[11] = 0.00000000E+00;
DIP[12] = 1.47000000E+00;
DIP[13] = 0.00000000E+00;
DIP[14] = 0.00000000E+00;
DIP[15] = 0.00000000E+00;
DIP[16] = 0.00000000E+00;
DIP[17] = 0.00000000E+00;
DIP[18] = 0.00000000E+00;
DIP[19] = 0.00000000E+00;
DIP[20] = 0.00000000E+00;
}

// the polarizability in cubic Angstroms
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetPOL(amrex::Real* POL ) {
POL[0] = 1.76000000E+00;
POL[1] = 0.00000000E+00;
POL[2] = 1.60000000E+00;
POL[3] = 7.90000000E-01;
POL[4] = 0.00000000E+00;
POL[5] = 0.00000000E+00;
POL[6] = 0.00000000E+00;
POL[7] = 0.00000000E+00;
POL[8] = 0.00000000E+00;
POL[9] = 0.00000000E+00;
POL[10] = 0.00000000E+00;
POL[11] = 0.00000000E+00;
POL[12] = 0.00000000E+00;
POL[13] = 0.00000000E+00;
POL[14] = 0.00000000E+00;
POL[15] = 0.00000000E+00;
POL[16] = 2.26000000E+00;
POL[17] = 0.00000000E+00;
POL[18] = 1.76000000E+00;
POL[19] = 0.00000000E+00;
POL[20] = 0.00000000E+00;
}

// the rotational relaxation collision number at 298 K
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetZROT(amrex::Real* ZROT ) {
ZROT[0] = 4.00000000E+00;
ZROT[1] = 1.00000000E+00;
ZROT[2] = 3.80000000E+00;
ZROT[3] = 2.80000000E+02;
ZROT[4] = 0.00000000E+00;
ZROT[5] = 0.00000000E+00;
ZROT[6] = 0.00000000E+00;
ZROT[7] = 0.00000000E+00;
ZROT[8] = 1.00000000E+00;
ZROT[9] = 4.00000000E+00;
ZROT[10] = 3.80000000E+00;
ZROT[11] = 1.00000000E+00;
ZROT[12] = 1.00000000E+01;
ZROT[13] = 1.00000000E+00;
ZROT[14] = 0.00000000E+00;
ZROT[15] = 1.00000000E+00;
ZROT[16] = 4.00000000E+00;
ZROT[17] = 4.00000000E+00;
ZROT[18] = 4.00000000E+00;
ZROT[19] = 1.00000000E+00;
ZROT[20] = 0.00000000E+00;
}

// 0: monoatomic, 1: linear, 2: nonlinear
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetNLIN(int* NLIN) {
NLIN[0] = 1;
NLIN[1] = 1;
NLIN[2] = 1;
NLIN[3] = 1;
NLIN[4] = 0;
NLIN[5] = 0;
NLIN[6] = 0;
NLIN[7] = 1;
NLIN[8] = 2;
NLIN[9] = 2;
NLIN[10] = 2;
NLIN[11] = 2;
NLIN[12] = 2;
NLIN[13] = 2;
NLIN[14] = 0;
NLIN[15] = 2;
NLIN[16] = 2;
NLIN[17] = 1;
NLIN[18] = 1;
NLIN[19] = 2;
NLIN[20] = 0;
}


// Poly fits for the viscosities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetCOFETA(amrex::Real* COFETA) {
COFETA[0] = -1.62183211E+01;
COFETA[1] = 2.24839597E+00;
COFETA[2] = -2.13428438E-01;
COFETA[3] = 9.46192413E-03;
COFETA[4] = -2.34095270E+01;
COFETA[5] = 4.90674397E+00;
COFETA[6] = -5.43633077E-01;
COFETA[7] = 2.31545322E-02;
COFETA[8] = -1.68118998E+01;
COFETA[9] = 2.52362554E+00;
COFETA[10] = -2.49309128E-01;
COFETA[11] = 1.10211025E-02;
COFETA[12] = -1.37549291E+01;
COFETA[13] = 9.65530587E-01;
COFETA[14] = -4.45720114E-02;
COFETA[15] = 2.05871810E-03;
COFETA[16] = -1.86067352E+01;
COFETA[17] = 3.27402596E+00;
COFETA[18] = -3.45827972E-01;
COFETA[19] = 1.51622680E-02;
COFETA[20] = -1.98744352E+01;
COFETA[21] = 3.41660514E+00;
COFETA[22] = -3.63206306E-01;
COFETA[23] = 1.58671021E-02;
COFETA[24] = -1.48001711E+01;
COFETA[25] = 1.79491990E+00;
COFETA[26] = -1.54008440E-01;
COFETA[27] = 6.86719439E-03;
COFETA[28] = -1.47696217E+01;
COFETA[29] = 1.79491990E+00;
COFETA[30] = -1.54008440E-01;
COFETA[31] = 6.86719439E-03;
COFETA[32] = -1.67963918E+01;
COFETA[33] = 2.52362554E+00;
COFETA[34] = -2.49309128E-01;
COFETA[35] = 1.10211025E-02;
COFETA[36] = -1.17770995E+01;
COFETA[37] = -8.26744826E-01;
COFETA[38] = 3.39009392E-01;
COFETA[39] = -2.00674472E-02;
COFETA[40] = -1.67813504E+01;
COFETA[41] = 2.52362554E+00;
COFETA[42] = -2.49309128E-01;
COFETA[43] = 1.10211025E-02;
COFETA[44] = -2.19747548E+01;
COFETA[45] = 4.48704435E+00;
COFETA[46] = -4.95405530E-01;
COFETA[47] = 2.13182822E-02;
COFETA[48] = -1.75997761E+01;
COFETA[49] = 1.80798373E+00;
COFETA[50] = -4.66737279E-02;
COFETA[51] = -2.01277674E-03;
COFETA[52] = -1.74155433E+01;
COFETA[53] = 2.73703661E+00;
COFETA[54] = -2.76604700E-01;
COFETA[55] = 1.21851146E-02;
COFETA[56] = -1.46482141E+01;
COFETA[57] = 1.57011544E+00;
COFETA[58] = -1.24217373E-01;
COFETA[59] = 5.55161238E-03;
COFETA[60] = -1.45662824E+01;
COFETA[61] = 1.57011544E+00;
COFETA[62] = -1.24217373E-01;
COFETA[63] = 5.55161238E-03;
COFETA[64] = -1.47253391E+01;
COFETA[65] = 1.79491990E+00;
COFETA[66] = -1.54008440E-01;
COFETA[67] = 6.86719439E-03;
COFETA[68] = -1.47578268E+01;
COFETA[69] = 1.79491990E+00;
COFETA[70] = -1.54008440E-01;
COFETA[71] = 6.86719439E-03;
COFETA[72] = -1.62526676E+01;
COFETA[73] = 2.24839597E+00;
COFETA[74] = -2.13428438E-01;
COFETA[75] = 9.46192413E-03;
COFETA[76] = -1.73995511E+01;
COFETA[77] = 2.73703661E+00;
COFETA[78] = -2.76604700E-01;
COFETA[79] = 1.21851146E-02;
COFETA[80] = -1.11555215E+01;
COFETA[81] = 2.18772782E-01;
COFETA[82] = 5.60263799E-02;
COFETA[83] = -2.36018246E-03;
}


// Poly fits for the conductivities, dim NO*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetCOFLAM(amrex::Real* COFLAM) {
COFLAM[0] = 8.25621552E+00;
COFLAM[1] = -1.54468869E+00;
COFLAM[2] = 3.67429820E-01;
COFLAM[3] = -1.90748822E-02;
COFLAM[4] = -1.14595857E+01;
COFLAM[5] = 6.03602828E+00;
COFLAM[6] = -6.06536140E-01;
COFLAM[7] = 2.28415135E-02;
COFLAM[8] = -3.01283106E+00;
COFLAM[9] = 3.37554996E+00;
COFLAM[10] = -3.43353130E-01;
COFLAM[11] = 1.51043449E-02;
COFLAM[12] = 1.15898853E+01;
COFLAM[13] = -1.52427526E+00;
COFLAM[14] = 2.72840485E-01;
COFLAM[15] = -1.03392506E-02;
COFLAM[16] = -2.73651502E+00;
COFLAM[17] = 3.27402596E+00;
COFLAM[18] = -3.45827972E-01;
COFLAM[19] = 1.51622680E-02;
COFLAM[20] = -3.24554543E-01;
COFLAM[21] = 3.41660514E+00;
COFLAM[22] = -3.63206306E-01;
COFLAM[23] = 1.58671021E-02;
COFLAM[24] = 1.98515155E+00;
COFLAM[25] = 1.79491990E+00;
COFLAM[26] = -1.54008440E-01;
COFLAM[27] = 6.86719439E-03;
COFLAM[28] = 1.60618776E+01;
COFLAM[29] = -4.10626624E+00;
COFLAM[30] = 6.63570999E-01;
COFLAM[31] = -2.97906170E-02;
COFLAM[32] = 5.56033781E-01;
COFLAM[33] = 1.59073629E+00;
COFLAM[34] = -5.28054537E-02;
COFLAM[35] = 4.07605156E-04;
COFLAM[36] = 2.28195672E+01;
COFLAM[37] = -8.72278727E+00;
COFLAM[38] = 1.49300458E+00;
COFLAM[39] = -7.41523911E-02;
COFLAM[40] = 6.27062005E-01;
COFLAM[41] = 1.43139633E+00;
COFLAM[42] = 1.80504261E-03;
COFLAM[43] = -3.55624576E-03;
COFLAM[44] = -1.52878273E+01;
COFLAM[45] = 7.88864680E+00;
COFLAM[46] = -8.90188895E-01;
COFLAM[47] = 3.71036088E-02;
COFLAM[48] = 1.04772547E+01;
COFLAM[49] = -3.75860887E+00;
COFLAM[50] = 8.51189798E-01;
COFLAM[51] = -4.70168974E-02;
COFLAM[52] = 1.78489686E+01;
COFLAM[53] = -6.02519417E+00;
COFLAM[54] = 1.04561003E+00;
COFLAM[55] = -5.14455080E-02;
COFLAM[56] = 2.27007756E+00;
COFLAM[57] = 1.57011544E+00;
COFLAM[58] = -1.24217373E-01;
COFLAM[59] = 5.55161238E-03;
COFLAM[60] = 6.53090145E+00;
COFLAM[61] = -1.15543094E+00;
COFLAM[62] = 3.64952852E-01;
COFLAM[63] = -2.08145890E-02;
COFLAM[64] = 1.87299188E+01;
COFLAM[65] = -5.61570021E+00;
COFLAM[66] = 9.39093035E-01;
COFLAM[67] = -4.46503915E-02;
COFLAM[68] = 1.12547419E+01;
COFLAM[69] = -2.00537478E+00;
COFLAM[70] = 3.69900966E-01;
COFLAM[71] = -1.60503754E-02;
COFLAM[72] = 1.15506870E+01;
COFLAM[73] = -2.91452034E+00;
COFLAM[74] = 5.55043078E-01;
COFLAM[75] = -2.75172223E-02;
COFLAM[76] = 2.40826031E+00;
COFLAM[77] = 3.14167737E-01;
COFLAM[78] = 2.02634998E-01;
COFLAM[79] = -1.46995786E-02;
COFLAM[80] = 7.01538268E+00;
COFLAM[81] = 2.18772782E-01;
COFLAM[82] = 5.60263799E-02;
COFLAM[83] = -2.36018246E-03;
}


// Poly fits for the diffusion coefficients, dim NO*KK*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetCOFD(amrex::Real* COFD) {
COFD[0] = -1.47982876E+01;
COFD[1] = 3.15955654E+00;
COFD[2] = -1.97590757E-01;
COFD[3] = 8.64692156E-03;
COFD[4] = -1.75702129E+01;
COFD[5] = 4.11812310E+00;
COFD[6] = -3.17419841E-01;
COFD[7] = 1.36506623E-02;
COFD[8] = -1.50276446E+01;
COFD[9] = 3.25515933E+00;
COFD[10] = -2.09710110E-01;
COFD[11] = 9.15941830E-03;
COFD[12] = -1.13275951E+01;
COFD[13] = 2.31195095E+00;
COFD[14] = -8.63988037E-02;
COFD[15] = 3.77573452E-03;
COFD[16] = -1.57435909E+01;
COFD[17] = 3.51447210E+00;
COFD[18] = -2.42579007E-01;
COFD[19] = 1.05506318E-02;
COFD[20] = -1.40310533E+01;
COFD[21] = 3.55837688E+00;
COFD[22] = -2.47785790E-01;
COFD[23] = 1.07555332E-02;
COFD[24] = -1.38878520E+01;
COFD[25] = 2.98558426E+00;
COFD[26] = -1.75507216E-01;
COFD[27] = 7.71173691E-03;
COFD[28] = -1.39075643E+01;
COFD[29] = 2.98558426E+00;
COFD[30] = -1.75507216E-01;
COFD[31] = 7.71173691E-03;
COFD[32] = -1.50350894E+01;
COFD[33] = 3.25515933E+00;
COFD[34] = -2.09710110E-01;
COFD[35] = 9.15941830E-03;
COFD[36] = -2.08254962E+01;
COFD[37] = 5.42470175E+00;
COFD[38] = -4.69700438E-01;
COFD[39] = 1.95706912E-02;
COFD[40] = -1.50421956E+01;
COFD[41] = 3.25515933E+00;
COFD[42] = -2.09710110E-01;
COFD[43] = 9.15941830E-03;
COFD[44] = -1.71066434E+01;
COFD[45] = 3.98796503E+00;
COFD[46] = -3.02241183E-01;
COFD[47] = 1.30631251E-02;
COFD[48] = -2.01216643E+01;
COFD[49] = 5.18882241E+00;
COFD[50] = -4.45812015E-01;
COFD[51] = 1.87993555E-02;
COFD[52] = -1.52998750E+01;
COFD[53] = 3.35682263E+00;
COFD[54] = -2.22792085E-01;
COFD[55] = 9.72146426E-03;
COFD[56] = -1.37228305E+01;
COFD[57] = 2.87846903E+00;
COFD[58] = -1.61681103E-01;
COFD[59] = 7.11635115E-03;
COFD[60] = -1.40798616E+01;
COFD[61] = 2.87846903E+00;
COFD[62] = -1.61681103E-01;
COFD[63] = 7.11635115E-03;
COFD[64] = -1.38566995E+01;
COFD[65] = 2.98558426E+00;
COFD[66] = -1.75507216E-01;
COFD[67] = 7.71173691E-03;
COFD[68] = -1.38352830E+01;
COFD[69] = 2.98558426E+00;
COFD[70] = -1.75507216E-01;
COFD[71] = 7.71173691E-03;
COFD[72] = -1.47808195E+01;
COFD[73] = 3.15955654E+00;
COFD[74] = -1.97590757E-01;
COFD[75] = 8.64692156E-03;
COFD[76] = -1.53076751E+01;
COFD[77] = 3.35682263E+00;
COFD[78] = -2.22792085E-01;
COFD[79] = 9.72146426E-03;
COFD[80] = -1.02018109E+01;
COFD[81] = 1.83188320E+00;
COFD[82] = -2.40547456E-02;
COFD[83] = 1.08399898E-03;
COFD[84] = -1.75702129E+01;
COFD[85] = 4.11812310E+00;
COFD[86] = -3.17419841E-01;
COFD[87] = 1.36506623E-02;
COFD[88] = -2.08859262E+01;
COFD[89] = 5.22225696E+00;
COFD[90] = -4.49385414E-01;
COFD[91] = 1.89239902E-02;
COFD[92] = -1.79444565E+01;
COFD[93] = 4.26597527E+00;
COFD[94] = -3.36095471E-01;
COFD[95] = 1.44408266E-02;
COFD[96] = -1.34670362E+01;
COFD[97] = 3.10020265E+00;
COFD[98] = -1.90167726E-01;
COFD[99] = 8.33742061E-03;
COFD[100] = -1.89025028E+01;
COFD[101] = 4.60336004E+00;
COFD[102] = -3.77823960E-01;
COFD[103] = 1.61693832E-02;
COFD[104] = -1.71513900E+01;
COFD[105] = 4.66021968E+00;
COFD[106] = -3.84258776E-01;
COFD[107] = 1.64101774E-02;
COFD[108] = -1.65968327E+01;
COFD[109] = 3.94095281E+00;
COFD[110] = -2.96521976E-01;
COFD[111] = 1.28307737E-02;
COFD[112] = -1.66190536E+01;
COFD[113] = 3.94095281E+00;
COFD[114] = -2.96521976E-01;
COFD[115] = 1.28307737E-02;
COFD[116] = -1.79533775E+01;
COFD[117] = 4.26597527E+00;
COFD[118] = -3.36095471E-01;
COFD[119] = 1.44408266E-02;
COFD[120] = -2.15410361E+01;
COFD[121] = 5.43952373E+00;
COFD[122] = -4.48382016E-01;
COFD[123] = 1.77466836E-02;
COFD[124] = -1.79619175E+01;
COFD[125] = 4.26597527E+00;
COFD[126] = -3.36095471E-01;
COFD[127] = 1.44408266E-02;
COFD[128] = -2.02885605E+01;
COFD[129] = 5.04847590E+00;
COFD[130] = -4.29657305E-01;
COFD[131] = 1.81798477E-02;
COFD[132] = -2.16456034E+01;
COFD[133] = 5.51804062E+00;
COFD[134] = -4.65710013E-01;
COFD[135] = 1.87719278E-02;
COFD[136] = -1.82848788E+01;
COFD[137] = 4.39129454E+00;
COFD[138] = -3.51868537E-01;
COFD[139] = 1.51061900E-02;
COFD[140] = -1.63140351E+01;
COFD[141] = 3.79604160E+00;
COFD[142] = -2.78251701E-01;
COFD[143] = 1.20604727E-02;
COFD[144] = -1.66988349E+01;
COFD[145] = 3.79604160E+00;
COFD[146] = -2.78251701E-01;
COFD[147] = 1.20604727E-02;
COFD[148] = -1.65667444E+01;
COFD[149] = 3.94095281E+00;
COFD[150] = -2.96521976E-01;
COFD[151] = 1.28307737E-02;
COFD[152] = -1.65427229E+01;
COFD[153] = 3.94095281E+00;
COFD[154] = -2.96521976E-01;
COFD[155] = 1.28307737E-02;
COFD[156] = -1.75495068E+01;
COFD[157] = 4.11812310E+00;
COFD[158] = -3.17419841E-01;
COFD[159] = 1.36506623E-02;
COFD[160] = -1.82941981E+01;
COFD[161] = 4.39129454E+00;
COFD[162] = -3.51868537E-01;
COFD[163] = 1.51061900E-02;
COFD[164] = -1.09443671E+01;
COFD[165] = 2.05650507E+00;
COFD[166] = -5.22299948E-02;
COFD[167] = 2.24784547E-03;
COFD[168] = -1.50276446E+01;
COFD[169] = 3.25515933E+00;
COFD[170] = -2.09710110E-01;
COFD[171] = 9.15941830E-03;
COFD[172] = -1.79444565E+01;
COFD[173] = 4.26597527E+00;
COFD[174] = -3.36095471E-01;
COFD[175] = 1.44408266E-02;
COFD[176] = -1.53110597E+01;
COFD[177] = 3.37317428E+00;
COFD[178] = -2.24900439E-01;
COFD[179] = 9.81228151E-03;
COFD[180] = -1.15797897E+01;
COFD[181] = 2.43235504E+00;
COFD[182] = -1.02890179E-01;
COFD[183] = 4.52903603E-03;
COFD[184] = -1.59592241E+01;
COFD[185] = 3.60186887E+00;
COFD[186] = -2.53302622E-01;
COFD[187] = 1.09893496E-02;
COFD[188] = -1.43713019E+01;
COFD[189] = 3.70920439E+00;
COFD[190] = -2.67274113E-01;
COFD[191] = 1.15967481E-02;
COFD[192] = -1.40864784E+01;
COFD[193] = 3.07458927E+00;
COFD[194] = -1.86899591E-01;
COFD[195] = 8.19829781E-03;
COFD[196] = -1.41066358E+01;
COFD[197] = 3.07458927E+00;
COFD[198] = -1.86899591E-01;
COFD[199] = 8.19829781E-03;
COFD[200] = -1.53187536E+01;
COFD[201] = 3.37317428E+00;
COFD[202] = -2.24900439E-01;
COFD[203] = 9.81228151E-03;
COFD[204] = -2.10639926E+01;
COFD[205] = 5.50980703E+00;
COFD[206] = -4.78335492E-01;
COFD[207] = 1.98515434E-02;
COFD[208] = -1.53261011E+01;
COFD[209] = 3.37317428E+00;
COFD[210] = -2.24900439E-01;
COFD[211] = 9.81228151E-03;
COFD[212] = -1.72911708E+01;
COFD[213] = 4.05765579E+00;
COFD[214] = -3.10089937E-01;
COFD[215] = 1.33539502E-02;
COFD[216] = -2.03415324E+01;
COFD[217] = 5.26756995E+00;
COFD[218] = -4.53781304E-01;
COFD[219] = 1.90557983E-02;
COFD[220] = -1.55569327E+01;
COFD[221] = 3.46330464E+00;
COFD[222] = -2.36324756E-01;
COFD[223] = 1.02958912E-02;
COFD[224] = -1.39241371E+01;
COFD[225] = 2.96800700E+00;
COFD[226] = -1.73235360E-01;
COFD[227] = 7.61377726E-03;
COFD[228] = -1.42899553E+01;
COFD[229] = 2.96800700E+00;
COFD[230] = -1.73235360E-01;
COFD[231] = 7.61377726E-03;
COFD[232] = -1.40544991E+01;
COFD[233] = 3.07458927E+00;
COFD[234] = -1.86899591E-01;
COFD[235] = 8.19829781E-03;
COFD[236] = -1.40326185E+01;
COFD[237] = 3.07458927E+00;
COFD[238] = -1.86899591E-01;
COFD[239] = 8.19829781E-03;
COFD[240] = -1.50096252E+01;
COFD[241] = 3.25515933E+00;
COFD[242] = -2.09710110E-01;
COFD[243] = 9.15941830E-03;
COFD[244] = -1.55649898E+01;
COFD[245] = 3.46330464E+00;
COFD[246] = -2.36324756E-01;
COFD[247] = 1.02958912E-02;
COFD[248] = -1.03310320E+01;
COFD[249] = 1.90522472E+00;
COFD[250] = -3.44812795E-02;
COFD[251] = 1.57640018E-03;
COFD[252] = -1.13275951E+01;
COFD[253] = 2.31195095E+00;
COFD[254] = -8.63988037E-02;
COFD[255] = 3.77573452E-03;
COFD[256] = -1.34670362E+01;
COFD[257] = 3.10020265E+00;
COFD[258] = -1.90167726E-01;
COFD[259] = 8.33742061E-03;
COFD[260] = -1.15797897E+01;
COFD[261] = 2.43235504E+00;
COFD[262] = -1.02890179E-01;
COFD[263] = 4.52903603E-03;
COFD[264] = -1.02395385E+01;
COFD[265] = 2.15403244E+00;
COFD[266] = -6.97480266E-02;
COFD[267] = 3.23666871E-03;
COFD[268] = -1.20638768E+01;
COFD[269] = 2.63303536E+00;
COFD[270] = -1.29792632E-01;
COFD[271] = 5.73363738E-03;
COFD[272] = -1.11808845E+01;
COFD[273] = 2.66936727E+00;
COFD[274] = -1.34411514E-01;
COFD[275] = 5.92957488E-03;
COFD[276] = -1.06250314E+01;
COFD[277] = 2.15849701E+00;
COFD[278] = -6.53886401E-02;
COFD[279] = 2.81453370E-03;
COFD[280] = -1.06283588E+01;
COFD[281] = 2.15849701E+00;
COFD[282] = -6.53886401E-02;
COFD[283] = 2.81453370E-03;
COFD[284] = -1.15806955E+01;
COFD[285] = 2.43235504E+00;
COFD[286] = -1.02890179E-01;
COFD[287] = 4.52903603E-03;
COFD[288] = -1.68759075E+01;
COFD[289] = 4.49460341E+00;
COFD[290] = -3.64766179E-01;
COFD[291] = 1.56457173E-02;
COFD[292] = -1.15815492E+01;
COFD[293] = 2.43235504E+00;
COFD[294] = -1.02890179E-01;
COFD[295] = 4.52903603E-03;
COFD[296] = -1.29893782E+01;
COFD[297] = 2.95916559E+00;
COFD[298] = -1.72097284E-01;
COFD[299] = 7.56491415E-03;
COFD[300] = -1.57372121E+01;
COFD[301] = 4.04361841E+00;
COFD[302] = -3.08463634E-01;
COFD[303] = 1.32914751E-02;
COFD[304] = -1.18093909E+01;
COFD[305] = 2.51943893E+00;
COFD[306] = -1.14751101E-01;
COFD[307] = 5.06824011E-03;
COFD[308] = -1.06289810E+01;
COFD[309] = 2.09311029E+00;
COFD[310] = -5.66715295E-02;
COFD[311] = 2.42607686E-03;
COFD[312] = -1.08173203E+01;
COFD[313] = 2.09311029E+00;
COFD[314] = -5.66715295E-02;
COFD[315] = 2.42607686E-03;
COFD[316] = -1.05895271E+01;
COFD[317] = 2.15849701E+00;
COFD[318] = -6.53886401E-02;
COFD[319] = 2.81453370E-03;
COFD[320] = -1.05857898E+01;
COFD[321] = 2.15849701E+00;
COFD[322] = -6.53886401E-02;
COFD[323] = 2.81453370E-03;
COFD[324] = -1.13253618E+01;
COFD[325] = 2.31195095E+00;
COFD[326] = -8.63988037E-02;
COFD[327] = 3.77573452E-03;
COFD[328] = -1.18103524E+01;
COFD[329] = 2.51943893E+00;
COFD[330] = -1.14751101E-01;
COFD[331] = 5.06824011E-03;
COFD[332] = -9.86430173E+00;
COFD[333] = 2.05348746E+00;
COFD[334] = -5.90289007E-02;
COFD[335] = 2.89596157E-03;
COFD[336] = -1.57435909E+01;
COFD[337] = 3.51447210E+00;
COFD[338] = -2.42579007E-01;
COFD[339] = 1.05506318E-02;
COFD[340] = -1.89025028E+01;
COFD[341] = 4.60336004E+00;
COFD[342] = -3.77823960E-01;
COFD[343] = 1.61693832E-02;
COFD[344] = -1.59592241E+01;
COFD[345] = 3.60186887E+00;
COFD[346] = -2.53302622E-01;
COFD[347] = 1.09893496E-02;
COFD[348] = -1.20638768E+01;
COFD[349] = 2.63303536E+00;
COFD[350] = -1.29792632E-01;
COFD[351] = 5.73363738E-03;
COFD[352] = -1.68944987E+01;
COFD[353] = 3.94346012E+00;
COFD[354] = -2.96835271E-01;
COFD[355] = 1.28438696E-02;
COFD[356] = -1.51208285E+01;
COFD[357] = 3.99904647E+00;
COFD[358] = -3.03517220E-01;
COFD[359] = 1.31117363E-02;
COFD[360] = -1.47082519E+01;
COFD[361] = 3.30683499E+00;
COFD[362] = -2.16378602E-01;
COFD[363] = 9.44670561E-03;
COFD[364] = -1.47298733E+01;
COFD[365] = 3.30683499E+00;
COFD[366] = -2.16378602E-01;
COFD[367] = 9.44670561E-03;
COFD[368] = -1.59677756E+01;
COFD[369] = 3.60186887E+00;
COFD[370] = -2.53302622E-01;
COFD[371] = 1.09893496E-02;
COFD[372] = -2.10785351E+01;
COFD[373] = 5.51573149E+00;
COFD[374] = -4.78177665E-01;
COFD[375] = 1.98082796E-02;
COFD[376] = -1.59759560E+01;
COFD[377] = 3.60186887E+00;
COFD[378] = -2.53302622E-01;
COFD[379] = 1.09893496E-02;
COFD[380] = -1.82537514E+01;
COFD[381] = 4.40109518E+00;
COFD[382] = -3.53098376E-01;
COFD[383] = 1.51579416E-02;
COFD[384] = -2.06897888E+01;
COFD[385] = 5.37633319E+00;
COFD[386] = -4.64627046E-01;
COFD[387] = 1.93973275E-02;
COFD[388] = -1.63348860E+01;
COFD[389] = 3.74467521E+00;
COFD[390] = -2.71821631E-01;
COFD[391] = 1.17915267E-02;
COFD[392] = -1.44917001E+01;
COFD[393] = 3.17964349E+00;
COFD[394] = -2.00113588E-01;
COFD[395] = 8.75259314E-03;
COFD[396] = -1.48786472E+01;
COFD[397] = 3.17964349E+00;
COFD[398] = -2.00113588E-01;
COFD[399] = 8.75259314E-03;
COFD[400] = -1.46756187E+01;
COFD[401] = 3.30683499E+00;
COFD[402] = -2.16378602E-01;
COFD[403] = 9.44670561E-03;
COFD[404] = -1.46522174E+01;
COFD[405] = 3.30683499E+00;
COFD[406] = -2.16378602E-01;
COFD[407] = 9.44670561E-03;
COFD[408] = -1.57236886E+01;
COFD[409] = 3.51447210E+00;
COFD[410] = -2.42579007E-01;
COFD[411] = 1.05506318E-02;
COFD[412] = -1.63438260E+01;
COFD[413] = 3.74467521E+00;
COFD[414] = -2.71821631E-01;
COFD[415] = 1.17915267E-02;
COFD[416] = -1.08140217E+01;
COFD[417] = 2.11737538E+00;
COFD[418] = -6.46167749E-02;
COFD[419] = 2.99827695E-03;
COFD[420] = -1.40310533E+01;
COFD[421] = 3.55837688E+00;
COFD[422] = -2.47785790E-01;
COFD[423] = 1.07555332E-02;
COFD[424] = -1.71513900E+01;
COFD[425] = 4.66021968E+00;
COFD[426] = -3.84258776E-01;
COFD[427] = 1.64101774E-02;
COFD[428] = -1.43713019E+01;
COFD[429] = 3.70920439E+00;
COFD[430] = -2.67274113E-01;
COFD[431] = 1.15967481E-02;
COFD[432] = -1.11808845E+01;
COFD[433] = 2.66936727E+00;
COFD[434] = -1.34411514E-01;
COFD[435] = 5.92957488E-03;
COFD[436] = -1.51208285E+01;
COFD[437] = 3.99904647E+00;
COFD[438] = -3.03517220E-01;
COFD[439] = 1.31117363E-02;
COFD[440] = -1.43693219E+01;
COFD[441] = 4.03992999E+00;
COFD[442] = -3.08044800E-01;
COFD[443] = 1.32757775E-02;
COFD[444] = -1.31860264E+01;
COFD[445] = 3.38003453E+00;
COFD[446] = -2.25783856E-01;
COFD[447] = 9.85028660E-03;
COFD[448] = -1.31877859E+01;
COFD[449] = 3.38003453E+00;
COFD[450] = -2.25783856E-01;
COFD[451] = 9.85028660E-03;
COFD[452] = -1.43717684E+01;
COFD[453] = 3.70920439E+00;
COFD[454] = -2.67274113E-01;
COFD[455] = 1.15967481E-02;
COFD[456] = -1.93611201E+01;
COFD[457] = 5.51579726E+00;
COFD[458] = -4.76061961E-01;
COFD[459] = 1.96329391E-02;
COFD[460] = -1.43722077E+01;
COFD[461] = 3.70920439E+00;
COFD[462] = -2.67274113E-01;
COFD[463] = 1.15967481E-02;
COFD[464] = -1.65508158E+01;
COFD[465] = 4.49254647E+00;
COFD[466] = -3.64510794E-01;
COFD[467] = 1.56350937E-02;
COFD[468] = -1.91542667E+01;
COFD[469] = 5.43498761E+00;
COFD[470] = -4.70802929E-01;
COFD[471] = 1.96094696E-02;
COFD[472] = -1.46869677E+01;
COFD[473] = 3.82169011E+00;
COFD[474] = -2.81495992E-01;
COFD[475] = 1.21977446E-02;
COFD[476] = -1.30271430E+01;
COFD[477] = 3.24041848E+00;
COFD[478] = -2.07804876E-01;
COFD[479] = 9.07722400E-03;
COFD[480] = -1.32235721E+01;
COFD[481] = 3.24041848E+00;
COFD[482] = -2.07804876E-01;
COFD[483] = 9.07722400E-03;
COFD[484] = -1.31439640E+01;
COFD[485] = 3.38003453E+00;
COFD[486] = -2.25783856E-01;
COFD[487] = 9.85028660E-03;
COFD[488] = -1.31419812E+01;
COFD[489] = 3.38003453E+00;
COFD[490] = -2.25783856E-01;
COFD[491] = 9.85028660E-03;
COFD[492] = -1.40298991E+01;
COFD[493] = 3.55837688E+00;
COFD[494] = -2.47785790E-01;
COFD[495] = 1.07555332E-02;
COFD[496] = -1.46874634E+01;
COFD[497] = 3.82169011E+00;
COFD[498] = -2.81495992E-01;
COFD[499] = 1.21977446E-02;
COFD[500] = -9.71339666E+00;
COFD[501] = 2.17561180E+00;
COFD[502] = -7.28270090E-02;
COFD[503] = 3.38302182E-03;
COFD[504] = -1.38878520E+01;
COFD[505] = 2.98558426E+00;
COFD[506] = -1.75507216E-01;
COFD[507] = 7.71173691E-03;
COFD[508] = -1.65968327E+01;
COFD[509] = 3.94095281E+00;
COFD[510] = -2.96521976E-01;
COFD[511] = 1.28307737E-02;
COFD[512] = -1.40864784E+01;
COFD[513] = 3.07458927E+00;
COFD[514] = -1.86899591E-01;
COFD[515] = 8.19829781E-03;
COFD[516] = -1.06250314E+01;
COFD[517] = 2.15849701E+00;
COFD[518] = -6.53886401E-02;
COFD[519] = 2.81453370E-03;
COFD[520] = -1.47082519E+01;
COFD[521] = 3.30683499E+00;
COFD[522] = -2.16378602E-01;
COFD[523] = 9.44670561E-03;
COFD[524] = -1.31860264E+01;
COFD[525] = 3.38003453E+00;
COFD[526] = -2.25783856E-01;
COFD[527] = 9.85028660E-03;
COFD[528] = -1.29877255E+01;
COFD[529] = 2.80841511E+00;
COFD[530] = -1.52629888E-01;
COFD[531] = 6.72604927E-03;
COFD[532] = -1.30027669E+01;
COFD[533] = 2.80841511E+00;
COFD[534] = -1.52629888E-01;
COFD[535] = 6.72604927E-03;
COFD[536] = -1.40915944E+01;
COFD[537] = 3.07458927E+00;
COFD[538] = -1.86899591E-01;
COFD[539] = 8.19829781E-03;
COFD[540] = -1.91096700E+01;
COFD[541] = 5.02608697E+00;
COFD[542] = -4.26959993E-01;
COFD[543] = 1.80709910E-02;
COFD[544] = -1.40964555E+01;
COFD[545] = 3.07458927E+00;
COFD[546] = -1.86899591E-01;
COFD[547] = 8.19829781E-03;
COFD[548] = -1.59831087E+01;
COFD[549] = 3.75069346E+00;
COFD[550] = -2.72581274E-01;
COFD[551] = 1.18235631E-02;
COFD[552] = -1.86465339E+01;
COFD[553] = 4.83755761E+00;
COFD[554] = -4.05511784E-01;
COFD[555] = 1.72611905E-02;
COFD[556] = -1.42830930E+01;
COFD[557] = 3.14420863E+00;
COFD[558] = -1.95659168E-01;
COFD[559] = 8.56580235E-03;
COFD[560] = -1.28579831E+01;
COFD[561] = 2.69967657E+00;
COFD[562] = -1.38362256E-01;
COFD[563] = 6.10143187E-03;
COFD[564] = -1.31782298E+01;
COFD[565] = 2.69967657E+00;
COFD[566] = -1.38362256E-01;
COFD[567] = 6.10143187E-03;
COFD[568] = -1.29514018E+01;
COFD[569] = 2.80841511E+00;
COFD[570] = -1.52629888E-01;
COFD[571] = 6.72604927E-03;
COFD[572] = -1.29349063E+01;
COFD[573] = 2.80841511E+00;
COFD[574] = -1.52629888E-01;
COFD[575] = 6.72604927E-03;
COFD[576] = -1.38756380E+01;
COFD[577] = 2.98558426E+00;
COFD[578] = -1.75507216E-01;
COFD[579] = 7.71173691E-03;
COFD[580] = -1.42884781E+01;
COFD[581] = 3.14420863E+00;
COFD[582] = -1.95659168E-01;
COFD[583] = 8.56580235E-03;
COFD[584] = -9.70779235E+00;
COFD[585] = 1.77912272E+00;
COFD[586] = -1.67349571E-02;
COFD[587] = 7.45446845E-04;
COFD[588] = -1.39075643E+01;
COFD[589] = 2.98558426E+00;
COFD[590] = -1.75507216E-01;
COFD[591] = 7.71173691E-03;
COFD[592] = -1.66190536E+01;
COFD[593] = 3.94095281E+00;
COFD[594] = -2.96521976E-01;
COFD[595] = 1.28307737E-02;
COFD[596] = -1.41066358E+01;
COFD[597] = 3.07458927E+00;
COFD[598] = -1.86899591E-01;
COFD[599] = 8.19829781E-03;
COFD[600] = -1.06283588E+01;
COFD[601] = 2.15849701E+00;
COFD[602] = -6.53886401E-02;
COFD[603] = 2.81453370E-03;
COFD[604] = -1.47298733E+01;
COFD[605] = 3.30683499E+00;
COFD[606] = -2.16378602E-01;
COFD[607] = 9.44670561E-03;
COFD[608] = -1.31877859E+01;
COFD[609] = 3.38003453E+00;
COFD[610] = -2.25783856E-01;
COFD[611] = 9.85028660E-03;
COFD[612] = -1.30027669E+01;
COFD[613] = 2.80841511E+00;
COFD[614] = -1.52629888E-01;
COFD[615] = 6.72604927E-03;
COFD[616] = -1.30182749E+01;
COFD[617] = 2.80841511E+00;
COFD[618] = -1.52629888E-01;
COFD[619] = 6.72604927E-03;
COFD[620] = -1.41119635E+01;
COFD[621] = 3.07458927E+00;
COFD[622] = -1.86899591E-01;
COFD[623] = 8.19829781E-03;
COFD[624] = -1.91256173E+01;
COFD[625] = 5.02608697E+00;
COFD[626] = -4.26959993E-01;
COFD[627] = 1.80709910E-02;
COFD[628] = -1.41170278E+01;
COFD[629] = 3.07458927E+00;
COFD[630] = -1.86899591E-01;
COFD[631] = 8.19829781E-03;
COFD[632] = -1.60055950E+01;
COFD[633] = 3.75069346E+00;
COFD[634] = -2.72581274E-01;
COFD[635] = 1.18235631E-02;
COFD[636] = -1.86620526E+01;
COFD[637] = 4.83755761E+00;
COFD[638] = -4.05511784E-01;
COFD[639] = 1.72611905E-02;
COFD[640] = -1.43030353E+01;
COFD[641] = 3.14420863E+00;
COFD[642] = -1.95659168E-01;
COFD[643] = 8.56580235E-03;
COFD[644] = -1.28720118E+01;
COFD[645] = 2.69967657E+00;
COFD[646] = -1.38362256E-01;
COFD[647] = 6.10143187E-03;
COFD[648] = -1.31977079E+01;
COFD[649] = 2.69967657E+00;
COFD[650] = -1.38362256E-01;
COFD[651] = 6.10143187E-03;
COFD[652] = -1.29664546E+01;
COFD[653] = 2.80841511E+00;
COFD[654] = -1.52629888E-01;
COFD[655] = 6.72604927E-03;
COFD[656] = -1.29494634E+01;
COFD[657] = 2.80841511E+00;
COFD[658] = -1.52629888E-01;
COFD[659] = 6.72604927E-03;
COFD[660] = -1.38948654E+01;
COFD[661] = 2.98558426E+00;
COFD[662] = -1.75507216E-01;
COFD[663] = 7.71173691E-03;
COFD[664] = -1.43086408E+01;
COFD[665] = 3.14420863E+00;
COFD[666] = -1.95659168E-01;
COFD[667] = 8.56580235E-03;
COFD[668] = -9.71375815E+00;
COFD[669] = 1.77912272E+00;
COFD[670] = -1.67349571E-02;
COFD[671] = 7.45446845E-04;
COFD[672] = -1.50350894E+01;
COFD[673] = 3.25515933E+00;
COFD[674] = -2.09710110E-01;
COFD[675] = 9.15941830E-03;
COFD[676] = -1.79533775E+01;
COFD[677] = 4.26597527E+00;
COFD[678] = -3.36095471E-01;
COFD[679] = 1.44408266E-02;
COFD[680] = -1.53187536E+01;
COFD[681] = 3.37317428E+00;
COFD[682] = -2.24900439E-01;
COFD[683] = 9.81228151E-03;
COFD[684] = -1.15806955E+01;
COFD[685] = 2.43235504E+00;
COFD[686] = -1.02890179E-01;
COFD[687] = 4.52903603E-03;
COFD[688] = -1.59677756E+01;
COFD[689] = 3.60186887E+00;
COFD[690] = -2.53302622E-01;
COFD[691] = 1.09893496E-02;
COFD[692] = -1.43717684E+01;
COFD[693] = 3.70920439E+00;
COFD[694] = -2.67274113E-01;
COFD[695] = 1.15967481E-02;
COFD[696] = -1.40915944E+01;
COFD[697] = 3.07458927E+00;
COFD[698] = -1.86899591E-01;
COFD[699] = 8.19829781E-03;
COFD[700] = -1.41119635E+01;
COFD[701] = 3.07458927E+00;
COFD[702] = -1.86899591E-01;
COFD[703] = 8.19829781E-03;
COFD[704] = -1.53265677E+01;
COFD[705] = 3.37317428E+00;
COFD[706] = -2.24900439E-01;
COFD[707] = 9.81228151E-03;
COFD[708] = -2.04177394E+01;
COFD[709] = 5.31457079E+00;
COFD[710] = -4.58216496E-01;
COFD[711] = 1.91825910E-02;
COFD[712] = -1.53340319E+01;
COFD[713] = 3.37317428E+00;
COFD[714] = -2.24900439E-01;
COFD[715] = 9.81228151E-03;
COFD[716] = -1.73002589E+01;
COFD[717] = 4.05765579E+00;
COFD[718] = -3.10089937E-01;
COFD[719] = 1.33539502E-02;
COFD[720] = -2.00503768E+01;
COFD[721] = 5.17974128E+00;
COFD[722] = -4.44844179E-01;
COFD[723] = 1.87657530E-02;
COFD[724] = -1.55645055E+01;
COFD[725] = 3.46330464E+00;
COFD[726] = -2.36324756E-01;
COFD[727] = 1.02958912E-02;
COFD[728] = -1.39288081E+01;
COFD[729] = 2.96800700E+00;
COFD[730] = -1.73235360E-01;
COFD[731] = 7.61377726E-03;
COFD[732] = -1.42972711E+01;
COFD[733] = 2.96800700E+00;
COFD[734] = -1.73235360E-01;
COFD[735] = 7.61377726E-03;
COFD[736] = -1.40596203E+01;
COFD[737] = 3.07458927E+00;
COFD[738] = -1.86899591E-01;
COFD[739] = 8.19829781E-03;
COFD[740] = -1.40375193E+01;
COFD[741] = 3.07458927E+00;
COFD[742] = -1.86899591E-01;
COFD[743] = 8.19829781E-03;
COFD[744] = -1.50168047E+01;
COFD[745] = 3.25515933E+00;
COFD[746] = -2.09710110E-01;
COFD[747] = 9.15941830E-03;
COFD[748] = -1.55726865E+01;
COFD[749] = 3.46330464E+00;
COFD[750] = -2.36324756E-01;
COFD[751] = 1.02958912E-02;
COFD[752] = -1.03327327E+01;
COFD[753] = 1.90522472E+00;
COFD[754] = -3.44812795E-02;
COFD[755] = 1.57640018E-03;
COFD[756] = -2.08254962E+01;
COFD[757] = 5.42470175E+00;
COFD[758] = -4.69700438E-01;
COFD[759] = 1.95706912E-02;
COFD[760] = -2.15410361E+01;
COFD[761] = 5.43952373E+00;
COFD[762] = -4.48382016E-01;
COFD[763] = 1.77466836E-02;
COFD[764] = -2.10639926E+01;
COFD[765] = 5.50980703E+00;
COFD[766] = -4.78335492E-01;
COFD[767] = 1.98515434E-02;
COFD[768] = -1.68759075E+01;
COFD[769] = 4.49460341E+00;
COFD[770] = -3.64766179E-01;
COFD[771] = 1.56457173E-02;
COFD[772] = -2.10785351E+01;
COFD[773] = 5.51573149E+00;
COFD[774] = -4.78177665E-01;
COFD[775] = 1.98082796E-02;
COFD[776] = -1.93611201E+01;
COFD[777] = 5.51579726E+00;
COFD[778] = -4.76061961E-01;
COFD[779] = 1.96329391E-02;
COFD[780] = -1.91096700E+01;
COFD[781] = 5.02608697E+00;
COFD[782] = -4.26959993E-01;
COFD[783] = 1.80709910E-02;
COFD[784] = -1.91256173E+01;
COFD[785] = 5.02608697E+00;
COFD[786] = -4.26959993E-01;
COFD[787] = 1.80709910E-02;
COFD[788] = -2.04177394E+01;
COFD[789] = 5.31457079E+00;
COFD[790] = -4.58216496E-01;
COFD[791] = 1.91825910E-02;
COFD[792] = -1.31492509E+01;
COFD[793] = 1.48004045E+00;
COFD[794] = 1.60499956E-01;
COFD[795] = -1.19765871E-02;
COFD[796] = -2.04229988E+01;
COFD[797] = 5.31457079E+00;
COFD[798] = -4.58216496E-01;
COFD[799] = 1.91825910E-02;
COFD[800] = -2.15114212E+01;
COFD[801] = 5.52600852E+00;
COFD[802] = -4.65986839E-01;
COFD[803] = 1.87555540E-02;
COFD[804] = -1.58442908E+01;
COFD[805] = 2.76891493E+00;
COFD[806] = -3.36983602E-02;
COFD[807] = -2.69717520E-03;
COFD[808] = -2.06660778E+01;
COFD[809] = 5.39130019E+00;
COFD[810] = -4.66147313E-01;
COFD[811] = 1.94468738E-02;
COFD[812] = -1.89148097E+01;
COFD[813] = 4.90944038E+00;
COFD[814] = -4.13866957E-01;
COFD[815] = 1.75844447E-02;
COFD[816] = -1.92494143E+01;
COFD[817] = 4.90944038E+00;
COFD[818] = -4.13866957E-01;
COFD[819] = 1.75844447E-02;
COFD[820] = -2.08861543E+01;
COFD[821] = 5.52609835E+00;
COFD[822] = -4.73147375E-01;
COFD[823] = 1.93414815E-02;
COFD[824] = -1.90549084E+01;
COFD[825] = 5.02608697E+00;
COFD[826] = -4.26959993E-01;
COFD[827] = 1.80709910E-02;
COFD[828] = -2.08123331E+01;
COFD[829] = 5.42470175E+00;
COFD[830] = -4.69700438E-01;
COFD[831] = 1.95706912E-02;
COFD[832] = -2.06718947E+01;
COFD[833] = 5.39130019E+00;
COFD[834] = -4.66147313E-01;
COFD[835] = 1.94468738E-02;
COFD[836] = -1.21950641E+01;
COFD[837] = 2.72222246E+00;
COFD[838] = -1.41335602E-01;
COFD[839] = 6.23222872E-03;
COFD[840] = -1.50421956E+01;
COFD[841] = 3.25515933E+00;
COFD[842] = -2.09710110E-01;
COFD[843] = 9.15941830E-03;
COFD[844] = -1.79619175E+01;
COFD[845] = 4.26597527E+00;
COFD[846] = -3.36095471E-01;
COFD[847] = 1.44408266E-02;
COFD[848] = -1.53261011E+01;
COFD[849] = 3.37317428E+00;
COFD[850] = -2.24900439E-01;
COFD[851] = 9.81228151E-03;
COFD[852] = -1.15815492E+01;
COFD[853] = 2.43235504E+00;
COFD[854] = -1.02890179E-01;
COFD[855] = 4.52903603E-03;
COFD[856] = -1.59759560E+01;
COFD[857] = 3.60186887E+00;
COFD[858] = -2.53302622E-01;
COFD[859] = 1.09893496E-02;
COFD[860] = -1.43722077E+01;
COFD[861] = 3.70920439E+00;
COFD[862] = -2.67274113E-01;
COFD[863] = 1.15967481E-02;
COFD[864] = -1.40964555E+01;
COFD[865] = 3.07458927E+00;
COFD[866] = -1.86899591E-01;
COFD[867] = 8.19829781E-03;
COFD[868] = -1.41170278E+01;
COFD[869] = 3.07458927E+00;
COFD[870] = -1.86899591E-01;
COFD[871] = 8.19829781E-03;
COFD[872] = -1.53340319E+01;
COFD[873] = 3.37317428E+00;
COFD[874] = -2.24900439E-01;
COFD[875] = 9.81228151E-03;
COFD[876] = -2.04229988E+01;
COFD[877] = 5.31457079E+00;
COFD[878] = -4.58216496E-01;
COFD[879] = 1.91825910E-02;
COFD[880] = -1.53416091E+01;
COFD[881] = 3.37317428E+00;
COFD[882] = -2.24900439E-01;
COFD[883] = 9.81228151E-03;
COFD[884] = -1.73089618E+01;
COFD[885] = 4.05765579E+00;
COFD[886] = -3.10089937E-01;
COFD[887] = 1.33539502E-02;
COFD[888] = -2.00554458E+01;
COFD[889] = 5.17974128E+00;
COFD[890] = -4.44844179E-01;
COFD[891] = 1.87657530E-02;
COFD[892] = -1.55717357E+01;
COFD[893] = 3.46330464E+00;
COFD[894] = -2.36324756E-01;
COFD[895] = 1.02958912E-02;
COFD[896] = -1.39332424E+01;
COFD[897] = 2.96800700E+00;
COFD[898] = -1.73235360E-01;
COFD[899] = 7.61377726E-03;
COFD[900] = -1.43042525E+01;
COFD[901] = 2.96800700E+00;
COFD[902] = -1.73235360E-01;
COFD[903] = 7.61377726E-03;
COFD[904] = -1.40644863E+01;
COFD[905] = 3.07458927E+00;
COFD[906] = -1.86899591E-01;
COFD[907] = 8.19829781E-03;
COFD[908] = -1.40421740E+01;
COFD[909] = 3.07458927E+00;
COFD[910] = -1.86899591E-01;
COFD[911] = 8.19829781E-03;
COFD[912] = -1.50236540E+01;
COFD[913] = 3.25515933E+00;
COFD[914] = -2.09710110E-01;
COFD[915] = 9.15941830E-03;
COFD[916] = -1.55800369E+01;
COFD[917] = 3.46330464E+00;
COFD[918] = -2.36324756E-01;
COFD[919] = 1.02958912E-02;
COFD[920] = -1.03343378E+01;
COFD[921] = 1.90522472E+00;
COFD[922] = -3.44812795E-02;
COFD[923] = 1.57640018E-03;
COFD[924] = -1.71066434E+01;
COFD[925] = 3.98796503E+00;
COFD[926] = -3.02241183E-01;
COFD[927] = 1.30631251E-02;
COFD[928] = -2.02885605E+01;
COFD[929] = 5.04847590E+00;
COFD[930] = -4.29657305E-01;
COFD[931] = 1.81798477E-02;
COFD[932] = -1.72911708E+01;
COFD[933] = 4.05765579E+00;
COFD[934] = -3.10089937E-01;
COFD[935] = 1.33539502E-02;
COFD[936] = -1.29893782E+01;
COFD[937] = 2.95916559E+00;
COFD[938] = -1.72097284E-01;
COFD[939] = 7.56491415E-03;
COFD[940] = -1.82537514E+01;
COFD[941] = 4.40109518E+00;
COFD[942] = -3.53098376E-01;
COFD[943] = 1.51579416E-02;
COFD[944] = -1.65508158E+01;
COFD[945] = 4.49254647E+00;
COFD[946] = -3.64510794E-01;
COFD[947] = 1.56350937E-02;
COFD[948] = -1.59831087E+01;
COFD[949] = 3.75069346E+00;
COFD[950] = -2.72581274E-01;
COFD[951] = 1.18235631E-02;
COFD[952] = -1.60055950E+01;
COFD[953] = 3.75069346E+00;
COFD[954] = -2.72581274E-01;
COFD[955] = 1.18235631E-02;
COFD[956] = -1.73002589E+01;
COFD[957] = 4.05765579E+00;
COFD[958] = -3.10089937E-01;
COFD[959] = 1.33539502E-02;
COFD[960] = -2.15114212E+01;
COFD[961] = 5.52600852E+00;
COFD[962] = -4.65986839E-01;
COFD[963] = 1.87555540E-02;
COFD[964] = -1.73089618E+01;
COFD[965] = 4.05765579E+00;
COFD[966] = -3.10089937E-01;
COFD[967] = 1.33539502E-02;
COFD[968] = -1.97167694E+01;
COFD[969] = 4.88411916E+00;
COFD[970] = -4.10940210E-01;
COFD[971] = 1.74719459E-02;
COFD[972] = -2.14488113E+01;
COFD[973] = 5.53138059E+00;
COFD[974] = -4.73114380E-01;
COFD[975] = 1.93122338E-02;
COFD[976] = -1.75856778E+01;
COFD[977] = 4.16380625E+00;
COFD[978] = -3.23194348E-01;
COFD[979] = 1.38950546E-02;
COFD[980] = -1.56135228E+01;
COFD[981] = 3.56543193E+00;
COFD[982] = -2.48622079E-01;
COFD[983] = 1.07884452E-02;
COFD[984] = -1.60080633E+01;
COFD[985] = 3.56543193E+00;
COFD[986] = -2.48622079E-01;
COFD[987] = 1.07884452E-02;
COFD[988] = -1.59514060E+01;
COFD[989] = 3.75069346E+00;
COFD[990] = -2.72581274E-01;
COFD[991] = 1.18235631E-02;
COFD[992] = -1.59271103E+01;
COFD[993] = 3.75069346E+00;
COFD[994] = -2.72581274E-01;
COFD[995] = 1.18235631E-02;
COFD[996] = -1.70855751E+01;
COFD[997] = 3.98796503E+00;
COFD[998] = -3.02241183E-01;
COFD[999] = 1.30631251E-02;
COFD[1000] = -1.75951686E+01;
COFD[1001] = 4.16380625E+00;
COFD[1002] = -3.23194348E-01;
COFD[1003] = 1.38950546E-02;
COFD[1004] = -1.11259915E+01;
COFD[1005] = 2.19577467E+00;
COFD[1006] = -7.36533590E-02;
COFD[1007] = 3.33031927E-03;
COFD[1008] = -2.01216643E+01;
COFD[1009] = 5.18882241E+00;
COFD[1010] = -4.45812015E-01;
COFD[1011] = 1.87993555E-02;
COFD[1012] = -2.16456034E+01;
COFD[1013] = 5.51804062E+00;
COFD[1014] = -4.65710013E-01;
COFD[1015] = 1.87719278E-02;
COFD[1016] = -2.03415324E+01;
COFD[1017] = 5.26756995E+00;
COFD[1018] = -4.53781304E-01;
COFD[1019] = 1.90557983E-02;
COFD[1020] = -1.57372121E+01;
COFD[1021] = 4.04361841E+00;
COFD[1022] = -3.08463634E-01;
COFD[1023] = 1.32914751E-02;
COFD[1024] = -2.06897888E+01;
COFD[1025] = 5.37633319E+00;
COFD[1026] = -4.64627046E-01;
COFD[1027] = 1.93973275E-02;
COFD[1028] = -1.91542667E+01;
COFD[1029] = 5.43498761E+00;
COFD[1030] = -4.70802929E-01;
COFD[1031] = 1.96094696E-02;
COFD[1032] = -1.86465339E+01;
COFD[1033] = 4.83755761E+00;
COFD[1034] = -4.05511784E-01;
COFD[1035] = 1.72611905E-02;
COFD[1036] = -1.86620526E+01;
COFD[1037] = 4.83755761E+00;
COFD[1038] = -4.05511784E-01;
COFD[1039] = 1.72611905E-02;
COFD[1040] = -2.00503768E+01;
COFD[1041] = 5.17974128E+00;
COFD[1042] = -4.44844179E-01;
COFD[1043] = 1.87657530E-02;
COFD[1044] = -1.58442908E+01;
COFD[1045] = 2.76891493E+00;
COFD[1046] = -3.36983602E-02;
COFD[1047] = -2.69717520E-03;
COFD[1048] = -2.00554458E+01;
COFD[1049] = 5.17974128E+00;
COFD[1050] = -4.44844179E-01;
COFD[1051] = 1.87657530E-02;
COFD[1052] = -2.14488113E+01;
COFD[1053] = 5.53138059E+00;
COFD[1054] = -4.73114380E-01;
COFD[1055] = 1.93122338E-02;
COFD[1056] = -1.76942680E+01;
COFD[1057] = 3.66255451E+00;
COFD[1058] = -1.71237084E-01;
COFD[1059] = 4.01077819E-03;
COFD[1060] = -2.02839439E+01;
COFD[1061] = 5.25202191E+00;
COFD[1062] = -4.52324379E-01;
COFD[1063] = 1.90148397E-02;
COFD[1064] = -1.83539524E+01;
COFD[1065] = 4.68192371E+00;
COFD[1066] = -3.86807804E-01;
COFD[1067] = 1.65099246E-02;
COFD[1068] = -1.86755950E+01;
COFD[1069] = 4.68192371E+00;
COFD[1070] = -3.86807804E-01;
COFD[1071] = 1.65099246E-02;
COFD[1072] = -1.98750731E+01;
COFD[1073] = 5.24764202E+00;
COFD[1074] = -4.51908430E-01;
COFD[1075] = 1.90028465E-02;
COFD[1076] = -1.85943294E+01;
COFD[1077] = 4.83755761E+00;
COFD[1078] = -4.05511784E-01;
COFD[1079] = 1.72611905E-02;
COFD[1080] = -2.01089541E+01;
COFD[1081] = 5.18882241E+00;
COFD[1082] = -4.45812015E-01;
COFD[1083] = 1.87993555E-02;
COFD[1084] = -2.02895545E+01;
COFD[1085] = 5.25202191E+00;
COFD[1086] = -4.52324379E-01;
COFD[1087] = 1.90148397E-02;
COFD[1088] = -1.19933742E+01;
COFD[1089] = 2.60626843E+00;
COFD[1090] = -1.26430588E-01;
COFD[1091] = 5.59279078E-03;
COFD[1092] = -1.52998750E+01;
COFD[1093] = 3.35682263E+00;
COFD[1094] = -2.22792085E-01;
COFD[1095] = 9.72146426E-03;
COFD[1096] = -1.82848788E+01;
COFD[1097] = 4.39129454E+00;
COFD[1098] = -3.51868537E-01;
COFD[1099] = 1.51061900E-02;
COFD[1100] = -1.55569327E+01;
COFD[1101] = 3.46330464E+00;
COFD[1102] = -2.36324756E-01;
COFD[1103] = 1.02958912E-02;
COFD[1104] = -1.18093909E+01;
COFD[1105] = 2.51943893E+00;
COFD[1106] = -1.14751101E-01;
COFD[1107] = 5.06824011E-03;
COFD[1108] = -1.63348860E+01;
COFD[1109] = 3.74467521E+00;
COFD[1110] = -2.71821631E-01;
COFD[1111] = 1.17915267E-02;
COFD[1112] = -1.46869677E+01;
COFD[1113] = 3.82169011E+00;
COFD[1114] = -2.81495992E-01;
COFD[1115] = 1.21977446E-02;
COFD[1116] = -1.42830930E+01;
COFD[1117] = 3.14420863E+00;
COFD[1118] = -1.95659168E-01;
COFD[1119] = 8.56580235E-03;
COFD[1120] = -1.43030353E+01;
COFD[1121] = 3.14420863E+00;
COFD[1122] = -1.95659168E-01;
COFD[1123] = 8.56580235E-03;
COFD[1124] = -1.55645055E+01;
COFD[1125] = 3.46330464E+00;
COFD[1126] = -2.36324756E-01;
COFD[1127] = 1.02958912E-02;
COFD[1128] = -2.06660778E+01;
COFD[1129] = 5.39130019E+00;
COFD[1130] = -4.66147313E-01;
COFD[1131] = 1.94468738E-02;
COFD[1132] = -1.55717357E+01;
COFD[1133] = 3.46330464E+00;
COFD[1134] = -2.36324756E-01;
COFD[1135] = 1.02958912E-02;
COFD[1136] = -1.75856778E+01;
COFD[1137] = 4.16380625E+00;
COFD[1138] = -3.23194348E-01;
COFD[1139] = 1.38950546E-02;
COFD[1140] = -2.02839439E+01;
COFD[1141] = 5.25202191E+00;
COFD[1142] = -4.52324379E-01;
COFD[1143] = 1.90148397E-02;
COFD[1144] = -1.57514221E+01;
COFD[1145] = 3.53112737E+00;
COFD[1146] = -2.44559567E-01;
COFD[1147] = 1.06288335E-02;
COFD[1148] = -1.41380739E+01;
COFD[1149] = 3.04581651E+00;
COFD[1150] = -1.83223194E-01;
COFD[1151] = 8.04153523E-03;
COFD[1152] = -1.45005200E+01;
COFD[1153] = 3.04581651E+00;
COFD[1154] = -1.83223194E-01;
COFD[1155] = 8.04153523E-03;
COFD[1156] = -1.42512869E+01;
COFD[1157] = 3.14420863E+00;
COFD[1158] = -1.95659168E-01;
COFD[1159] = 8.56580235E-03;
COFD[1160] = -1.42296306E+01;
COFD[1161] = 3.14420863E+00;
COFD[1162] = -1.95659168E-01;
COFD[1163] = 8.56580235E-03;
COFD[1164] = -1.52821234E+01;
COFD[1165] = 3.35682263E+00;
COFD[1166] = -2.22792085E-01;
COFD[1167] = 9.72146426E-03;
COFD[1168] = -1.57593542E+01;
COFD[1169] = 3.53112737E+00;
COFD[1170] = -2.44559567E-01;
COFD[1171] = 1.06288335E-02;
COFD[1172] = -1.05443086E+01;
COFD[1173] = 1.98986109E+00;
COFD[1174] = -4.65259544E-02;
COFD[1175] = 2.14524566E-03;
COFD[1176] = -1.37228305E+01;
COFD[1177] = 2.87846903E+00;
COFD[1178] = -1.61681103E-01;
COFD[1179] = 7.11635115E-03;
COFD[1180] = -1.63140351E+01;
COFD[1181] = 3.79604160E+00;
COFD[1182] = -2.78251701E-01;
COFD[1183] = 1.20604727E-02;
COFD[1184] = -1.39241371E+01;
COFD[1185] = 2.96800700E+00;
COFD[1186] = -1.73235360E-01;
COFD[1187] = 7.61377726E-03;
COFD[1188] = -1.06289810E+01;
COFD[1189] = 2.09311029E+00;
COFD[1190] = -5.66715295E-02;
COFD[1191] = 2.42607686E-03;
COFD[1192] = -1.44917001E+01;
COFD[1193] = 3.17964349E+00;
COFD[1194] = -2.00113588E-01;
COFD[1195] = 8.75259314E-03;
COFD[1196] = -1.30271430E+01;
COFD[1197] = 3.24041848E+00;
COFD[1198] = -2.07804876E-01;
COFD[1199] = 9.07722400E-03;
COFD[1200] = -1.28579831E+01;
COFD[1201] = 2.69967657E+00;
COFD[1202] = -1.38362256E-01;
COFD[1203] = 6.10143187E-03;
COFD[1204] = -1.28720118E+01;
COFD[1205] = 2.69967657E+00;
COFD[1206] = -1.38362256E-01;
COFD[1207] = 6.10143187E-03;
COFD[1208] = -1.39288081E+01;
COFD[1209] = 2.96800700E+00;
COFD[1210] = -1.73235360E-01;
COFD[1211] = 7.61377726E-03;
COFD[1212] = -1.89148097E+01;
COFD[1213] = 4.90944038E+00;
COFD[1214] = -4.13866957E-01;
COFD[1215] = 1.75844447E-02;
COFD[1216] = -1.39332424E+01;
COFD[1217] = 2.96800700E+00;
COFD[1218] = -1.73235360E-01;
COFD[1219] = 7.61377726E-03;
COFD[1220] = -1.56135228E+01;
COFD[1221] = 3.56543193E+00;
COFD[1222] = -2.48622079E-01;
COFD[1223] = 1.07884452E-02;
COFD[1224] = -1.83539524E+01;
COFD[1225] = 4.68192371E+00;
COFD[1226] = -3.86807804E-01;
COFD[1227] = 1.65099246E-02;
COFD[1228] = -1.41380739E+01;
COFD[1229] = 3.04581651E+00;
COFD[1230] = -1.83223194E-01;
COFD[1231] = 8.04153523E-03;
COFD[1232] = -1.27957109E+01;
COFD[1233] = 2.62486277E+00;
COFD[1234] = -1.28774228E-01;
COFD[1235] = 5.69134090E-03;
COFD[1236] = -1.30915101E+01;
COFD[1237] = 2.62486277E+00;
COFD[1238] = -1.28774228E-01;
COFD[1239] = 5.69134090E-03;
COFD[1240] = -1.28249876E+01;
COFD[1241] = 2.69967657E+00;
COFD[1242] = -1.38362256E-01;
COFD[1243] = 6.10143187E-03;
COFD[1244] = -1.28095712E+01;
COFD[1245] = 2.69967657E+00;
COFD[1246] = -1.38362256E-01;
COFD[1247] = 6.10143187E-03;
COFD[1248] = -1.37116418E+01;
COFD[1249] = 2.87846903E+00;
COFD[1250] = -1.61681103E-01;
COFD[1251] = 7.11635115E-03;
COFD[1252] = -1.41429949E+01;
COFD[1253] = 3.04581651E+00;
COFD[1254] = -1.83223194E-01;
COFD[1255] = 8.04153523E-03;
COFD[1256] = -9.86246831E+00;
COFD[1257] = 1.77284056E+00;
COFD[1258] = -1.60519490E-02;
COFD[1259] = 7.22471994E-04;
COFD[1260] = -1.40798616E+01;
COFD[1261] = 2.87846903E+00;
COFD[1262] = -1.61681103E-01;
COFD[1263] = 7.11635115E-03;
COFD[1264] = -1.66988349E+01;
COFD[1265] = 3.79604160E+00;
COFD[1266] = -2.78251701E-01;
COFD[1267] = 1.20604727E-02;
COFD[1268] = -1.42899553E+01;
COFD[1269] = 2.96800700E+00;
COFD[1270] = -1.73235360E-01;
COFD[1271] = 7.61377726E-03;
COFD[1272] = -1.08173203E+01;
COFD[1273] = 2.09311029E+00;
COFD[1274] = -5.66715295E-02;
COFD[1275] = 2.42607686E-03;
COFD[1276] = -1.48786472E+01;
COFD[1277] = 3.17964349E+00;
COFD[1278] = -2.00113588E-01;
COFD[1279] = 8.75259314E-03;
COFD[1280] = -1.32235721E+01;
COFD[1281] = 3.24041848E+00;
COFD[1282] = -2.07804876E-01;
COFD[1283] = 9.07722400E-03;
COFD[1284] = -1.31782298E+01;
COFD[1285] = 2.69967657E+00;
COFD[1286] = -1.38362256E-01;
COFD[1287] = 6.10143187E-03;
COFD[1288] = -1.31977079E+01;
COFD[1289] = 2.69967657E+00;
COFD[1290] = -1.38362256E-01;
COFD[1291] = 6.10143187E-03;
COFD[1292] = -1.42972711E+01;
COFD[1293] = 2.96800700E+00;
COFD[1294] = -1.73235360E-01;
COFD[1295] = 7.61377726E-03;
COFD[1296] = -1.92494143E+01;
COFD[1297] = 4.90944038E+00;
COFD[1298] = -4.13866957E-01;
COFD[1299] = 1.75844447E-02;
COFD[1300] = -1.43042525E+01;
COFD[1301] = 2.96800700E+00;
COFD[1302] = -1.73235360E-01;
COFD[1303] = 7.61377726E-03;
COFD[1304] = -1.60080633E+01;
COFD[1305] = 3.56543193E+00;
COFD[1306] = -2.48622079E-01;
COFD[1307] = 1.07884452E-02;
COFD[1308] = -1.86755950E+01;
COFD[1309] = 4.68192371E+00;
COFD[1310] = -3.86807804E-01;
COFD[1311] = 1.65099246E-02;
COFD[1312] = -1.45005200E+01;
COFD[1313] = 3.04581651E+00;
COFD[1314] = -1.83223194E-01;
COFD[1315] = 8.04153523E-03;
COFD[1316] = -1.30915101E+01;
COFD[1317] = 2.62486277E+00;
COFD[1318] = -1.28774228E-01;
COFD[1319] = 5.69134090E-03;
COFD[1320] = -1.34422761E+01;
COFD[1321] = 2.62486277E+00;
COFD[1322] = -1.28774228E-01;
COFD[1323] = 5.69134090E-03;
COFD[1324] = -1.31479335E+01;
COFD[1325] = 2.69967657E+00;
COFD[1326] = -1.38362256E-01;
COFD[1327] = 6.10143187E-03;
COFD[1328] = -1.31267616E+01;
COFD[1329] = 2.69967657E+00;
COFD[1330] = -1.38362256E-01;
COFD[1331] = 6.10143187E-03;
COFD[1332] = -1.40626798E+01;
COFD[1333] = 2.87846903E+00;
COFD[1334] = -1.61681103E-01;
COFD[1335] = 7.11635115E-03;
COFD[1336] = -1.45081869E+01;
COFD[1337] = 3.04581651E+00;
COFD[1338] = -1.83223194E-01;
COFD[1339] = 8.04153523E-03;
COFD[1340] = -1.00869257E+01;
COFD[1341] = 1.77284056E+00;
COFD[1342] = -1.60519490E-02;
COFD[1343] = 7.22471994E-04;
COFD[1344] = -1.38566995E+01;
COFD[1345] = 2.98558426E+00;
COFD[1346] = -1.75507216E-01;
COFD[1347] = 7.71173691E-03;
COFD[1348] = -1.65667444E+01;
COFD[1349] = 3.94095281E+00;
COFD[1350] = -2.96521976E-01;
COFD[1351] = 1.28307737E-02;
COFD[1352] = -1.40544991E+01;
COFD[1353] = 3.07458927E+00;
COFD[1354] = -1.86899591E-01;
COFD[1355] = 8.19829781E-03;
COFD[1356] = -1.05895271E+01;
COFD[1357] = 2.15849701E+00;
COFD[1358] = -6.53886401E-02;
COFD[1359] = 2.81453370E-03;
COFD[1360] = -1.46756187E+01;
COFD[1361] = 3.30683499E+00;
COFD[1362] = -2.16378602E-01;
COFD[1363] = 9.44670561E-03;
COFD[1364] = -1.31439640E+01;
COFD[1365] = 3.38003453E+00;
COFD[1366] = -2.25783856E-01;
COFD[1367] = 9.85028660E-03;
COFD[1368] = -1.29514018E+01;
COFD[1369] = 2.80841511E+00;
COFD[1370] = -1.52629888E-01;
COFD[1371] = 6.72604927E-03;
COFD[1372] = -1.29664546E+01;
COFD[1373] = 2.80841511E+00;
COFD[1374] = -1.52629888E-01;
COFD[1375] = 6.72604927E-03;
COFD[1376] = -1.40596203E+01;
COFD[1377] = 3.07458927E+00;
COFD[1378] = -1.86899591E-01;
COFD[1379] = 8.19829781E-03;
COFD[1380] = -2.08861543E+01;
COFD[1381] = 5.52609835E+00;
COFD[1382] = -4.73147375E-01;
COFD[1383] = 1.93414815E-02;
COFD[1384] = -1.40644863E+01;
COFD[1385] = 3.07458927E+00;
COFD[1386] = -1.86899591E-01;
COFD[1387] = 8.19829781E-03;
COFD[1388] = -1.59514060E+01;
COFD[1389] = 3.75069346E+00;
COFD[1390] = -2.72581274E-01;
COFD[1391] = 1.18235631E-02;
COFD[1392] = -1.98750731E+01;
COFD[1393] = 5.24764202E+00;
COFD[1394] = -4.51908430E-01;
COFD[1395] = 1.90028465E-02;
COFD[1396] = -1.42512869E+01;
COFD[1397] = 3.14420863E+00;
COFD[1398] = -1.95659168E-01;
COFD[1399] = 8.56580235E-03;
COFD[1400] = -1.28249876E+01;
COFD[1401] = 2.69967657E+00;
COFD[1402] = -1.38362256E-01;
COFD[1403] = 6.10143187E-03;
COFD[1404] = -1.31479335E+01;
COFD[1405] = 2.69967657E+00;
COFD[1406] = -1.38362256E-01;
COFD[1407] = 6.10143187E-03;
COFD[1408] = -1.29143924E+01;
COFD[1409] = 2.80841511E+00;
COFD[1410] = -1.52629888E-01;
COFD[1411] = 6.72604927E-03;
COFD[1412] = -1.28978847E+01;
COFD[1413] = 2.80841511E+00;
COFD[1414] = -1.52629888E-01;
COFD[1415] = 6.72604927E-03;
COFD[1416] = -1.38444737E+01;
COFD[1417] = 2.98558426E+00;
COFD[1418] = -1.75507216E-01;
COFD[1419] = 7.71173691E-03;
COFD[1420] = -1.42566774E+01;
COFD[1421] = 3.14420863E+00;
COFD[1422] = -1.95659168E-01;
COFD[1423] = 8.56580235E-03;
COFD[1424] = -9.67003360E+00;
COFD[1425] = 1.77912272E+00;
COFD[1426] = -1.67349571E-02;
COFD[1427] = 7.45446845E-04;
COFD[1428] = -1.38352830E+01;
COFD[1429] = 2.98558426E+00;
COFD[1430] = -1.75507216E-01;
COFD[1431] = 7.71173691E-03;
COFD[1432] = -1.65427229E+01;
COFD[1433] = 3.94095281E+00;
COFD[1434] = -2.96521976E-01;
COFD[1435] = 1.28307737E-02;
COFD[1436] = -1.40326185E+01;
COFD[1437] = 3.07458927E+00;
COFD[1438] = -1.86899591E-01;
COFD[1439] = 8.19829781E-03;
COFD[1440] = -1.05857898E+01;
COFD[1441] = 2.15849701E+00;
COFD[1442] = -6.53886401E-02;
COFD[1443] = 2.81453370E-03;
COFD[1444] = -1.46522174E+01;
COFD[1445] = 3.30683499E+00;
COFD[1446] = -2.16378602E-01;
COFD[1447] = 9.44670561E-03;
COFD[1448] = -1.31419812E+01;
COFD[1449] = 3.38003453E+00;
COFD[1450] = -2.25783856E-01;
COFD[1451] = 9.85028660E-03;
COFD[1452] = -1.29349063E+01;
COFD[1453] = 2.80841511E+00;
COFD[1454] = -1.52629888E-01;
COFD[1455] = 6.72604927E-03;
COFD[1456] = -1.29494634E+01;
COFD[1457] = 2.80841511E+00;
COFD[1458] = -1.52629888E-01;
COFD[1459] = 6.72604927E-03;
COFD[1460] = -1.40375193E+01;
COFD[1461] = 3.07458927E+00;
COFD[1462] = -1.86899591E-01;
COFD[1463] = 8.19829781E-03;
COFD[1464] = -1.90549084E+01;
COFD[1465] = 5.02608697E+00;
COFD[1466] = -4.26959993E-01;
COFD[1467] = 1.80709910E-02;
COFD[1468] = -1.40421740E+01;
COFD[1469] = 3.07458927E+00;
COFD[1470] = -1.86899591E-01;
COFD[1471] = 8.19829781E-03;
COFD[1472] = -1.59271103E+01;
COFD[1473] = 3.75069346E+00;
COFD[1474] = -2.72581274E-01;
COFD[1475] = 1.18235631E-02;
COFD[1476] = -1.85943294E+01;
COFD[1477] = 4.83755761E+00;
COFD[1478] = -4.05511784E-01;
COFD[1479] = 1.72611905E-02;
COFD[1480] = -1.42296306E+01;
COFD[1481] = 3.14420863E+00;
COFD[1482] = -1.95659168E-01;
COFD[1483] = 8.56580235E-03;
COFD[1484] = -1.28095712E+01;
COFD[1485] = 2.69967657E+00;
COFD[1486] = -1.38362256E-01;
COFD[1487] = 6.10143187E-03;
COFD[1488] = -1.31267616E+01;
COFD[1489] = 2.69967657E+00;
COFD[1490] = -1.38362256E-01;
COFD[1491] = 6.10143187E-03;
COFD[1492] = -1.28978847E+01;
COFD[1493] = 2.80841511E+00;
COFD[1494] = -1.52629888E-01;
COFD[1495] = 6.72604927E-03;
COFD[1496] = -1.28819047E+01;
COFD[1497] = 2.80841511E+00;
COFD[1498] = -1.52629888E-01;
COFD[1499] = 6.72604927E-03;
COFD[1500] = -1.38235639E+01;
COFD[1501] = 2.98558426E+00;
COFD[1502] = -1.75507216E-01;
COFD[1503] = 7.71173691E-03;
COFD[1504] = -1.42347914E+01;
COFD[1505] = 3.14420863E+00;
COFD[1506] = -1.95659168E-01;
COFD[1507] = 8.56580235E-03;
COFD[1508] = -9.66336915E+00;
COFD[1509] = 1.77912272E+00;
COFD[1510] = -1.67349571E-02;
COFD[1511] = 7.45446845E-04;
COFD[1512] = -1.47808195E+01;
COFD[1513] = 3.15955654E+00;
COFD[1514] = -1.97590757E-01;
COFD[1515] = 8.64692156E-03;
COFD[1516] = -1.75495068E+01;
COFD[1517] = 4.11812310E+00;
COFD[1518] = -3.17419841E-01;
COFD[1519] = 1.36506623E-02;
COFD[1520] = -1.50096252E+01;
COFD[1521] = 3.25515933E+00;
COFD[1522] = -2.09710110E-01;
COFD[1523] = 9.15941830E-03;
COFD[1524] = -1.13253618E+01;
COFD[1525] = 2.31195095E+00;
COFD[1526] = -8.63988037E-02;
COFD[1527] = 3.77573452E-03;
COFD[1528] = -1.57236886E+01;
COFD[1529] = 3.51447210E+00;
COFD[1530] = -2.42579007E-01;
COFD[1531] = 1.05506318E-02;
COFD[1532] = -1.40298991E+01;
COFD[1533] = 3.55837688E+00;
COFD[1534] = -2.47785790E-01;
COFD[1535] = 1.07555332E-02;
COFD[1536] = -1.38756380E+01;
COFD[1537] = 2.98558426E+00;
COFD[1538] = -1.75507216E-01;
COFD[1539] = 7.71173691E-03;
COFD[1540] = -1.38948654E+01;
COFD[1541] = 2.98558426E+00;
COFD[1542] = -1.75507216E-01;
COFD[1543] = 7.71173691E-03;
COFD[1544] = -1.50168047E+01;
COFD[1545] = 3.25515933E+00;
COFD[1546] = -2.09710110E-01;
COFD[1547] = 9.15941830E-03;
COFD[1548] = -2.08123331E+01;
COFD[1549] = 5.42470175E+00;
COFD[1550] = -4.69700438E-01;
COFD[1551] = 1.95706912E-02;
COFD[1552] = -1.50236540E+01;
COFD[1553] = 3.25515933E+00;
COFD[1554] = -2.09710110E-01;
COFD[1555] = 9.15941830E-03;
COFD[1556] = -1.70855751E+01;
COFD[1557] = 3.98796503E+00;
COFD[1558] = -3.02241183E-01;
COFD[1559] = 1.30631251E-02;
COFD[1560] = -2.01089541E+01;
COFD[1561] = 5.18882241E+00;
COFD[1562] = -4.45812015E-01;
COFD[1563] = 1.87993555E-02;
COFD[1564] = -1.52821234E+01;
COFD[1565] = 3.35682263E+00;
COFD[1566] = -2.22792085E-01;
COFD[1567] = 9.72146426E-03;
COFD[1568] = -1.37116418E+01;
COFD[1569] = 2.87846903E+00;
COFD[1570] = -1.61681103E-01;
COFD[1571] = 7.11635115E-03;
COFD[1572] = -1.40626798E+01;
COFD[1573] = 2.87846903E+00;
COFD[1574] = -1.61681103E-01;
COFD[1575] = 7.11635115E-03;
COFD[1576] = -1.38444737E+01;
COFD[1577] = 2.98558426E+00;
COFD[1578] = -1.75507216E-01;
COFD[1579] = 7.71173691E-03;
COFD[1580] = -1.38235639E+01;
COFD[1581] = 2.98558426E+00;
COFD[1582] = -1.75507216E-01;
COFD[1583] = 7.71173691E-03;
COFD[1584] = -1.47639411E+01;
COFD[1585] = 3.15955654E+00;
COFD[1586] = -1.97590757E-01;
COFD[1587] = 8.64692156E-03;
COFD[1588] = -1.52896494E+01;
COFD[1589] = 3.35682263E+00;
COFD[1590] = -2.22792085E-01;
COFD[1591] = 9.72146426E-03;
COFD[1592] = -1.01976439E+01;
COFD[1593] = 1.83188320E+00;
COFD[1594] = -2.40547456E-02;
COFD[1595] = 1.08399898E-03;
COFD[1596] = -1.53076751E+01;
COFD[1597] = 3.35682263E+00;
COFD[1598] = -2.22792085E-01;
COFD[1599] = 9.72146426E-03;
COFD[1600] = -1.82941981E+01;
COFD[1601] = 4.39129454E+00;
COFD[1602] = -3.51868537E-01;
COFD[1603] = 1.51061900E-02;
COFD[1604] = -1.55649898E+01;
COFD[1605] = 3.46330464E+00;
COFD[1606] = -2.36324756E-01;
COFD[1607] = 1.02958912E-02;
COFD[1608] = -1.18103524E+01;
COFD[1609] = 2.51943893E+00;
COFD[1610] = -1.14751101E-01;
COFD[1611] = 5.06824011E-03;
COFD[1612] = -1.63438260E+01;
COFD[1613] = 3.74467521E+00;
COFD[1614] = -2.71821631E-01;
COFD[1615] = 1.17915267E-02;
COFD[1616] = -1.46874634E+01;
COFD[1617] = 3.82169011E+00;
COFD[1618] = -2.81495992E-01;
COFD[1619] = 1.21977446E-02;
COFD[1620] = -1.42884781E+01;
COFD[1621] = 3.14420863E+00;
COFD[1622] = -1.95659168E-01;
COFD[1623] = 8.56580235E-03;
COFD[1624] = -1.43086408E+01;
COFD[1625] = 3.14420863E+00;
COFD[1626] = -1.95659168E-01;
COFD[1627] = 8.56580235E-03;
COFD[1628] = -1.55726865E+01;
COFD[1629] = 3.46330464E+00;
COFD[1630] = -2.36324756E-01;
COFD[1631] = 1.02958912E-02;
COFD[1632] = -2.06718947E+01;
COFD[1633] = 5.39130019E+00;
COFD[1634] = -4.66147313E-01;
COFD[1635] = 1.94468738E-02;
COFD[1636] = -1.55800369E+01;
COFD[1637] = 3.46330464E+00;
COFD[1638] = -2.36324756E-01;
COFD[1639] = 1.02958912E-02;
COFD[1640] = -1.75951686E+01;
COFD[1641] = 4.16380625E+00;
COFD[1642] = -3.23194348E-01;
COFD[1643] = 1.38950546E-02;
COFD[1644] = -2.02895545E+01;
COFD[1645] = 5.25202191E+00;
COFD[1646] = -4.52324379E-01;
COFD[1647] = 1.90148397E-02;
COFD[1648] = -1.57593542E+01;
COFD[1649] = 3.53112737E+00;
COFD[1650] = -2.44559567E-01;
COFD[1651] = 1.06288335E-02;
COFD[1652] = -1.41429949E+01;
COFD[1653] = 3.04581651E+00;
COFD[1654] = -1.83223194E-01;
COFD[1655] = 8.04153523E-03;
COFD[1656] = -1.45081869E+01;
COFD[1657] = 3.04581651E+00;
COFD[1658] = -1.83223194E-01;
COFD[1659] = 8.04153523E-03;
COFD[1660] = -1.42566774E+01;
COFD[1661] = 3.14420863E+00;
COFD[1662] = -1.95659168E-01;
COFD[1663] = 8.56580235E-03;
COFD[1664] = -1.42347914E+01;
COFD[1665] = 3.14420863E+00;
COFD[1666] = -1.95659168E-01;
COFD[1667] = 8.56580235E-03;
COFD[1668] = -1.52896494E+01;
COFD[1669] = 3.35682263E+00;
COFD[1670] = -2.22792085E-01;
COFD[1671] = 9.72146426E-03;
COFD[1672] = -1.57674143E+01;
COFD[1673] = 3.53112737E+00;
COFD[1674] = -2.44559567E-01;
COFD[1675] = 1.06288335E-02;
COFD[1676] = -1.05461109E+01;
COFD[1677] = 1.98986109E+00;
COFD[1678] = -4.65259544E-02;
COFD[1679] = 2.14524566E-03;
COFD[1680] = -1.02018109E+01;
COFD[1681] = 1.83188320E+00;
COFD[1682] = -2.40547456E-02;
COFD[1683] = 1.08399898E-03;
COFD[1684] = -1.09443671E+01;
COFD[1685] = 2.05650507E+00;
COFD[1686] = -5.22299948E-02;
COFD[1687] = 2.24784547E-03;
COFD[1688] = -1.03310320E+01;
COFD[1689] = 1.90522472E+00;
COFD[1690] = -3.44812795E-02;
COFD[1691] = 1.57640018E-03;
COFD[1692] = -9.86430173E+00;
COFD[1693] = 2.05348746E+00;
COFD[1694] = -5.90289007E-02;
COFD[1695] = 2.89596157E-03;
COFD[1696] = -1.08140217E+01;
COFD[1697] = 2.11737538E+00;
COFD[1698] = -6.46167749E-02;
COFD[1699] = 2.99827695E-03;
COFD[1700] = -9.71339666E+00;
COFD[1701] = 2.17561180E+00;
COFD[1702] = -7.28270090E-02;
COFD[1703] = 3.38302182E-03;
COFD[1704] = -9.70779235E+00;
COFD[1705] = 1.77912272E+00;
COFD[1706] = -1.67349571E-02;
COFD[1707] = 7.45446845E-04;
COFD[1708] = -9.71375815E+00;
COFD[1709] = 1.77912272E+00;
COFD[1710] = -1.67349571E-02;
COFD[1711] = 7.45446845E-04;
COFD[1712] = -1.03327327E+01;
COFD[1713] = 1.90522472E+00;
COFD[1714] = -3.44812795E-02;
COFD[1715] = 1.57640018E-03;
COFD[1716] = -1.21950641E+01;
COFD[1717] = 2.72222246E+00;
COFD[1718] = -1.41335602E-01;
COFD[1719] = 6.23222872E-03;
COFD[1720] = -1.03343378E+01;
COFD[1721] = 1.90522472E+00;
COFD[1722] = -3.44812795E-02;
COFD[1723] = 1.57640018E-03;
COFD[1724] = -1.11259915E+01;
COFD[1725] = 2.19577467E+00;
COFD[1726] = -7.36533590E-02;
COFD[1727] = 3.33031927E-03;
COFD[1728] = -1.19933742E+01;
COFD[1729] = 2.60626843E+00;
COFD[1730] = -1.26430588E-01;
COFD[1731] = 5.59279078E-03;
COFD[1732] = -1.05443086E+01;
COFD[1733] = 1.98986109E+00;
COFD[1734] = -4.65259544E-02;
COFD[1735] = 2.14524566E-03;
COFD[1736] = -9.86246831E+00;
COFD[1737] = 1.77284056E+00;
COFD[1738] = -1.60519490E-02;
COFD[1739] = 7.22471994E-04;
COFD[1740] = -1.00869257E+01;
COFD[1741] = 1.77284056E+00;
COFD[1742] = -1.60519490E-02;
COFD[1743] = 7.22471994E-04;
COFD[1744] = -9.67003360E+00;
COFD[1745] = 1.77912272E+00;
COFD[1746] = -1.67349571E-02;
COFD[1747] = 7.45446845E-04;
COFD[1748] = -9.66336915E+00;
COFD[1749] = 1.77912272E+00;
COFD[1750] = -1.67349571E-02;
COFD[1751] = 7.45446845E-04;
COFD[1752] = -1.01976439E+01;
COFD[1753] = 1.83188320E+00;
COFD[1754] = -2.40547456E-02;
COFD[1755] = 1.08399898E-03;
COFD[1756] = -1.05461109E+01;
COFD[1757] = 1.98986109E+00;
COFD[1758] = -4.65259544E-02;
COFD[1759] = 2.14524566E-03;
COFD[1760] = -7.72963456E+00;
COFD[1761] = 1.13864728E+00;
COFD[1762] = 7.22991035E-02;
COFD[1763] = -3.32491895E-03;
}


// List of specs with small weight, dim NLITE
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetKTDIF(int* KTDIF) {
KTDIF[0] = 3;
KTDIF[1] = 5;
KTDIF[2] = 20;
}


// Poly fits for thermal diff ratios, dim NO*NLITE*KK
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE
void egtransetCOFTD(amrex::Real* COFTD) {
COFTD[0] = 4.49557154E-01;
COFTD[1] = 4.99469235E-05;
COFTD[2] = -2.65560679E-08;
COFTD[3] = 4.95035922E-12;
COFTD[4] = 3.35327294E-01;
COFTD[5] = 2.88452747E-04;
COFTD[6] = -1.48254726E-07;
COFTD[7] = 2.31653480E-11;
COFTD[8] = 4.42736017E-01;
COFTD[9] = 7.11765887E-05;
COFTD[10] = -3.84765396E-08;
COFTD[11] = 6.86318682E-12;
COFTD[12] = 0.00000000E+00;
COFTD[13] = 0.00000000E+00;
COFTD[14] = 0.00000000E+00;
COFTD[15] = 0.00000000E+00;
COFTD[16] = 4.22531096E-01;
COFTD[17] = 1.32084539E-04;
COFTD[18] = -7.12223786E-08;
COFTD[19] = 1.19516336E-11;
COFTD[20] = -1.52534742E-01;
COFTD[21] = -5.46404022E-05;
COFTD[22] = 2.93412470E-08;
COFTD[23] = -4.87091914E-12;
COFTD[24] = 4.15577509E-01;
COFTD[25] = 1.09736860E-05;
COFTD[26] = -3.96016410E-09;
COFTD[27] = 1.14412838E-12;
COFTD[28] = 4.21927217E-01;
COFTD[29] = 1.11413555E-05;
COFTD[30] = -4.02067239E-09;
COFTD[31] = 1.16160979E-12;
COFTD[32] = 4.44449675E-01;
COFTD[33] = 7.14520855E-05;
COFTD[34] = -3.86254673E-08;
COFTD[35] = 6.88975155E-12;
COFTD[36] = 6.02021050E-02;
COFTD[37] = 5.61555733E-04;
COFTD[38] = -2.55370065E-07;
COFTD[39] = 3.63385926E-11;
COFTD[40] = 4.46067449E-01;
COFTD[41] = 7.17121674E-05;
COFTD[42] = -3.87660620E-08;
COFTD[43] = 6.91482989E-12;
COFTD[44] = 3.65114542E-01;
COFTD[45] = 2.43355701E-04;
COFTD[46] = -1.26964441E-07;
COFTD[47] = 2.01632989E-11;
COFTD[48] = 1.23931740E-01;
COFTD[49] = 4.81545050E-04;
COFTD[50] = -2.26400675E-07;
COFTD[51] = 3.29338524E-11;
COFTD[52] = 4.31052761E-01;
COFTD[53] = 8.98746845E-05;
COFTD[54] = -4.87348340E-08;
COFTD[55] = 8.47045235E-12;
COFTD[56] = 4.08054085E-01;
COFTD[57] = -5.16606287E-06;
COFTD[58] = 5.98160357E-09;
COFTD[59] = -5.96776897E-13;
COFTD[60] = 4.74430602E-01;
COFTD[61] = -6.00640553E-06;
COFTD[62] = 6.95460696E-09;
COFTD[63] = -6.93852194E-13;
COFTD[64] = 4.15736940E-01;
COFTD[65] = 1.09778959E-05;
COFTD[66] = -3.96168336E-09;
COFTD[67] = 1.14456731E-12;
COFTD[68] = 4.08653986E-01;
COFTD[69] = 1.07908643E-05;
COFTD[70] = -3.89418775E-09;
COFTD[71] = 1.12506720E-12;
COFTD[72] = 4.45261429E-01;
COFTD[73] = 4.94696577E-05;
COFTD[74] = -2.63023124E-08;
COFTD[75] = 4.90305626E-12;
COFTD[76] = 4.32827683E-01;
COFTD[77] = 9.02447566E-05;
COFTD[78] = -4.89355068E-08;
COFTD[79] = 8.50533067E-12;
COFTD[80] = 1.61607281E-01;
COFTD[81] = 4.74136612E-05;
COFTD[82] = -1.67108646E-08;
COFTD[83] = -1.88974661E-12;
COFTD[84] = 2.41898574E-01;
COFTD[85] = 4.47478472E-04;
COFTD[86] = -2.19219821E-07;
COFTD[87] = 3.28525978E-11;
COFTD[88] = 3.60452488E-02;
COFTD[89] = 7.07397134E-04;
COFTD[90] = -3.16576707E-07;
COFTD[91] = 4.45911473E-11;
COFTD[92] = 2.20482081E-01;
COFTD[93] = 4.80162630E-04;
COFTD[94] = -2.32927140E-07;
COFTD[95] = 3.46469239E-11;
COFTD[96] = 1.52534742E-01;
COFTD[97] = 5.46404022E-05;
COFTD[98] = -2.93412470E-08;
COFTD[99] = 4.87091914E-12;
COFTD[100] = 1.65429391E-01;
COFTD[101] = 5.61239497E-04;
COFTD[102] = -2.65650817E-07;
COFTD[103] = 3.88229990E-11;
COFTD[104] = 0.00000000E+00;
COFTD[105] = 0.00000000E+00;
COFTD[106] = 0.00000000E+00;
COFTD[107] = 0.00000000E+00;
COFTD[108] = 2.70008280E-01;
COFTD[109] = 3.61552588E-04;
COFTD[110] = -1.80743499E-07;
COFTD[111] = 2.75319341E-11;
COFTD[112] = 2.72039997E-01;
COFTD[113] = 3.64273144E-04;
COFTD[114] = -1.82103531E-07;
COFTD[115] = 2.77391022E-11;
COFTD[116] = 2.20907136E-01;
COFTD[117] = 4.81088308E-04;
COFTD[118] = -2.33376187E-07;
COFTD[119] = 3.47137178E-11;
COFTD[120] = -1.41882969E-01;
COFTD[121] = 7.66554625E-04;
COFTD[122] = -3.06548330E-07;
COFTD[123] = 4.02957302E-11;
COFTD[124] = 2.21307723E-01;
COFTD[125] = 4.81960701E-04;
COFTD[126] = -2.33799385E-07;
COFTD[127] = 3.47766667E-11;
COFTD[128] = 7.24884454E-02;
COFTD[129] = 6.72566840E-04;
COFTD[130] = -3.05899116E-07;
COFTD[131] = 4.35329951E-11;
COFTD[132] = -1.12795409E-01;
COFTD[133] = 7.56831775E-04;
COFTD[134] = -3.10287726E-07;
COFTD[135] = 4.14151786E-11;
COFTD[136] = 2.00476567E-01;
COFTD[137] = 5.05288288E-04;
COFTD[138] = -2.43043142E-07;
COFTD[139] = 3.59265112E-11;
COFTD[140] = 2.87878324E-01;
COFTD[141] = 3.20985956E-04;
COFTD[142] = -1.62335562E-07;
COFTD[143] = 2.49791443E-11;
COFTD[144] = 3.10201684E-01;
COFTD[145] = 3.45876628E-04;
COFTD[146] = -1.74923780E-07;
COFTD[147] = 2.69161377E-11;
COFTD[148] = 2.70059449E-01;
COFTD[149] = 3.61621106E-04;
COFTD[150] = -1.80777752E-07;
COFTD[151] = 2.75371516E-11;
COFTD[152] = 2.67778365E-01;
COFTD[153] = 3.58566637E-04;
COFTD[154] = -1.79250795E-07;
COFTD[155] = 2.73045564E-11;
COFTD[156] = 2.40744276E-01;
COFTD[157] = 4.45343183E-04;
COFTD[158] = -2.18173742E-07;
COFTD[159] = 3.26958310E-11;
COFTD[160] = 2.00887620E-01;
COFTD[161] = 5.06324321E-04;
COFTD[162] = -2.43541473E-07;
COFTD[163] = 3.60001742E-11;
COFTD[164] = 3.40757071E-01;
COFTD[165] = -4.04051397E-05;
COFTD[166] = 3.27874373E-08;
COFTD[167] = -6.27083944E-12;
COFTD[168] = 4.30253526E-01;
COFTD[169] = -4.22130287E-05;
COFTD[170] = 4.47322240E-08;
COFTD[171] = -1.04869531E-11;
COFTD[172] = 4.62316325E-01;
COFTD[173] = -2.34666596E-05;
COFTD[174] = 1.83252649E-08;
COFTD[175] = -2.78260510E-12;
COFTD[176] = 4.40217977E-01;
COFTD[177] = -4.83714278E-05;
COFTD[178] = 4.66085877E-08;
COFTD[179] = -1.02767764E-11;
COFTD[180] = -1.61607281E-01;
COFTD[181] = -4.74136612E-05;
COFTD[182] = 1.67108646E-08;
COFTD[183] = 1.88974661E-12;
COFTD[184] = 4.66319838E-01;
COFTD[185] = -5.60156045E-05;
COFTD[186] = 4.65992344E-08;
COFTD[187] = -9.13655484E-12;
COFTD[188] = -3.40757071E-01;
COFTD[189] = 4.04051397E-05;
COFTD[190] = -3.27874373E-08;
COFTD[191] = 6.27083944E-12;
COFTD[192] = 3.31583426E-01;
COFTD[193] = -1.96385405E-05;
COFTD[194] = 3.02384712E-08;
COFTD[195] = -8.44986516E-12;
COFTD[196] = 3.42199332E-01;
COFTD[197] = -2.02672839E-05;
COFTD[198] = 3.12065798E-08;
COFTD[199] = -8.72039429E-12;
COFTD[200] = 4.43646534E-01;
COFTD[201] = -4.87481598E-05;
COFTD[202] = 4.69715901E-08;
COFTD[203] = -1.03568152E-11;
COFTD[204] = 2.84980924E-01;
COFTD[205] = 1.15458959E-04;
COFTD[206] = -6.17192280E-08;
COFTD[207] = 1.01503292E-11;
COFTD[208] = 4.46893277E-01;
COFTD[209] = -4.91049140E-05;
COFTD[210] = 4.73153427E-08;
COFTD[211] = -1.04326096E-11;
COFTD[212] = 4.72630863E-01;
COFTD[213] = -3.92876862E-05;
COFTD[214] = 2.96879202E-08;
COFTD[215] = -4.98463616E-12;
COFTD[216] = 2.94921869E-01;
COFTD[217] = 8.06281947E-05;
COFTD[218] = -4.36093937E-08;
COFTD[219] = 7.39937573E-12;
COFTD[220] = 4.38324528E-01;
COFTD[221] = -5.10401844E-05;
COFTD[222] = 4.62315988E-08;
COFTD[223] = -9.74356171E-12;
COFTD[224] = 3.03069887E-01;
COFTD[225] = -8.31367419E-06;
COFTD[226] = 2.35871054E-08;
COFTD[227] = -7.70378678E-12;
COFTD[228] = 4.13328361E-01;
COFTD[229] = -1.13382341E-05;
COFTD[230] = 3.21682226E-08;
COFTD[231] = -1.05064663E-11;
COFTD[232] = 3.31848605E-01;
COFTD[233] = -1.96542461E-05;
COFTD[234] = 3.02626540E-08;
COFTD[235] = -8.45662283E-12;
COFTD[236] = 3.20134791E-01;
COFTD[237] = -1.89604774E-05;
COFTD[238] = 2.91944226E-08;
COFTD[239] = -8.15811530E-12;
COFTD[240] = 4.22012509E-01;
COFTD[241] = -4.14044861E-05;
COFTD[242] = 4.38754291E-08;
COFTD[243] = -1.02860874E-11;
COFTD[244] = 4.41959344E-01;
COFTD[245] = -5.14634363E-05;
COFTD[246] = 4.66149754E-08;
COFTD[247] = -9.82436041E-12;
COFTD[248] = 0.00000000E+00;
COFTD[249] = 0.00000000E+00;
COFTD[250] = 0.00000000E+00;
COFTD[251] = 0.00000000E+00;
}


// compute the critical parameters for each species
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void GET_CRITPARAMS(amrex::Real *  Tci, amrex::Real *  ai, amrex::Real *  bi, amrex::Real *  acentric_i)
{

amrex::Real   EPS[21];
amrex::Real   SIG[21];
amrex::Real    wt[21];
amrex::Real avogadro = 6.02214199e23;
amrex::Real boltzmann = 1.3806503e-16;// we work in CGS
amrex::Real Rcst = 83.144598;// in bar [CGS] !

egtransetEPS(EPS);
egtransetSIG(SIG);
get_mw(wt);

// species 0: NO
// Imported from NIST
Tci[0] = 180.000000 ; 
ai[0] = 1e6 * 0.42748 * Rcst * Rcst * Tci[0] * Tci[0] / (30.006000 * 30.006000 * 64.800000); 
bi[0] = 0.08664 * Rcst * Tci[0] / (30.006000 * 64.800000); 
acentric_i[0] = 0.582000 ;

// species 1: N2O
// Imported from NIST
Tci[1] = 309.600000 ; 
ai[1] = 1e6 * 0.42748 * Rcst * Rcst * Tci[1] * Tci[1] / (44.013000 * 44.013000 * 72.550000); 
bi[1] = 0.08664 * Rcst * Tci[1] / (44.013000 * 72.550000); 
acentric_i[1] = 0.162000 ;

// species 2: O2
// Imported from NIST
Tci[2] = 154.581000 ; 
ai[2] = 1e6 * 0.42748 * Rcst * Rcst * Tci[2] * Tci[2] / (31.998800 * 31.998800 * 50.430466); 
bi[2] = 0.08664 * Rcst * Tci[2] / (31.998800 * 50.430466); 
acentric_i[2] = 0.022200 ;

// species 3: H2
// Imported from NIST
Tci[3] = 33.145000 ; 
ai[3] = 1e6 * 0.42748 * Rcst * Rcst * Tci[3] * Tci[3] / (2.015880 * 2.015880 * 12.964000); 
bi[3] = 0.08664 * Rcst * Tci[3] / (2.015880 * 12.964000); 
acentric_i[3] = -0.219000 ;

// species 4: AR
// Imported from NIST
Tci[4] = 150.860000 ; 
ai[4] = 1e6 * 0.42748 * Rcst * Rcst * Tci[4] * Tci[4] / (39.948000 * 39.948000 * 48.980000); 
bi[4] = 0.08664 * Rcst * Tci[4] / (39.948000 * 48.980000); 
acentric_i[4] = -0.002000 ;

// species 5: H
Tci[5] = 1.316 * EPS[5] ; 
ai[5] = (5.55 * avogadro * avogadro * EPS[5]*boltzmann * 1e-24 * SIG[5] * SIG[5] * SIG[5] ) / (wt[5] * wt[5]); 
bi[5] = 0.855 * avogadro * 1e-24 * SIG[5] * SIG[5] * SIG[5] / (wt[5]); 
acentric_i[5] = 0.0 ;

// species 6: O
Tci[6] = 1.316 * EPS[6] ; 
ai[6] = (5.55 * avogadro * avogadro * EPS[6]*boltzmann * 1e-24 * SIG[6] * SIG[6] * SIG[6] ) / (wt[6] * wt[6]); 
bi[6] = 0.855 * avogadro * 1e-24 * SIG[6] * SIG[6] * SIG[6] / (wt[6]); 
acentric_i[6] = 0.0 ;

// species 7: OH
Tci[7] = 1.316 * EPS[7] ; 
ai[7] = (5.55 * avogadro * avogadro * EPS[7]*boltzmann * 1e-24 * SIG[7] * SIG[7] * SIG[7] ) / (wt[7] * wt[7]); 
bi[7] = 0.855 * avogadro * 1e-24 * SIG[7] * SIG[7] * SIG[7] / (wt[7]); 
acentric_i[7] = 0.0 ;

// species 8: HO2
Tci[8] = 1.316 * EPS[8] ; 
ai[8] = (5.55 * avogadro * avogadro * EPS[8]*boltzmann * 1e-24 * SIG[8] * SIG[8] * SIG[8] ) / (wt[8] * wt[8]); 
bi[8] = 0.855 * avogadro * 1e-24 * SIG[8] * SIG[8] * SIG[8] / (wt[8]); 
acentric_i[8] = 0.0 ;

// species 9: H2O
// Imported from NIST
Tci[9] = 647.096000 ; 
ai[9] = 1e6 * 0.42748 * Rcst * Rcst * Tci[9] * Tci[9] / (18.015340 * 18.015340 * 220.640000); 
bi[9] = 0.08664 * Rcst * Tci[9] / (18.015340 * 220.640000); 
acentric_i[9] = 0.344300 ;

// species 10: H2O2
Tci[10] = 1.316 * EPS[10] ; 
ai[10] = (5.55 * avogadro * avogadro * EPS[10]*boltzmann * 1e-24 * SIG[10] * SIG[10] * SIG[10] ) / (wt[10] * wt[10]); 
bi[10] = 0.855 * avogadro * 1e-24 * SIG[10] * SIG[10] * SIG[10] / (wt[10]); 
acentric_i[10] = 0.0 ;

// species 11: NO2
Tci[11] = 1.316 * EPS[11] ; 
ai[11] = (5.55 * avogadro * avogadro * EPS[11]*boltzmann * 1e-24 * SIG[11] * SIG[11] * SIG[11] ) / (wt[11] * wt[11]); 
bi[11] = 0.855 * avogadro * 1e-24 * SIG[11] * SIG[11] * SIG[11] / (wt[11]); 
acentric_i[11] = 0.0 ;

// species 12: NH3
Tci[12] = 1.316 * EPS[12] ; 
ai[12] = (5.55 * avogadro * avogadro * EPS[12]*boltzmann * 1e-24 * SIG[12] * SIG[12] * SIG[12] ) / (wt[12] * wt[12]); 
bi[12] = 0.855 * avogadro * 1e-24 * SIG[12] * SIG[12] * SIG[12] / (wt[12]); 
acentric_i[12] = 0.0 ;

// species 13: HNO
Tci[13] = 1.316 * EPS[13] ; 
ai[13] = (5.55 * avogadro * avogadro * EPS[13]*boltzmann * 1e-24 * SIG[13] * SIG[13] * SIG[13] ) / (wt[13] * wt[13]); 
bi[13] = 0.855 * avogadro * 1e-24 * SIG[13] * SIG[13] * SIG[13] / (wt[13]); 
acentric_i[13] = 0.0 ;

// species 14: N
Tci[14] = 1.316 * EPS[14] ; 
ai[14] = (5.55 * avogadro * avogadro * EPS[14]*boltzmann * 1e-24 * SIG[14] * SIG[14] * SIG[14] ) / (wt[14] * wt[14]); 
bi[14] = 0.855 * avogadro * 1e-24 * SIG[14] * SIG[14] * SIG[14] / (wt[14]); 
acentric_i[14] = 0.0 ;

// species 15: N2H
Tci[15] = 1.316 * EPS[15] ; 
ai[15] = (5.55 * avogadro * avogadro * EPS[15]*boltzmann * 1e-24 * SIG[15] * SIG[15] * SIG[15] ) / (wt[15] * wt[15]); 
bi[15] = 0.855 * avogadro * 1e-24 * SIG[15] * SIG[15] * SIG[15] / (wt[15]); 
acentric_i[15] = 0.0 ;

// species 16: NH2
Tci[16] = 1.316 * EPS[16] ; 
ai[16] = (5.55 * avogadro * avogadro * EPS[16]*boltzmann * 1e-24 * SIG[16] * SIG[16] * SIG[16] ) / (wt[16] * wt[16]); 
bi[16] = 0.855 * avogadro * 1e-24 * SIG[16] * SIG[16] * SIG[16] / (wt[16]); 
acentric_i[16] = 0.0 ;

// species 17: NH
Tci[17] = 1.316 * EPS[17] ; 
ai[17] = (5.55 * avogadro * avogadro * EPS[17]*boltzmann * 1e-24 * SIG[17] * SIG[17] * SIG[17] ) / (wt[17] * wt[17]); 
bi[17] = 0.855 * avogadro * 1e-24 * SIG[17] * SIG[17] * SIG[17] / (wt[17]); 
acentric_i[17] = 0.0 ;

// species 18: N2
// Imported from NIST
Tci[18] = 126.192000 ; 
ai[18] = 1e6 * 0.42748 * Rcst * Rcst * Tci[18] * Tci[18] / (28.013400 * 28.013400 * 33.958000); 
bi[18] = 0.08664 * Rcst * Tci[18] / (28.013400 * 33.958000); 
acentric_i[18] = 0.037200 ;

// species 19: H2NO
Tci[19] = 1.316 * EPS[19] ; 
ai[19] = (5.55 * avogadro * avogadro * EPS[19]*boltzmann * 1e-24 * SIG[19] * SIG[19] * SIG[19] ) / (wt[19] * wt[19]); 
bi[19] = 0.855 * avogadro * 1e-24 * SIG[19] * SIG[19] * SIG[19] / (wt[19]); 
acentric_i[19] = 0.0 ;

// species 20: HE
Tci[20] = 1.316 * EPS[20] ; 
ai[20] = (5.55 * avogadro * avogadro * EPS[20]*boltzmann * 1e-24 * SIG[20] * SIG[20] * SIG[20] ) / (wt[20] * wt[20]); 
bi[20] = 0.855 * avogadro * 1e-24 * SIG[20] * SIG[20] * SIG[20] / (wt[20]); 
acentric_i[20] = 0.0 ;

return;
}

// gauss-jordan solver external routine
// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void sgjsolve(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/) {
amrex::Abort("sgjsolve not implemented, choose a different solver ");
}

// Replace this routine with the one generated by the Gauss Jordan solver of DW
AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void sgjsolve_simplified(amrex::Real* /*A*/, amrex::Real* /*x*/, amrex::Real* /*b*/) {
amrex::Abort("sgjsolve_simplified not implemented, choose a different solver ");
}

#endif
